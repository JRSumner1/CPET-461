
Lab 5_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b1c  08005b1c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b24  08005b24  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b2c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000010  08005b3c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  08005b3c  0000702c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d2  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd4  00000000  00000000  00017a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b41  00000000  00000000  0001b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f02  00000000  00000000  0001bfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ce7  00000000  00000000  00042eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0151  00000000  00000000  00054bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144d23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  00144d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014887c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a6c 	.word	0x08005a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005a6c 	.word	0x08005a6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000003c 	.word	0x2000003c
 80004f0:	20000090 	.word	0x20000090

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Int2Task1EventFlag */
  osSemaphoreDef(Int2Task1EventFlag);
 80004fa:	2300      	movs	r3, #0
 80004fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80004fe:	2300      	movs	r3, #0
 8000500:	647b      	str	r3, [r7, #68]	@ 0x44
  Int2Task1EventFlagHandle = osSemaphoreCreate(osSemaphore(Int2Task1EventFlag), 1);
 8000502:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f002 ff3d 	bl	8003388 <osSemaphoreCreate>
 800050e:	4603      	mov	r3, r0
 8000510:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <MX_FREERTOS_Init+0x8c>)
 8000512:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int2Task2EventFlag */
  osSemaphoreDef(Int2Task2EventFlag);
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  Int2Task2EventFlagHandle = osSemaphoreCreate(osSemaphore(Int2Task2EventFlag), 1);
 800051c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f002 ff30 	bl	8003388 <osSemaphoreCreate>
 8000528:	4603      	mov	r3, r0
 800052a:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <MX_FREERTOS_Init+0x90>)
 800052c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, StartTask1, osPriorityNormal, 0, 128);
 800052e:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <MX_FREERTOS_Init+0x94>)
 8000530:	f107 041c 	add.w	r4, r7, #28
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f002 febd 	bl	80032c8 <osThreadCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <MX_FREERTOS_Init+0x98>)
 8000552:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, StartTask2, osPriorityNormal, 0, 128);
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_FREERTOS_Init+0x9c>)
 8000556:	463c      	mov	r4, r7
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 8000566:	463b      	mov	r3, r7
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 feac 	bl	80032c8 <osThreadCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <MX_FREERTOS_Init+0xa0>)
 8000574:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000576:	bf00      	nop
 8000578:	3748      	adds	r7, #72	@ 0x48
 800057a:	46bd      	mov	sp, r7
 800057c:	bdb0      	pop	{r4, r5, r7, pc}
 800057e:	bf00      	nop
 8000580:	20000034 	.word	0x20000034
 8000584:	20000038 	.word	0x20000038
 8000588:	08005a8c 	.word	0x08005a8c
 800058c:	2000002c 	.word	0x2000002c
 8000590:	08005ab0 	.word	0x08005ab0
 8000594:	20000030 	.word	0x20000030

08000598 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(Int2Task1EventFlagHandle, osWaitForever);
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <StartTask1+0x60>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 ff1f 	bl	80033ec <osSemaphoreWait>
	for (int i = 0; i < 10; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e015      	b.n	80005e0 <StartTask1+0x48>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80005b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f000 fde0 	bl	8001180 <HAL_GPIO_TogglePin>
		osDelay(250);
 80005c0:	20fa      	movs	r0, #250	@ 0xfa
 80005c2:	f002 fecd 	bl	8003360 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80005c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f000 fdd7 	bl	8001180 <HAL_GPIO_TogglePin>
		osDelay(500);
 80005d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d6:	f002 fec3 	bl	8003360 <osDelay>
	for (int i = 0; i < 10; i++)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b09      	cmp	r3, #9
 80005e4:	dde6      	ble.n	80005b4 <StartTask1+0x1c>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f000 fdae 	bl	8001150 <HAL_GPIO_WritePin>
	osSemaphoreWait(Int2Task1EventFlagHandle, osWaitForever);
 80005f4:	e7d4      	b.n	80005a0 <StartTask1+0x8>
 80005f6:	bf00      	nop
 80005f8:	20000034 	.word	0x20000034

080005fc <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(Int2Task2EventFlagHandle, osWaitForever);
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <StartTask2+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	4618      	mov	r0, r3
 800060e:	f002 feed 	bl	80033ec <osSemaphoreWait>
	for (int i = 0; i < 10; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e017      	b.n	8000648 <StartTask2+0x4c>
	{
		osDelay(250);
 8000618:	20fa      	movs	r0, #250	@ 0xfa
 800061a:	f002 fea1 	bl	8003360 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800061e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f000 fdab 	bl	8001180 <HAL_GPIO_TogglePin>
		osDelay(250);
 800062a:	20fa      	movs	r0, #250	@ 0xfa
 800062c:	f002 fe98 	bl	8003360 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f000 fda2 	bl	8001180 <HAL_GPIO_TogglePin>
		osDelay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f002 fe8f 	bl	8003360 <osDelay>
	for (int i = 0; i < 10; i++)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3301      	adds	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b09      	cmp	r3, #9
 800064c:	dde4      	ble.n	8000618 <StartTask2+0x1c>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f000 fd7a 	bl	8001150 <HAL_GPIO_WritePin>
	osSemaphoreWait(Int2Task2EventFlagHandle, osWaitForever);
 800065c:	e7d2      	b.n	8000604 <StartTask2+0x8>
 800065e:	bf00      	nop
 8000660:	20000038 	.word	0x20000038

08000664 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b3a      	ldr	r3, [pc, #232]	@ (8000764 <MX_GPIO_Init+0x100>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a39      	ldr	r2, [pc, #228]	@ (8000764 <MX_GPIO_Init+0x100>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <MX_GPIO_Init+0x100>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	4b34      	ldr	r3, [pc, #208]	@ (8000764 <MX_GPIO_Init+0x100>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a33      	ldr	r2, [pc, #204]	@ (8000764 <MX_GPIO_Init+0x100>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b31      	ldr	r3, [pc, #196]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <MX_GPIO_Init+0x100>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fd34 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <MX_GPIO_Init+0x104>)
 80006ee:	f000 fd2f 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4818      	ldr	r0, [pc, #96]	@ (800076c <MX_GPIO_Init+0x108>)
 800070a:	f000 fb77 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 800070e:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f000 fb67 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800072e:	2320      	movs	r3, #32
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x104>)
 8000746:	f000 fb59 	bl	8000dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2105      	movs	r1, #5
 800074e:	2028      	movs	r0, #40	@ 0x28
 8000750:	f000 fb1d 	bl	8000d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000754:	2028      	movs	r0, #40	@ 0x28
 8000756:	f000 fb36 	bl	8000dc6 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800

08000770 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
static int pressCount = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B1_Pin)
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000780:	d11b      	bne.n	80007ba <HAL_GPIO_EXTI_Callback+0x4a>
    {
        pressCount++;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800078a:	6013      	str	r3, [r2, #0]
        switch(pressCount)
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d002      	beq.n	800079a <HAL_GPIO_EXTI_Callback+0x2a>
 8000794:	2b02      	cmp	r3, #2
 8000796:	d006      	beq.n	80007a6 <HAL_GPIO_EXTI_Callback+0x36>
 8000798:	e00b      	b.n	80007b2 <HAL_GPIO_EXTI_Callback+0x42>
        {
          case 1:
        	osSemaphoreRelease(Int2Task1EventFlagHandle);
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fe72 	bl	8003488 <osSemaphoreRelease>
            break;
 80007a4:	e009      	b.n	80007ba <HAL_GPIO_EXTI_Callback+0x4a>
          case 2:
        	osSemaphoreRelease(Int2Task2EventFlagHandle);
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fe6c 	bl	8003488 <osSemaphoreRelease>
            break;
 80007b0:	e003      	b.n	80007ba <HAL_GPIO_EXTI_Callback+0x4a>
          default:
            pressCount = 0;  // or handle more presses if desired
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
            break;
 80007b8:	bf00      	nop
        }
    }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000290 	.word	0x20000290
 80007c8:	20000034 	.word	0x20000034
 80007cc:	20000038 	.word	0x20000038

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 f984 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f80a 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f7ff ff42 	bl	8000664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e0:	f000 f8c8 	bl	8000974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007e4:	f7ff fe86 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007e8:	f002 fd67 	bl	80032ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <main+0x1c>

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	@ 0x58
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2244      	movs	r2, #68	@ 0x44
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 f8fa 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000812:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000816:	f000 fcf3 	bl	8001200 <HAL_PWREx_ControlVoltageScaling>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000820:	f000 f837 	bl	8000892 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	2302      	movs	r3, #2
 8000838:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800083e:	230a      	movs	r3, #10
 8000840:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000842:	2307      	movs	r3, #7
 8000844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd2a 	bl	80012ac <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800085e:	f000 f818 	bl	8000892 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f8f2 	bl	8001a64 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000886:	f000 f804 	bl	8000892 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3758      	adds	r7, #88	@ 0x58
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000896:	b672      	cpsid	i
}
 8000898:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089a:	bf00      	nop
 800089c:	e7fd      	b.n	800089a <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_MspInit+0x4c>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_MspInit+0x4c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_MspInit+0x4c>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_MspInit+0x4c>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 fa56 	bl	8000d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f935 	bl	8000b98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800092e:	f004 f9fb 	bl	8004d28 <xTaskGetSchedulerState>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d001      	beq.n	800093c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000938:	f004 fdde 	bl	80054f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000944:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000948:	f000 fc34 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART2_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b8:	f001 ff34 	bl	8002824 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f7ff ff66 	bl	8000892 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000294 	.word	0x20000294
 80009d0:	40004400 	.word	0x40004400

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0ac      	sub	sp, #176	@ 0xb0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2288      	movs	r2, #136	@ 0x88
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 ffff 	bl	80059f8 <memset>
  if(uartHandle->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <HAL_UART_MspInit+0xb0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d13b      	bne.n	8000a7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fa4b 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff39 	bl	8000892 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a24:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2c:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 f9c0 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	37b0      	adds	r7, #176	@ 0xb0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a90:	f7ff ff5e 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	@ (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f004 ffa5 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000abe:	f7ff fe87 	bl	80007d0 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad0:	08005b2c 	.word	0x08005b2c
  ldr r2, =_sbss
 8000ad4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ad8:	2000102c 	.word	0x2000102c

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_Init+0x3c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <HAL_Init+0x3c>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f93e 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afc:	200f      	movs	r0, #15
 8000afe:	f000 f80f 	bl	8000b20 <HAL_InitTick>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	e001      	b.n	8000b12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0e:	f7ff fec7 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_InitTick+0x70>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f949 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10f      	bne.n	8000b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d809      	bhi.n	8000b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 f913 	bl	8000d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_InitTick+0x74>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e007      	b.n	8000b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e004      	b.n	8000b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e001      	b.n	8000b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	2000031c 	.word	0x2000031c

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000031c 	.word	0x2000031c

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	@ (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	@ (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	@ 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff29 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff3e 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff31 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa2 	bl	8000d34 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e17f      	b.n	800110c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8171 	beq.w	8001106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d118      	bne.n	8000edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	6939      	ldr	r1, [r7, #16]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80ac 	beq.w	8001106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b5f      	ldr	r3, [pc, #380]	@ (800112c <HAL_GPIO_Init+0x330>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800112c <HAL_GPIO_Init+0x330>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fba:	4b5c      	ldr	r3, [pc, #368]	@ (800112c <HAL_GPIO_Init+0x330>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x242>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x23e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8001138 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x23a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x236>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x232>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	@ (8001144 <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x22e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4a      	ldr	r2, [pc, #296]	@ (8001148 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x22a>
 8001022:	2306      	movs	r3, #6
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x244>
 8001026:	2307      	movs	r3, #7
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x244>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x244>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x244>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x244>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x244>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x244>
 800103e:	2300      	movs	r3, #0
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001050:	4937      	ldr	r1, [pc, #220]	@ (8001130 <HAL_GPIO_Init+0x334>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_GPIO_Init+0x350>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001082:	4a32      	ldr	r2, [pc, #200]	@ (800114c <HAL_GPIO_Init+0x350>)
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <HAL_GPIO_Init+0x350>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HAL_GPIO_Init+0x350>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <HAL_GPIO_Init+0x350>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_GPIO_Init+0x350>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_GPIO_Init+0x350>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <HAL_GPIO_Init+0x350>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f ae78 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00
 8001140:	48001000 	.word	0x48001000
 8001144:	48001400 	.word	0x48001400
 8001148:	48001800 	.word	0x48001800
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e002      	b.n	8001174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43d9      	mvns	r1, r3
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	400b      	ands	r3, r1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff facc 	bl	8000770 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800120e:	d130      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001210:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121c:	d038      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2232      	movs	r2, #50	@ 0x32
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001244:	e002      	b.n	800124c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3b01      	subs	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001258:	d102      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f2      	bne.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126c:	d110      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e00f      	b.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127e:	d007      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001288:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40007000 	.word	0x40007000
 80012a4:	20000000 	.word	0x20000000
 80012a8:	431bde83 	.word	0x431bde83

080012ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e3ca      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4b97      	ldr	r3, [pc, #604]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c8:	4b94      	ldr	r3, [pc, #592]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80e4 	beq.w	80014a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4a>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	f040 808b 	bne.w	8001404 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 8087 	bne.w	8001404 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f6:	4b89      	ldr	r3, [pc, #548]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x62>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e3a2      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1a      	ldr	r2, [r3, #32]
 8001312:	4b82      	ldr	r3, [pc, #520]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <HAL_RCC_OscConfig+0x7c>
 800131e:	4b7f      	ldr	r3, [pc, #508]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001326:	e005      	b.n	8001334 <HAL_RCC_OscConfig+0x88>
 8001328:	4b7c      	ldr	r3, [pc, #496]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001334:	4293      	cmp	r3, r2
 8001336:	d223      	bcs.n	8001380 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fd55 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e383      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134c:	4b73      	ldr	r3, [pc, #460]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a72      	ldr	r2, [pc, #456]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b70      	ldr	r3, [pc, #448]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	496d      	ldr	r1, [pc, #436]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136a:	4b6c      	ldr	r3, [pc, #432]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4968      	ldr	r1, [pc, #416]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
 800137e:	e025      	b.n	80013cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001380:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4960      	ldr	r1, [pc, #384]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139e:	4b5f      	ldr	r3, [pc, #380]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	495b      	ldr	r1, [pc, #364]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fd15 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e343      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013cc:	f000 fc4a 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b52      	ldr	r3, [pc, #328]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	4950      	ldr	r1, [pc, #320]	@ (8001520 <HAL_RCC_OscConfig+0x274>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001524 <HAL_RCC_OscConfig+0x278>)
 80013ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001528 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fb95 	bl	8000b20 <HAL_InitTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d052      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	e327      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d032      	beq.n	8001472 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800140c:	4b43      	ldr	r3, [pc, #268]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a42      	ldr	r2, [pc, #264]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001418:	f7ff fbd2 	bl	8000bc0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001420:	f7ff fbce 	bl	8000bc0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e310      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001432:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a36      	ldr	r2, [pc, #216]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	492c      	ldr	r1, [pc, #176]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
 8001470:	e01a      	b.n	80014a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001472:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a29      	ldr	r2, [pc, #164]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb9f 	bl	8000bc0 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001486:	f7ff fb9b 	bl	8000bc0 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e2dd      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x1da>
 80014a4:	e000      	b.n	80014a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d074      	beq.n	800159e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x21a>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d10e      	bne.n	80014de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d10b      	bne.n	80014de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d064      	beq.n	800159c <HAL_RCC_OscConfig+0x2f0>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d160      	bne.n	800159c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e2ba      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x24a>
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 80014ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e026      	b.n	8001544 <HAL_RCC_OscConfig+0x298>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014fe:	d115      	bne.n	800152c <HAL_RCC_OscConfig+0x280>
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001506:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a02      	ldr	r2, [pc, #8]	@ (800151c <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x298>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	08005ad4 	.word	0x08005ad4
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004
 800152c:	4ba0      	ldr	r3, [pc, #640]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a9f      	ldr	r2, [pc, #636]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b9d      	ldr	r3, [pc, #628]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9c      	ldr	r2, [pc, #624]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fb38 	bl	8000bc0 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fb34 	bl	8000bc0 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	@ 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e276      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	4b92      	ldr	r3, [pc, #584]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2a8>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb24 	bl	8000bc0 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fb20 	bl	8000bc0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e262      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	4b88      	ldr	r3, [pc, #544]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x2d0>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d060      	beq.n	800166c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x310>
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d119      	bne.n	80015ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d116      	bne.n	80015ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015bc:	4b7c      	ldr	r3, [pc, #496]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x328>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e23f      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	4973      	ldr	r1, [pc, #460]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	e040      	b.n	800166c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d023      	beq.n	800163a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f2:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6e      	ldr	r2, [pc, #440]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fadf 	bl	8000bc0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fadb 	bl	8000bc0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e21d      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	4b65      	ldr	r3, [pc, #404]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b62      	ldr	r3, [pc, #392]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	495f      	ldr	r1, [pc, #380]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e018      	b.n	800166c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b5d      	ldr	r3, [pc, #372]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a5c      	ldr	r2, [pc, #368]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fabb 	bl	8000bc0 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fab7 	bl	8000bc0 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1f9      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d03c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01c      	beq.n	80016ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001680:	4b4b      	ldr	r3, [pc, #300]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001686:	4a4a      	ldr	r2, [pc, #296]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fa96 	bl	8000bc0 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fa92 	bl	8000bc0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1d4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ef      	beq.n	8001698 <HAL_RCC_OscConfig+0x3ec>
 80016b8:	e01b      	b.n	80016f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	4a3b      	ldr	r2, [pc, #236]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fa79 	bl	8000bc0 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa75 	bl	8000bc0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1b7      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ef      	bne.n	80016d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a6 	beq.w	800184c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001704:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10d      	bne.n	800172c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a26      	ldr	r2, [pc, #152]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
 800171c:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001728:	2301      	movs	r3, #1
 800172a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <HAL_RCC_OscConfig+0x508>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d118      	bne.n	800176a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <HAL_RCC_OscConfig+0x508>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001744:	f7ff fa3c 	bl	8000bc0 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7ff fa38 	bl	8000bc0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e17a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_RCC_OscConfig+0x508>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x4d8>
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001782:	e029      	b.n	80017d8 <HAL_RCC_OscConfig+0x52c>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d115      	bne.n	80017b8 <HAL_RCC_OscConfig+0x50c>
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ac:	e014      	b.n	80017d8 <HAL_RCC_OscConfig+0x52c>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	4a9b      	ldr	r2, [pc, #620]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c8:	4b98      	ldr	r3, [pc, #608]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	4a97      	ldr	r2, [pc, #604]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d016      	beq.n	800180e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff f9ee 	bl	8000bc0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff f9ea 	bl	8000bc0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e12a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ed      	beq.n	80017e8 <HAL_RCC_OscConfig+0x53c>
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff f9d7 	bl	8000bc0 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff f9d3 	bl	8000bc0 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e113      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ed      	bne.n	8001816 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183a:	7ffb      	ldrb	r3, [r7, #31]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b7a      	ldr	r3, [pc, #488]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	4a79      	ldr	r2, [pc, #484]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80fe 	beq.w	8001a52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	2b02      	cmp	r3, #2
 800185c:	f040 80d0 	bne.w	8001a00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001860:	4b72      	ldr	r3, [pc, #456]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	429a      	cmp	r2, r3
 8001872:	d130      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	3b01      	subs	r3, #1
 8001880:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d127      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001890:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d11f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018a0:	2a07      	cmp	r2, #7
 80018a2:	bf14      	ite	ne
 80018a4:	2201      	movne	r2, #1
 80018a6:	2200      	moveq	r2, #0
 80018a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d113      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	3b01      	subs	r3, #1
 80018d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d06e      	beq.n	80019b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d069      	beq.n	80019b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e8:	4b50      	ldr	r3, [pc, #320]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0ad      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001904:	f7ff f95c 	bl	8000bc0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f958 	bl	8000bc0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e09a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	4b43      	ldr	r3, [pc, #268]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192a:	4b40      	ldr	r3, [pc, #256]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4b40      	ldr	r3, [pc, #256]	@ (8001a30 <HAL_RCC_OscConfig+0x784>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800193a:	3a01      	subs	r2, #1
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001944:	0212      	lsls	r2, r2, #8
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800194c:	0852      	lsrs	r2, r2, #1
 800194e:	3a01      	subs	r2, #1
 8001950:	0552      	lsls	r2, r2, #21
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0652      	lsls	r2, r2, #25
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001964:	0912      	lsrs	r2, r2, #4
 8001966:	0452      	lsls	r2, r2, #17
 8001968:	430a      	orrs	r2, r1
 800196a:	4930      	ldr	r1, [pc, #192]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001970:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2d      	ldr	r2, [pc, #180]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800197c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a2a      	ldr	r2, [pc, #168]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001988:	f7ff f91a 	bl	8000bc0 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f916 	bl	8000bc0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e058      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ae:	e050      	b.n	8001a52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04f      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d148      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a16      	ldr	r2, [pc, #88]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d8:	f7ff f8f2 	bl	8000bc0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f8ee 	bl	8000bc0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e030      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x734>
 80019fe:	e028      	b.n	8001a52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d023      	beq.n	8001a4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_RCC_OscConfig+0x780>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f8d5 	bl	8000bc0 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	e00c      	b.n	8001a34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff f8d1 	bl	8000bc0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d905      	bls.n	8001a34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e013      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x7b0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ec      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4905      	ldr	r1, [pc, #20]	@ (8001a5c <HAL_RCC_OscConfig+0x7b0>)
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_RCC_OscConfig+0x7b4>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
 8001a4c:	e001      	b.n	8001a52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	feeefffc 	.word	0xfeeefffc

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0e7      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b75      	ldr	r3, [pc, #468]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b72      	ldr	r3, [pc, #456]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4970      	ldr	r1, [pc, #448]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b6e      	ldr	r3, [pc, #440]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cf      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b66      	ldr	r3, [pc, #408]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d908      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b63      	ldr	r3, [pc, #396]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4960      	ldr	r1, [pc, #384]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d04c      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b5a      	ldr	r3, [pc, #360]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d121      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0a6      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e09a      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e08e      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e086      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b46      	ldr	r3, [pc, #280]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4943      	ldr	r1, [pc, #268]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f838 	bl	8000bc0 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff f834 	bl	8000bc0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e06e      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d010      	beq.n	8001baa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d208      	bcs.n	8001baa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	492b      	ldr	r1, [pc, #172]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001baa:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d210      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 0207 	bic.w	r2, r3, #7
 8001bc0:	4923      	ldr	r1, [pc, #140]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e036      	b.n	8001c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d008      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4918      	ldr	r1, [pc, #96]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4910      	ldr	r1, [pc, #64]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c18:	f000 f824 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	490b      	ldr	r1, [pc, #44]	@ (8001c58 <HAL_RCC_ClockConfig+0x1f4>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_RCC_ClockConfig+0x1fc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe ff6f 	bl	8000b20 <HAL_InitTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c46:	7afb      	ldrb	r3, [r7, #11]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08005ad4 	.word	0x08005ad4
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c72:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d121      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d11e      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c98:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d102      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	e004      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce8:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d134      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d003      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0xac>
 8001d08:	e005      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0c:	617b      	str	r3, [r7, #20]
      break;
 8001d0e:	e005      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d12:	617b      	str	r3, [r7, #20]
      break;
 8001d14:	e002      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	3301      	adds	r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	fb03 f202 	mul.w	r2, r3, r2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d42:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0e5b      	lsrs	r3, r3, #25
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08005aec 	.word	0x08005aec
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4904      	ldr	r1, [pc, #16]	@ (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08005ae4 	.word	0x08005ae4

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc4:	f7ff ffda 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4904      	ldr	r1, [pc, #16]	@ (8001de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08005ae4 	.word	0x08005ae4

08001dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e04:	f7ff f9ee 	bl	80011e4 <HAL_PWREx_GetVoltageRange>
 8001e08:	6178      	str	r0, [r7, #20]
 8001e0a:	e014      	b.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f9de 	bl	80011e4 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e3c:	d10b      	bne.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b80      	cmp	r3, #128	@ 0x80
 8001e42:	d919      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e48:	d902      	bls.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e013      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e50:	2301      	movs	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e010      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	d902      	bls.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e00a      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	@ 0x80
 8001e66:	d102      	bne.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e004      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b70      	cmp	r3, #112	@ 0x70
 8001e72:	d101      	bne.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	4909      	ldr	r1, [pc, #36]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d041      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ecc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed0:	d02a      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ed2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed6:	d824      	bhi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee2:	d81e      	bhi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eec:	d010      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eee:	e018      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef0:	4b86      	ldr	r3, [pc, #536]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a85      	ldr	r2, [pc, #532]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001efc:	e015      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fabb 	bl	8002480 <RCCEx_PLLSAI1_Config>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0e:	e00c      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3320      	adds	r3, #32
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fba6 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f20:	e003      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	74fb      	strb	r3, [r7, #19]
      break;
 8001f26:	e000      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f2a:	7cfb      	ldrb	r3, [r7, #19]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f30:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3e:	4973      	ldr	r1, [pc, #460]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f46:	e001      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d041      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f60:	d02a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f66:	d824      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f72:	d81e      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f80:	4b62      	ldr	r3, [pc, #392]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a61      	ldr	r2, [pc, #388]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f8c:	e015      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fa73 	bl	8002480 <RCCEx_PLLSAI1_Config>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9e:	e00c      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3320      	adds	r3, #32
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fb5e 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb0:	e003      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb6:	e000      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc0:	4b52      	ldr	r3, [pc, #328]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fce:	494f      	ldr	r1, [pc, #316]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fd6:	e001      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a0 	beq.w	800212a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	4a40      	ldr	r2, [pc, #256]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002010:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201c:	2301      	movs	r3, #1
 800201e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a3a      	ldr	r2, [pc, #232]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202c:	f7fe fdc8 	bl	8000bc0 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002032:	e009      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe fdc4 	bl	8000bc0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d902      	bls.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	74fb      	strb	r3, [r7, #19]
        break;
 8002046:	e005      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002048:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d15c      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205a:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d019      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002078:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002084:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a20      	ldr	r2, [pc, #128]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fd83 	bl	8000bc0 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	e00b      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe fd7f 	bl	8000bc0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d902      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	74fb      	strb	r3, [r7, #19]
            break;
 80020d4:	e006      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ec      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020fa:	4904      	ldr	r1, [pc, #16]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002102:	e009      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
 8002108:	e006      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002118:	7c7b      	ldrb	r3, [r7, #17]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b9e      	ldr	r3, [pc, #632]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	4a9d      	ldr	r2, [pc, #628]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002136:	4b98      	ldr	r3, [pc, #608]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f023 0203 	bic.w	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002144:	4994      	ldr	r1, [pc, #592]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002158:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f023 020c 	bic.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	498c      	ldr	r1, [pc, #560]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217a:	4b87      	ldr	r3, [pc, #540]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4983      	ldr	r1, [pc, #524]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	497b      	ldr	r1, [pc, #492]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021be:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	4972      	ldr	r1, [pc, #456]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	496a      	ldr	r1, [pc, #424]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	4961      	ldr	r1, [pc, #388]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002224:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4959      	ldr	r1, [pc, #356]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002246:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	4950      	ldr	r1, [pc, #320]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002268:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	4948      	ldr	r1, [pc, #288]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	493f      	ldr	r1, [pc, #252]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d028      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ba:	4937      	ldr	r1, [pc, #220]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ca:	d106      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
 80022d8:	e011      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e2:	d10c      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	2101      	movs	r1, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f8c8 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800230a:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	491f      	ldr	r1, [pc, #124]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002328:	d106      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232a:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002334:	60d3      	str	r3, [r2, #12]
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f899 	bl	8002480 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02b      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002386:	d109      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a02      	ldr	r2, [pc, #8]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e014      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f867 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02f      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023da:	4928      	ldr	r1, [pc, #160]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ea:	d10d      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f844 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	74bb      	strb	r3, [r7, #18]
 8002406:	e011      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800240c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3320      	adds	r3, #32
 8002416:	2102      	movs	r1, #2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f925 	bl	8002668 <RCCEx_PLLSAI2_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800246a:	4904      	ldr	r1, [pc, #16]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002472:	7cbb      	ldrb	r3, [r7, #18]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000

08002480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800248e:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d018      	beq.n	80024cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800249a:	4b72      	ldr	r3, [pc, #456]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0203 	and.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d10d      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
       ||
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
       ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d047      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e044      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d018      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x86>
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d825      	bhi.n	8002524 <RCCEx_PLLSAI1_Config+0xa4>
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d002      	beq.n	80024e2 <RCCEx_PLLSAI1_Config+0x62>
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d009      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x74>
 80024e0:	e020      	b.n	8002524 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e2:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11d      	bne.n	800252a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e01a      	b.n	800252a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d116      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e013      	b.n	800252e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002522:	e006      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e004      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002532:	bf00      	nop
    }

    if(status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	430b      	orrs	r3, r1
 8002550:	4944      	ldr	r1, [pc, #272]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d17d      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800255c:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a40      	ldr	r2, [pc, #256]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fb2a 	bl	8000bc0 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256e:	e009      	b.n	8002584 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002570:	f7fe fb26 	bl	8000bc0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d902      	bls.n	8002584 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	73fb      	strb	r3, [r7, #15]
        break;
 8002582:	e005      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ef      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d160      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6892      	ldr	r2, [r2, #8]
 80025ac:	0211      	lsls	r1, r2, #8
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	0912      	lsrs	r2, r2, #4
 80025b4:	0452      	lsls	r2, r2, #17
 80025b6:	430a      	orrs	r2, r1
 80025b8:	492a      	ldr	r1, [pc, #168]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
 80025be:	e027      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6892      	ldr	r2, [r2, #8]
 80025d6:	0211      	lsls	r1, r2, #8
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6912      	ldr	r2, [r2, #16]
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	3a01      	subs	r2, #1
 80025e0:	0552      	lsls	r2, r2, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	491f      	ldr	r1, [pc, #124]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	610b      	str	r3, [r1, #16]
 80025ea:	e011      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6952      	ldr	r2, [r2, #20]
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0652      	lsls	r2, r2, #25
 8002608:	430a      	orrs	r2, r1
 800260a:	4916      	ldr	r1, [pc, #88]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800261a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fad0 	bl	8000bc0 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002622:	e009      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002624:	f7fe facc 	bl	8000bc0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
          break;
 8002636:	e005      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ef      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4904      	ldr	r1, [pc, #16]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002682:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
       ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800269a:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
       ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d047      	beq.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e044      	b.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d018      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x86>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d825      	bhi.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0x62>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d009      	beq.n	80026dc <RCCEx_PLLSAI2_Config+0x74>
 80026c8:	e020      	b.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ca:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11d      	bne.n	8002712 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e01a      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026dc:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ec:	e013      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270a:	e006      	b.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e004      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800271a:	bf00      	nop
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002722:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	430b      	orrs	r3, r1
 8002738:	4939      	ldr	r1, [pc, #228]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d167      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fa36 	bl	8000bc0 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002758:	f7fe fa32 	bl	8000bc0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
        break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800276c:	4b2c      	ldr	r3, [pc, #176]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ef      	bne.n	8002758 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14a      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002784:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800278c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	0211      	lsls	r1, r2, #8
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	0912      	lsrs	r2, r2, #4
 800279c:	0452      	lsls	r2, r2, #17
 800279e:	430a      	orrs	r2, r1
 80027a0:	491f      	ldr	r1, [pc, #124]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	614b      	str	r3, [r1, #20]
 80027a6:	e011      	b.n	80027cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	0211      	lsls	r1, r2, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6912      	ldr	r2, [r2, #16]
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0652      	lsls	r2, r2, #25
 80027c4:	430a      	orrs	r2, r1
 80027c6:	4916      	ldr	r1, [pc, #88]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe f9f2 	bl	8000bc0 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027de:	e009      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e0:	f7fe f9ee 	bl	8000bc0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	73fb      	strb	r3, [r7, #15]
          break;
 80027f2:	e005      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4904      	ldr	r1, [pc, #16]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e040      	b.n	80028b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f8c4 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	@ 0x24
 8002850:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fae0 	bl	8002e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f825 	bl	80028c0 <UART_SetConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01b      	b.n	80028b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800288e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800289e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fb5f 	bl	8002f74 <UART_CheckIdleState>
 80028b6:	4603      	mov	r3, r0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c4:	b08a      	sub	sp, #40	@ 0x28
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4ba4      	ldr	r3, [pc, #656]	@ (8002b80 <UART_SetConfig+0x2c0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a99      	ldr	r2, [pc, #612]	@ (8002b84 <UART_SetConfig+0x2c4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002928:	4313      	orrs	r3, r2
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a90      	ldr	r2, [pc, #576]	@ (8002b88 <UART_SetConfig+0x2c8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d126      	bne.n	8002998 <UART_SetConfig+0xd8>
 800294a:	4b90      	ldr	r3, [pc, #576]	@ (8002b8c <UART_SetConfig+0x2cc>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d81b      	bhi.n	8002990 <UART_SetConfig+0xd0>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <UART_SetConfig+0xa0>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002981 	.word	0x08002981
 8002968:	08002979 	.word	0x08002979
 800296c:	08002989 	.word	0x08002989
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002976:	e116      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002978:	2302      	movs	r3, #2
 800297a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297e:	e112      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002980:	2304      	movs	r3, #4
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e10e      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002988:	2308      	movs	r3, #8
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298e:	e10a      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002990:	2310      	movs	r3, #16
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002996:	e106      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7c      	ldr	r2, [pc, #496]	@ (8002b90 <UART_SetConfig+0x2d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d138      	bne.n	8002a14 <UART_SetConfig+0x154>
 80029a2:	4b7a      	ldr	r3, [pc, #488]	@ (8002b8c <UART_SetConfig+0x2cc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d82d      	bhi.n	8002a0c <UART_SetConfig+0x14c>
 80029b0:	a201      	add	r2, pc, #4	@ (adr r2, 80029b8 <UART_SetConfig+0xf8>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029ed 	.word	0x080029ed
 80029bc:	08002a0d 	.word	0x08002a0d
 80029c0:	08002a0d 	.word	0x08002a0d
 80029c4:	08002a0d 	.word	0x08002a0d
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	08002a0d 	.word	0x08002a0d
 80029d0:	08002a0d 	.word	0x08002a0d
 80029d4:	08002a0d 	.word	0x08002a0d
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	08002a0d 	.word	0x08002a0d
 80029e0:	08002a0d 	.word	0x08002a0d
 80029e4:	08002a0d 	.word	0x08002a0d
 80029e8:	08002a05 	.word	0x08002a05
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f2:	e0d8      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 80029f4:	2302      	movs	r3, #2
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fa:	e0d4      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 80029fc:	2304      	movs	r3, #4
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a02:	e0d0      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a04:	2308      	movs	r3, #8
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0a:	e0cc      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a12:	e0c8      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5e      	ldr	r2, [pc, #376]	@ (8002b94 <UART_SetConfig+0x2d4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d125      	bne.n	8002a6a <UART_SetConfig+0x1aa>
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <UART_SetConfig+0x2cc>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a28:	2b30      	cmp	r3, #48	@ 0x30
 8002a2a:	d016      	beq.n	8002a5a <UART_SetConfig+0x19a>
 8002a2c:	2b30      	cmp	r3, #48	@ 0x30
 8002a2e:	d818      	bhi.n	8002a62 <UART_SetConfig+0x1a2>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d00a      	beq.n	8002a4a <UART_SetConfig+0x18a>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d814      	bhi.n	8002a62 <UART_SetConfig+0x1a2>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <UART_SetConfig+0x182>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d008      	beq.n	8002a52 <UART_SetConfig+0x192>
 8002a40:	e00f      	b.n	8002a62 <UART_SetConfig+0x1a2>
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a48:	e0ad      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a50:	e0a9      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a52:	2304      	movs	r3, #4
 8002a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a58:	e0a5      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a60:	e0a1      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a62:	2310      	movs	r3, #16
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a68:	e09d      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b98 <UART_SetConfig+0x2d8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d125      	bne.n	8002ac0 <UART_SetConfig+0x200>
 8002a74:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <UART_SetConfig+0x2cc>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a80:	d016      	beq.n	8002ab0 <UART_SetConfig+0x1f0>
 8002a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a84:	d818      	bhi.n	8002ab8 <UART_SetConfig+0x1f8>
 8002a86:	2b80      	cmp	r3, #128	@ 0x80
 8002a88:	d00a      	beq.n	8002aa0 <UART_SetConfig+0x1e0>
 8002a8a:	2b80      	cmp	r3, #128	@ 0x80
 8002a8c:	d814      	bhi.n	8002ab8 <UART_SetConfig+0x1f8>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <UART_SetConfig+0x1d8>
 8002a92:	2b40      	cmp	r3, #64	@ 0x40
 8002a94:	d008      	beq.n	8002aa8 <UART_SetConfig+0x1e8>
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x1f8>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e082      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e07e      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e07a      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e076      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002ab8:	2310      	movs	r3, #16
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e072      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a35      	ldr	r2, [pc, #212]	@ (8002b9c <UART_SetConfig+0x2dc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d12a      	bne.n	8002b20 <UART_SetConfig+0x260>
 8002aca:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <UART_SetConfig+0x2cc>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ad8:	d01a      	beq.n	8002b10 <UART_SetConfig+0x250>
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ade:	d81b      	bhi.n	8002b18 <UART_SetConfig+0x258>
 8002ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae4:	d00c      	beq.n	8002b00 <UART_SetConfig+0x240>
 8002ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aea:	d815      	bhi.n	8002b18 <UART_SetConfig+0x258>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <UART_SetConfig+0x238>
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af4:	d008      	beq.n	8002b08 <UART_SetConfig+0x248>
 8002af6:	e00f      	b.n	8002b18 <UART_SetConfig+0x258>
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afe:	e052      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b00:	2302      	movs	r3, #2
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b06:	e04e      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0e:	e04a      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b10:	2308      	movs	r3, #8
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e046      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e042      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <UART_SetConfig+0x2c4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d13a      	bne.n	8002ba0 <UART_SetConfig+0x2e0>
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <UART_SetConfig+0x2cc>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b38:	d01a      	beq.n	8002b70 <UART_SetConfig+0x2b0>
 8002b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b3e:	d81b      	bhi.n	8002b78 <UART_SetConfig+0x2b8>
 8002b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b44:	d00c      	beq.n	8002b60 <UART_SetConfig+0x2a0>
 8002b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b4a:	d815      	bhi.n	8002b78 <UART_SetConfig+0x2b8>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <UART_SetConfig+0x298>
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b54:	d008      	beq.n	8002b68 <UART_SetConfig+0x2a8>
 8002b56:	e00f      	b.n	8002b78 <UART_SetConfig+0x2b8>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5e:	e022      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b60:	2302      	movs	r3, #2
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b66:	e01e      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6e:	e01a      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b70:	2308      	movs	r3, #8
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b76:	e016      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b7e:	e012      	b.n	8002ba6 <UART_SetConfig+0x2e6>
 8002b80:	efff69f3 	.word	0xefff69f3
 8002b84:	40008000 	.word	0x40008000
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40004400 	.word	0x40004400
 8002b94:	40004800 	.word	0x40004800
 8002b98:	40004c00 	.word	0x40004c00
 8002b9c:	40005000 	.word	0x40005000
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a9f      	ldr	r2, [pc, #636]	@ (8002e28 <UART_SetConfig+0x568>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d17a      	bne.n	8002ca6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d824      	bhi.n	8002c02 <UART_SetConfig+0x342>
 8002bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <UART_SetConfig+0x300>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002be5 	.word	0x08002be5
 8002bc4:	08002c03 	.word	0x08002c03
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002c03 	.word	0x08002c03
 8002bd0:	08002bf3 	.word	0x08002bf3
 8002bd4:	08002c03 	.word	0x08002c03
 8002bd8:	08002c03 	.word	0x08002c03
 8002bdc:	08002c03 	.word	0x08002c03
 8002be0:	08002bfb 	.word	0x08002bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be4:	f7ff f8d6 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002be8:	61f8      	str	r0, [r7, #28]
        break;
 8002bea:	e010      	b.n	8002c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bec:	4b8f      	ldr	r3, [pc, #572]	@ (8002e2c <UART_SetConfig+0x56c>)
 8002bee:	61fb      	str	r3, [r7, #28]
        break;
 8002bf0:	e00d      	b.n	8002c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff f837 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002bf6:	61f8      	str	r0, [r7, #28]
        break;
 8002bf8:	e009      	b.n	8002c0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bfe:	61fb      	str	r3, [r7, #28]
        break;
 8002c00:	e005      	b.n	8002c0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80fb 	beq.w	8002e0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d305      	bcc.n	8002c32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d903      	bls.n	8002c3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c38:	e0e8      	b.n	8002e0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	461c      	mov	r4, r3
 8002c40:	4615      	mov	r5, r2
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	022b      	lsls	r3, r5, #8
 8002c4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c50:	0222      	lsls	r2, r4, #8
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	6849      	ldr	r1, [r1, #4]
 8002c56:	0849      	lsrs	r1, r1, #1
 8002c58:	2000      	movs	r0, #0
 8002c5a:	4688      	mov	r8, r1
 8002c5c:	4681      	mov	r9, r0
 8002c5e:	eb12 0a08 	adds.w	sl, r2, r8
 8002c62:	eb43 0b09 	adc.w	fp, r3, r9
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c74:	4650      	mov	r0, sl
 8002c76:	4659      	mov	r1, fp
 8002c78:	f7fd faaa 	bl	80001d0 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c8a:	d308      	bcc.n	8002c9e <UART_SetConfig+0x3de>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c92:	d204      	bcs.n	8002c9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e0b6      	b.n	8002e0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ca4:	e0b2      	b.n	8002e0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cae:	d15e      	bne.n	8002d6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d828      	bhi.n	8002d0a <UART_SetConfig+0x44a>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <UART_SetConfig+0x400>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002ce5 	.word	0x08002ce5
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002cf5 	.word	0x08002cf5
 8002ccc:	08002d0b 	.word	0x08002d0b
 8002cd0:	08002cfb 	.word	0x08002cfb
 8002cd4:	08002d0b 	.word	0x08002d0b
 8002cd8:	08002d0b 	.word	0x08002d0b
 8002cdc:	08002d0b 	.word	0x08002d0b
 8002ce0:	08002d03 	.word	0x08002d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f7ff f856 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	61f8      	str	r0, [r7, #28]
        break;
 8002cea:	e014      	b.n	8002d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7ff f868 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	61f8      	str	r0, [r7, #28]
        break;
 8002cf2:	e010      	b.n	8002d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e2c <UART_SetConfig+0x56c>)
 8002cf6:	61fb      	str	r3, [r7, #28]
        break;
 8002cf8:	e00d      	b.n	8002d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfa:	f7fe ffb3 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002cfe:	61f8      	str	r0, [r7, #28]
        break;
 8002d00:	e009      	b.n	8002d16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d06:	61fb      	str	r3, [r7, #28]
        break;
 8002d08:	e005      	b.n	8002d16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d077      	beq.n	8002e0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005a      	lsls	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	441a      	add	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b0f      	cmp	r3, #15
 8002d36:	d916      	bls.n	8002d66 <UART_SetConfig+0x4a6>
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3e:	d212      	bcs.n	8002d66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f023 030f 	bic.w	r3, r3, #15
 8002d48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	8afb      	ldrh	r3, [r7, #22]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	8afa      	ldrh	r2, [r7, #22]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e052      	b.n	8002e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d6c:	e04e      	b.n	8002e0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d827      	bhi.n	8002dc6 <UART_SetConfig+0x506>
 8002d76:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <UART_SetConfig+0x4bc>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002da1 	.word	0x08002da1
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08002dc7 	.word	0x08002dc7
 8002d8c:	08002db7 	.word	0x08002db7
 8002d90:	08002dc7 	.word	0x08002dc7
 8002d94:	08002dc7 	.word	0x08002dc7
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	08002dbf 	.word	0x08002dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da0:	f7fe fff8 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002da4:	61f8      	str	r0, [r7, #28]
        break;
 8002da6:	e014      	b.n	8002dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7ff f80a 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002dac:	61f8      	str	r0, [r7, #28]
        break;
 8002dae:	e010      	b.n	8002dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <UART_SetConfig+0x56c>)
 8002db2:	61fb      	str	r3, [r7, #28]
        break;
 8002db4:	e00d      	b.n	8002dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db6:	f7fe ff55 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002dba:	61f8      	str	r0, [r7, #28]
        break;
 8002dbc:	e009      	b.n	8002dd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dc2:	61fb      	str	r3, [r7, #28]
        break;
 8002dc4:	e005      	b.n	8002dd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dd0:	bf00      	nop
    }

    if (pclk != 0U)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d019      	beq.n	8002e0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	085a      	lsrs	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	441a      	add	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	d909      	bls.n	8002e06 <UART_SetConfig+0x546>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d205      	bcs.n	8002e06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e002      	b.n	8002e0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	@ 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40008000 	.word	0x40008000
 8002e2c:	00f42400 	.word	0x00f42400

08002e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01a      	beq.n	8002f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f2e:	d10a      	bne.n	8002f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
  }
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b098      	sub	sp, #96	@ 0x60
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f84:	f7fd fe1c 	bl	8000bc0 <HAL_GetTick>
 8002f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d12e      	bne.n	8002ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f88c 	bl	80030c4 <UART_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d021      	beq.n	8002ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e062      	b.n	80030bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d149      	bne.n	8003098 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f856 	bl	80030c4 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03c      	beq.n	8003098 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	623b      	str	r3, [r7, #32]
   return(result);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800303c:	633b      	str	r3, [r7, #48]	@ 0x30
 800303e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e6      	bne.n	800301e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3308      	adds	r3, #8
 800306e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003070:	61fa      	str	r2, [r7, #28]
 8003072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	69b9      	ldr	r1, [r7, #24]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	617b      	str	r3, [r7, #20]
   return(result);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e011      	b.n	80030bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3758      	adds	r7, #88	@ 0x58
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d4:	e04f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d04b      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fd fd6f 	bl	8000bc0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e04e      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d037      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d034      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b40      	cmp	r3, #64	@ 0x40
 8003110:	d031      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d110      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f838 	bl	800319e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2208      	movs	r2, #8
 8003132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e029      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003150:	d111      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800315a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f81e 	bl	800319e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e00f      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d0a0      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800319e:	b480      	push	{r7}
 80031a0:	b095      	sub	sp, #84	@ 0x54
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	2b01      	cmp	r3, #1
 8003212:	d118      	bne.n	8003246 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	60bb      	str	r3, [r7, #8]
   return(result);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 0310 	bic.w	r3, r3, #16
 8003228:	647b      	str	r3, [r7, #68]	@ 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	613b      	str	r3, [r7, #16]
   return(result);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e6      	bne.n	8003214 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800325a:	bf00      	nop
 800325c:	3754      	adds	r7, #84	@ 0x54
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003278:	2b84      	cmp	r3, #132	@ 0x84
 800327a:	d005      	beq.n	8003288 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800327c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	3303      	adds	r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800329c:	f3ef 8305 	mrs	r3, IPSR
 80032a0:	607b      	str	r3, [r7, #4]
  return(result);
 80032a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032be:	f001 f929 	bl	8004514 <vTaskStartScheduler>
  
  return osOK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d020      	beq.n	800331c <osThreadCreate+0x54>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01c      	beq.n	800331c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685c      	ldr	r4, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691e      	ldr	r6, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ffb6 	bl	8003266 <makeFreeRtosPriority>
 80032fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003304:	9202      	str	r2, [sp, #8]
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	9100      	str	r1, [sp, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	4632      	mov	r2, r6
 800330e:	4629      	mov	r1, r5
 8003310:	4620      	mov	r0, r4
 8003312:	f000 ff31 	bl	8004178 <xTaskCreateStatic>
 8003316:	4603      	mov	r3, r0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e01c      	b.n	8003356 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685c      	ldr	r4, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003328:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff98 	bl	8003266 <makeFreeRtosPriority>
 8003336:	4602      	mov	r2, r0
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4632      	mov	r2, r6
 8003344:	4629      	mov	r1, r5
 8003346:	4620      	mov	r0, r4
 8003348:	f000 ff76 	bl	8004238 <xTaskCreate>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003360 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <osDelay+0x16>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	e000      	b.n	8003378 <osDelay+0x18>
 8003376:	2301      	movs	r3, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f895 	bl	80044a8 <vTaskDelay>
  
  return osOK;
 800337e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00f      	beq.n	80033ba <osSemaphoreCreate+0x32>
    if (count == 1) {
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10a      	bne.n	80033b6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2203      	movs	r2, #3
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 f9bf 	bl	8003730 <xQueueGenericCreateStatic>
 80033b2:	4603      	mov	r3, r0
 80033b4:	e016      	b.n	80033e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e014      	b.n	80033e4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d110      	bne.n	80033e2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80033c0:	2203      	movs	r2, #3
 80033c2:	2100      	movs	r1, #0
 80033c4:	2001      	movs	r0, #1
 80033c6:	f000 fa30 	bl	800382a <xQueueGenericCreate>
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <osSemaphoreCreate+0x56>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2200      	movs	r2, #0
 80033d6:	2100      	movs	r1, #0
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fa81 	bl	80038e0 <xQueueGenericSend>
      return sema;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	e000      	b.n	80033e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80033e2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	e03a      	b.n	800347a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d103      	bne.n	8003418 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e009      	b.n	800342c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <osSemaphoreWait+0x40>
      ticks = 1;
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800342c:	f7ff ff33 	bl	8003296 <inHandlerMode>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d017      	beq.n	8003466 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	461a      	mov	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fcf0 	bl	8003e24 <xQueueReceiveFromISR>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <osSemaphoreWait+0x62>
      return osErrorOS;
 800344a:	23ff      	movs	r3, #255	@ 0xff
 800344c:	e015      	b.n	800347a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d011      	beq.n	8003478 <osSemaphoreWait+0x8c>
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <osSemaphoreWait+0x98>)
 8003456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	e008      	b.n	8003478 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fbcb 	bl	8003c04 <xQueueSemaphoreTake>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003474:	23ff      	movs	r3, #255	@ 0xff
 8003476:	e000      	b.n	800347a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003498:	f7ff fefd 	bl	8003296 <inHandlerMode>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fb1b 	bl	8003ae4 <xQueueGiveFromISR>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80034b4:	23ff      	movs	r3, #255	@ 0xff
 80034b6:	e017      	b.n	80034e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <osSemaphoreRelease+0x5e>
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <osSemaphoreRelease+0x68>)
 80034c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	e00a      	b.n	80034e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa02 	bl	80038e0 <xQueueGenericSend>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80034e2:	23ff      	movs	r3, #255	@ 0xff
 80034e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f103 0208 	add.w	r2, r3, #8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0208 	add.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d103      	bne.n	80035b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e00c      	b.n	80035d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3308      	adds	r3, #8
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e002      	b.n	80035c4 <vListInsert+0x2e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d2f6      	bcs.n	80035be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6852      	ldr	r2, [r2, #4]
 8003628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d103      	bne.n	800363c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003688:	f001 fea6 	bl	80053d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	3b01      	subs	r3, #1
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	441a      	add	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	22ff      	movs	r2, #255	@ 0xff
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	22ff      	movs	r2, #255	@ 0xff
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d114      	bne.n	8003708 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01a      	beq.n	800371c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3310      	adds	r3, #16
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f95c 	bl	80049a8 <xTaskRemoveFromEventList>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <xQueueGenericReset+0xd0>)
 80036f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	e009      	b.n	800371c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3310      	adds	r3, #16
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fef1 	bl	80034f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3324      	adds	r3, #36	@ 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff feec 	bl	80034f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800371c:	f001 fe8e 	bl	800543c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003720:	2301      	movs	r3, #1
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	@ 0x38
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	e7fd      	b.n	8003758 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <xQueueGenericCreateStatic+0x56>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <xQueueGenericCreateStatic+0x5a>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueGenericCreateStatic+0x5c>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	623b      	str	r3, [r7, #32]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <xQueueGenericCreateStatic+0x84>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <xQueueGenericCreateStatic+0x88>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <xQueueGenericCreateStatic+0x8a>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	61fb      	str	r3, [r7, #28]
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037d6:	2348      	movs	r3, #72	@ 0x48
 80037d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b48      	cmp	r3, #72	@ 0x48
 80037de:	d00b      	beq.n	80037f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61bb      	str	r3, [r7, #24]
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800380c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f840 	bl	80038a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003822:	4618      	mov	r0, r3
 8003824:	3730      	adds	r7, #48	@ 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08a      	sub	sp, #40	@ 0x28
 800382e:	af02      	add	r7, sp, #8
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	4613      	mov	r3, r2
 8003836:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <xQueueGenericCreate+0x2c>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	613b      	str	r3, [r7, #16]
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	e7fd      	b.n	8003852 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3348      	adds	r3, #72	@ 0x48
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fed9 	bl	800561c <pvPortMalloc>
 800386a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d011      	beq.n	8003896 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3348      	adds	r3, #72	@ 0x48
 800387a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f805 	bl	80038a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003896:	69bb      	ldr	r3, [r7, #24]
	}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038ce:	2101      	movs	r1, #1
 80038d0:	69b8      	ldr	r0, [r7, #24]
 80038d2:	f7ff fec3 	bl	800365c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericSend+0x34>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <xQueueGenericSend+0x42>
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <xQueueGenericSend+0x46>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericSend+0x48>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <xQueueGenericSend+0x64>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d103      	bne.n	8003952 <xQueueGenericSend+0x72>
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <xQueueGenericSend+0x76>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <xQueueGenericSend+0x78>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <xQueueGenericSend+0x94>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	623b      	str	r3, [r7, #32]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003974:	f001 f9d8 	bl	8004d28 <xTaskGetSchedulerState>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <xQueueGenericSend+0xa4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <xQueueGenericSend+0xa8>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <xQueueGenericSend+0xaa>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	61fb      	str	r3, [r7, #28]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039a6:	f001 fd17 	bl	80053d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <xQueueGenericSend+0xdc>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d129      	bne.n	8003a10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c2:	f000 fac9 	bl	8003f58 <prvCopyDataToQueue>
 80039c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	3324      	adds	r3, #36	@ 0x24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 ffe7 	bl	80049a8 <xTaskRemoveFromEventList>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae0 <xQueueGenericSend+0x200>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	e00a      	b.n	8003a08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039f8:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <xQueueGenericSend+0x200>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a08:	f001 fd18 	bl	800543c <vPortExitCritical>
				return pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e063      	b.n	8003ad8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a16:	f001 fd11 	bl	800543c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e05c      	b.n	8003ad8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f821 	bl	8004a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a32:	f001 fd03 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a36:	f000 fdcf 	bl	80045d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a3a:	f001 fccd 	bl	80053d8 <vPortEnterCritical>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d103      	bne.n	8003a54 <xQueueGenericSend+0x174>
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSend+0x18a>
 8003a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6a:	f001 fce7 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a6e:	1d3a      	adds	r2, r7, #4
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f810 	bl	8004a9c <xTaskCheckForTimeOut>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d124      	bne.n	8003acc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a84:	f000 fb60 	bl	8004148 <prvIsQueueFull>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	3310      	adds	r3, #16
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 ff60 	bl	800495c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a9e:	f000 faeb 	bl	8004078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aa2:	f000 fda7 	bl	80045f4 <xTaskResumeAll>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f af7c 	bne.w	80039a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003aae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <xQueueGenericSend+0x200>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	e772      	b.n	80039a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac2:	f000 fad9 	bl	8004078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ac6:	f000 fd95 	bl	80045f4 <xTaskResumeAll>
 8003aca:	e76c      	b.n	80039a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ace:	f000 fad3 	bl	8004078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad2:	f000 fd8f 	bl	80045f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3738      	adds	r7, #56	@ 0x38
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08e      	sub	sp, #56	@ 0x38
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	623b      	str	r3, [r7, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	61fb      	str	r3, [r7, #28]
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <xQueueGiveFromISR+0x5c>
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <xQueueGiveFromISR+0x60>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <xQueueGiveFromISR+0x62>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	61bb      	str	r3, [r7, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b62:	f001 fd19 	bl	8005598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b66:	f3ef 8211 	mrs	r2, BASEPRI
 8003b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	617a      	str	r2, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d22b      	bcs.n	8003bea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d112      	bne.n	8003bd4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	3324      	adds	r3, #36	@ 0x24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fef4 	bl	80049a8 <xTaskRemoveFromEventList>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e007      	b.n	8003be4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bd8:	3301      	adds	r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003be4:	2301      	movs	r3, #1
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be8:	e001      	b.n	8003bee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3738      	adds	r7, #56	@ 0x38
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	623b      	str	r3, [r7, #32]
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61fb      	str	r3, [r7, #28]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c58:	f001 f866 	bl	8004d28 <xTaskGetSchedulerState>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <xQueueSemaphoreTake+0x64>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueSemaphoreTake+0x68>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueSemaphoreTake+0x6a>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61bb      	str	r3, [r7, #24]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c8a:	f001 fba5 	bl	80053d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d024      	beq.n	8003ce4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	1e5a      	subs	r2, r3, #1
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003caa:	f001 f9e9 	bl	8005080 <pvTaskIncrementMutexHeldCount>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00f      	beq.n	8003cdc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fe71 	bl	80049a8 <xTaskRemoveFromEventList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ccc:	4b54      	ldr	r3, [pc, #336]	@ (8003e20 <xQueueSemaphoreTake+0x21c>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cdc:	f001 fbae 	bl	800543c <vPortExitCritical>
				return pdPASS;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e098      	b.n	8003e16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d112      	bne.n	8003d10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	617b      	str	r3, [r7, #20]
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d08:	f001 fb98 	bl	800543c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e082      	b.n	8003e16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fea8 	bl	8004a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d24:	f001 fb8a 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d28:	f000 fc56 	bl	80045d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d2c:	f001 fb54 	bl	80053d8 <vPortEnterCritical>
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d36:	b25b      	sxtb	r3, r3
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d103      	bne.n	8003d46 <xQueueSemaphoreTake+0x142>
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d103      	bne.n	8003d5c <xQueueSemaphoreTake+0x158>
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d5c:	f001 fb6e 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d60:	463a      	mov	r2, r7
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fe97 	bl	8004a9c <xTaskCheckForTimeOut>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d132      	bne.n	8003dda <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d76:	f000 f9d1 	bl	800411c <prvIsQueueEmpty>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d026      	beq.n	8003dce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003d88:	f001 fb26 	bl	80053d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 ffe7 	bl	8004d64 <xTaskPriorityInherit>
 8003d96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003d98:	f001 fb50 	bl	800543c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9e:	3324      	adds	r3, #36	@ 0x24
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fdd9 	bl	800495c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dac:	f000 f964 	bl	8004078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db0:	f000 fc20 	bl	80045f4 <xTaskResumeAll>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f47f af67 	bne.w	8003c8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003dbc:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <xQueueSemaphoreTake+0x21c>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e75d      	b.n	8003c8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dd0:	f000 f952 	bl	8004078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dd4:	f000 fc0e 	bl	80045f4 <xTaskResumeAll>
 8003dd8:	e757      	b.n	8003c8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ddc:	f000 f94c 	bl	8004078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de0:	f000 fc08 	bl	80045f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003de6:	f000 f999 	bl	800411c <prvIsQueueEmpty>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f43f af4c 	beq.w	8003c8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003df8:	f001 faee 	bl	80053d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dfe:	f000 f893 	bl	8003f28 <prvGetDisinheritPriorityAfterTimeout>
 8003e02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f8a8 	bl	8004f60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e10:	f001 fb14 	bl	800543c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3738      	adds	r7, #56	@ 0x38
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	@ 0x38
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	623b      	str	r3, [r7, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <xQueueReceiveFromISR+0x3c>
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <xQueueReceiveFromISR+0x40>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <xQueueReceiveFromISR+0x42>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	61fb      	str	r3, [r7, #28]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e82:	f001 fb89 	bl	8005598 <vPortValidateInterruptPriority>
	__asm volatile
 8003e86:	f3ef 8211 	mrs	r2, BASEPRI
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	61ba      	str	r2, [r7, #24]
 8003e9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d02f      	beq.n	8003f0e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ebc:	f000 f8b6 	bl	800402c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d112      	bne.n	8003ef8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	3310      	adds	r3, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fd62 	bl	80049a8 <xTaskRemoveFromEventList>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e007      	b.n	8003f08 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b25a      	sxtb	r2, r3
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0c:	e001      	b.n	8003f12 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f383 8811 	msr	BASEPRI, r3
}
 8003f1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3738      	adds	r7, #56	@ 0x38
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e001      	b.n	8003f4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d14d      	bne.n	800401a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 ff64 	bl	8004e50 <xTaskPriorityDisinherit>
 8003f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	e043      	b.n	800401a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d119      	bne.n	8003fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6858      	ldr	r0, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	f001 fd54 	bl	8005a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	441a      	add	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d32b      	bcc.n	800401a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e026      	b.n	800401a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68d8      	ldr	r0, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	f001 fd3a 	bl	8005a50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	425b      	negs	r3, r3
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d207      	bcs.n	8004008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	425b      	negs	r3, r3
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d105      	bne.n	800401a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	3b01      	subs	r3, #1
 8004018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004022:	697b      	ldr	r3, [r7, #20]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d303      	bcc.n	8004060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	461a      	mov	r2, r3
 800406a:	6838      	ldr	r0, [r7, #0]
 800406c:	f001 fcf0 	bl	8005a50 <memcpy>
	}
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004080:	f001 f9aa 	bl	80053d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800408c:	e011      	b.n	80040b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3324      	adds	r3, #36	@ 0x24
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fc84 	bl	80049a8 <xTaskRemoveFromEventList>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040a6:	f000 fd5d 	bl	8004b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dce9      	bgt.n	800408e <prvUnlockQueue+0x16>
 80040ba:	e000      	b.n	80040be <prvUnlockQueue+0x46>
					break;
 80040bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	22ff      	movs	r2, #255	@ 0xff
 80040c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80040c6:	f001 f9b9 	bl	800543c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040ca:	f001 f985 	bl	80053d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d6:	e011      	b.n	80040fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3310      	adds	r3, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fc5f 	bl	80049a8 <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040f0:	f000 fd38 	bl	8004b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004100:	2b00      	cmp	r3, #0
 8004102:	dce9      	bgt.n	80040d8 <prvUnlockQueue+0x60>
 8004104:	e000      	b.n	8004108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	22ff      	movs	r2, #255	@ 0xff
 800410c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004110:	f001 f994 	bl	800543c <vPortExitCritical>
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004124:	f001 f958 	bl	80053d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e001      	b.n	800413a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413a:	f001 f97f 	bl	800543c <vPortExitCritical>

	return xReturn;
 800413e:	68fb      	ldr	r3, [r7, #12]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004150:	f001 f942 	bl	80053d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	429a      	cmp	r2, r3
 800415e:	d102      	bne.n	8004166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004160:	2301      	movs	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e001      	b.n	800416a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416a:	f001 f967 	bl	800543c <vPortExitCritical>

	return xReturn;
 800416e:	68fb      	ldr	r3, [r7, #12]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	61fb      	str	r3, [r7, #28]
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041c2:	2354      	movs	r3, #84	@ 0x54
 80041c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b54      	cmp	r3, #84	@ 0x54
 80041ca:	d00b      	beq.n	80041e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61bb      	str	r3, [r7, #24]
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01e      	beq.n	800422a <xTaskCreateStatic+0xb2>
 80041ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01b      	beq.n	800422a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004204:	2300      	movs	r3, #0
 8004206:	9303      	str	r3, [sp, #12]
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f850 	bl	80042c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004224:	f000 f8d6 	bl	80043d4 <prvAddNewTaskToReadyList>
 8004228:	e001      	b.n	800422e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800422e:	697b      	ldr	r3, [r7, #20]
	}
 8004230:	4618      	mov	r0, r3
 8004232:	3728      	adds	r7, #40	@ 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	@ 0x30
 800423c:	af04      	add	r7, sp, #16
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f001 f9e5 	bl	800561c <pvPortMalloc>
 8004252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00e      	beq.n	8004278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800425a:	2054      	movs	r0, #84	@ 0x54
 800425c:	f001 f9de 	bl	800561c <pvPortMalloc>
 8004260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	631a      	str	r2, [r3, #48]	@ 0x30
 800426e:	e005      	b.n	800427c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	f001 faa1 	bl	80057b8 <vPortFree>
 8004276:	e001      	b.n	800427c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d017      	beq.n	80042b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	2300      	movs	r3, #0
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	9302      	str	r3, [sp, #8]
 8004294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f80e 	bl	80042c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a6:	69f8      	ldr	r0, [r7, #28]
 80042a8:	f000 f894 	bl	80043d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	e002      	b.n	80042b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042b8:	69bb      	ldr	r3, [r7, #24]
	}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b088      	sub	sp, #32
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042da:	3b01      	subs	r3, #1
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <prvInitialiseNewTask+0x4a>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	617b      	str	r3, [r7, #20]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e012      	b.n	800433e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	7819      	ldrb	r1, [r3, #0]
 8004320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	3334      	adds	r3, #52	@ 0x34
 8004328:	460a      	mov	r2, r1
 800432a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d9e9      	bls.n	8004318 <prvInitialiseNewTask+0x56>
 8004344:	e000      	b.n	8004348 <prvInitialiseNewTask+0x86>
			{
				break;
 8004346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004350:	e003      	b.n	800435a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435c:	2b06      	cmp	r3, #6
 800435e:	d901      	bls.n	8004364 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004360:	2306      	movs	r3, #6
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004368:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f8da 	bl	8003534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	3318      	adds	r3, #24
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f8d5 	bl	8003534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	f1c3 0207 	rsb	r2, r3, #7
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	2200      	movs	r2, #0
 80043a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f000 fede 	bl	8005174 <pxPortInitialiseStack>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ca:	bf00      	nop
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f000 fffc 	bl	80053d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a29      	ldr	r2, [pc, #164]	@ (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ea:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <prvAddNewTaskToReadyList+0xbc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f2:	4a27      	ldr	r2, [pc, #156]	@ (8004490 <prvAddNewTaskToReadyList+0xbc>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f8:	4b24      	ldr	r3, [pc, #144]	@ (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d110      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004400:	f000 fbd4 	bl	8004bac <prvInitialiseTaskLists>
 8004404:	e00d      	b.n	8004422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004406:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <prvAddNewTaskToReadyList+0xc0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440e:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <prvAddNewTaskToReadyList+0xbc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d802      	bhi.n	8004422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800441c:	4a1c      	ldr	r2, [pc, #112]	@ (8004490 <prvAddNewTaskToReadyList+0xbc>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <prvAddNewTaskToReadyList+0xc4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <prvAddNewTaskToReadyList+0xc4>)
 800442a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	4b19      	ldr	r3, [pc, #100]	@ (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	4a18      	ldr	r2, [pc, #96]	@ (800449c <prvAddNewTaskToReadyList+0xc8>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7ff f87a 	bl	800354e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800445a:	f000 ffef 	bl	800543c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <prvAddNewTaskToReadyList+0xc0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <prvAddNewTaskToReadyList+0xbc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d207      	bcs.n	8004484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000420 	.word	0x20000420
 8004490:	20000320 	.word	0x20000320
 8004494:	2000042c 	.word	0x2000042c
 8004498:	2000043c 	.word	0x2000043c
 800449c:	20000428 	.word	0x20000428
 80044a0:	20000324 	.word	0x20000324
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ba:	4b14      	ldr	r3, [pc, #80]	@ (800450c <vTaskDelay+0x64>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <vTaskDelay+0x32>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044da:	f000 f87d 	bl	80045d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044de:	2100      	movs	r1, #0
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fde1 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044e6:	f000 f885 	bl	80045f4 <xTaskResumeAll>
 80044ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80044f2:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <vTaskDelay+0x68>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000448 	.word	0x20000448
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	@ 0x28
 8004518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004522:	463a      	mov	r2, r7
 8004524:	1d39      	adds	r1, r7, #4
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb ffc8 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	460a      	mov	r2, r1
 8004542:	491f      	ldr	r1, [pc, #124]	@ (80045c0 <vTaskStartScheduler+0xac>)
 8004544:	481f      	ldr	r0, [pc, #124]	@ (80045c4 <vTaskStartScheduler+0xb0>)
 8004546:	f7ff fe17 	bl	8004178 <xTaskCreateStatic>
 800454a:	4603      	mov	r3, r0
 800454c:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <vTaskStartScheduler+0xb4>)
 800454e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004550:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <vTaskStartScheduler+0xb4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e001      	b.n	8004562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d116      	bne.n	8004596 <vTaskStartScheduler+0x82>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	613b      	str	r3, [r7, #16]
}
 800457a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800457c:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <vTaskStartScheduler+0xb8>)
 800457e:	f04f 32ff 	mov.w	r2, #4294967295
 8004582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004584:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <vTaskStartScheduler+0xbc>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800458a:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <vTaskStartScheduler+0xc0>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004590:	f000 fe7e 	bl	8005290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004594:	e00f      	b.n	80045b6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d10b      	bne.n	80045b6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vTaskStartScheduler+0x9e>
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	08005acc 	.word	0x08005acc
 80045c4:	08004b7d 	.word	0x08004b7d
 80045c8:	20000444 	.word	0x20000444
 80045cc:	20000440 	.word	0x20000440
 80045d0:	2000042c 	.word	0x2000042c
 80045d4:	20000424 	.word	0x20000424

080045d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045dc:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <vTaskSuspendAll+0x18>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a03      	ldr	r2, [pc, #12]	@ (80045f0 <vTaskSuspendAll+0x18>)
 80045e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000448 	.word	0x20000448

080045f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004602:	4b42      	ldr	r3, [pc, #264]	@ (800470c <xTaskResumeAll+0x118>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <xTaskResumeAll+0x2e>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	603b      	str	r3, [r7, #0]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004622:	f000 fed9 	bl	80053d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <xTaskResumeAll+0x118>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	4a37      	ldr	r2, [pc, #220]	@ (800470c <xTaskResumeAll+0x118>)
 800462e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004630:	4b36      	ldr	r3, [pc, #216]	@ (800470c <xTaskResumeAll+0x118>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d161      	bne.n	80046fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004638:	4b35      	ldr	r3, [pc, #212]	@ (8004710 <xTaskResumeAll+0x11c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05d      	beq.n	80046fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004640:	e02e      	b.n	80046a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <xTaskResumeAll+0x120>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3318      	adds	r3, #24
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe ffda 	bl	8003608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe ffd5 	bl	8003608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	4b2c      	ldr	r3, [pc, #176]	@ (8004718 <xTaskResumeAll+0x124>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	4a2a      	ldr	r2, [pc, #168]	@ (8004718 <xTaskResumeAll+0x124>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a27      	ldr	r2, [pc, #156]	@ (800471c <xTaskResumeAll+0x128>)
 800467e:	441a      	add	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe ff61 	bl	800354e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004690:	4b23      	ldr	r3, [pc, #140]	@ (8004720 <xTaskResumeAll+0x12c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800469a:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <xTaskResumeAll+0x130>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004714 <xTaskResumeAll+0x120>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1cc      	bne.n	8004642 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046ae:	f000 fb1b 	bl	8004ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <xTaskResumeAll+0x134>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d010      	beq.n	80046e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046be:	f000 f837 	bl	8004730 <xTaskIncrementTick>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046c8:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <xTaskResumeAll+0x130>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f1      	bne.n	80046be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046da:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <xTaskResumeAll+0x134>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046e0:	4b10      	ldr	r3, [pc, #64]	@ (8004724 <xTaskResumeAll+0x130>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <xTaskResumeAll+0x138>)
 80046ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046fc:	f000 fe9e 	bl	800543c <vPortExitCritical>

	return xAlreadyYielded;
 8004700:	68bb      	ldr	r3, [r7, #8]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000448 	.word	0x20000448
 8004710:	20000420 	.word	0x20000420
 8004714:	200003e0 	.word	0x200003e0
 8004718:	20000428 	.word	0x20000428
 800471c:	20000324 	.word	0x20000324
 8004720:	20000320 	.word	0x20000320
 8004724:	20000434 	.word	0x20000434
 8004728:	20000430 	.word	0x20000430
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473a:	4b4f      	ldr	r3, [pc, #316]	@ (8004878 <xTaskIncrementTick+0x148>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 808f 	bne.w	8004862 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004744:	4b4d      	ldr	r3, [pc, #308]	@ (800487c <xTaskIncrementTick+0x14c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800474c:	4a4b      	ldr	r2, [pc, #300]	@ (800487c <xTaskIncrementTick+0x14c>)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d121      	bne.n	800479c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004758:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <xTaskIncrementTick+0x150>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	603b      	str	r3, [r7, #0]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <xTaskIncrementTick+0x46>
 800477a:	4b41      	ldr	r3, [pc, #260]	@ (8004880 <xTaskIncrementTick+0x150>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	4b40      	ldr	r3, [pc, #256]	@ (8004884 <xTaskIncrementTick+0x154>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3e      	ldr	r2, [pc, #248]	@ (8004880 <xTaskIncrementTick+0x150>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	4a3e      	ldr	r2, [pc, #248]	@ (8004884 <xTaskIncrementTick+0x154>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b3e      	ldr	r3, [pc, #248]	@ (8004888 <xTaskIncrementTick+0x158>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	4a3c      	ldr	r2, [pc, #240]	@ (8004888 <xTaskIncrementTick+0x158>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	f000 faa6 	bl	8004ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800479c:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <xTaskIncrementTick+0x15c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d348      	bcc.n	8004838 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a6:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <xTaskIncrementTick+0x150>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b0:	4b36      	ldr	r3, [pc, #216]	@ (800488c <xTaskIncrementTick+0x15c>)
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	601a      	str	r2, [r3, #0]
					break;
 80047b8:	e03e      	b.n	8004838 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ba:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <xTaskIncrementTick+0x150>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d203      	bcs.n	80047da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047d2:	4a2e      	ldr	r2, [pc, #184]	@ (800488c <xTaskIncrementTick+0x15c>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047d8:	e02e      	b.n	8004838 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe ff12 	bl	8003608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe ff09 	bl	8003608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	2201      	movs	r2, #1
 80047fc:	409a      	lsls	r2, r3
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <xTaskIncrementTick+0x160>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4313      	orrs	r3, r2
 8004804:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <xTaskIncrementTick+0x160>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <xTaskIncrementTick+0x164>)
 8004816:	441a      	add	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fe fe95 	bl	800354e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004828:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <xTaskIncrementTick+0x168>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	429a      	cmp	r2, r3
 8004830:	d3b9      	bcc.n	80047a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004836:	e7b6      	b.n	80047a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004838:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <xTaskIncrementTick+0x168>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483e:	4915      	ldr	r1, [pc, #84]	@ (8004894 <xTaskIncrementTick+0x164>)
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d901      	bls.n	8004854 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <xTaskIncrementTick+0x16c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e004      	b.n	800486c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004862:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <xTaskIncrementTick+0x170>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <xTaskIncrementTick+0x170>)
 800486a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800486c:	697b      	ldr	r3, [r7, #20]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000448 	.word	0x20000448
 800487c:	20000424 	.word	0x20000424
 8004880:	200003d8 	.word	0x200003d8
 8004884:	200003dc 	.word	0x200003dc
 8004888:	20000438 	.word	0x20000438
 800488c:	20000440 	.word	0x20000440
 8004890:	20000428 	.word	0x20000428
 8004894:	20000324 	.word	0x20000324
 8004898:	20000320 	.word	0x20000320
 800489c:	20000434 	.word	0x20000434
 80048a0:	20000430 	.word	0x20000430

080048a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048aa:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <vTaskSwitchContext+0xa4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048b2:	4b26      	ldr	r3, [pc, #152]	@ (800494c <vTaskSwitchContext+0xa8>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048b8:	e040      	b.n	800493c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048ba:	4b24      	ldr	r3, [pc, #144]	@ (800494c <vTaskSwitchContext+0xa8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c0:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <vTaskSwitchContext+0xac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	f1c3 031f 	rsb	r3, r3, #31
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	491f      	ldr	r1, [pc, #124]	@ (8004954 <vTaskSwitchContext+0xb0>)
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <vTaskSwitchContext+0x5e>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	607b      	str	r3, [r7, #4]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <vTaskSwitchContext+0x5a>
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <vTaskSwitchContext+0xb0>)
 800490e:	4413      	add	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3308      	adds	r3, #8
 8004924:	429a      	cmp	r2, r3
 8004926:	d104      	bne.n	8004932 <vTaskSwitchContext+0x8e>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a07      	ldr	r2, [pc, #28]	@ (8004958 <vTaskSwitchContext+0xb4>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	20000448 	.word	0x20000448
 800494c:	20000434 	.word	0x20000434
 8004950:	20000428 	.word	0x20000428
 8004954:	20000324 	.word	0x20000324
 8004958:	20000320 	.word	0x20000320

0800495c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <vTaskPlaceOnEventList+0x48>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3318      	adds	r3, #24
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fe fe02 	bl	8003596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004992:	2101      	movs	r1, #1
 8004994:	6838      	ldr	r0, [r7, #0]
 8004996:	f000 fb87 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000320 	.word	0x20000320

080049a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60fb      	str	r3, [r7, #12]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3318      	adds	r3, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fe14 	bl	8003608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <xTaskRemoveFromEventList+0xb0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11c      	bne.n	8004a22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fe0b 	bl	8003608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	2201      	movs	r2, #1
 80049f8:	409a      	lsls	r2, r3
 80049fa:	4b18      	ldr	r3, [pc, #96]	@ (8004a5c <xTaskRemoveFromEventList+0xb4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <xTaskRemoveFromEventList+0xb4>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a13      	ldr	r2, [pc, #76]	@ (8004a60 <xTaskRemoveFromEventList+0xb8>)
 8004a12:	441a      	add	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe fd97 	bl	800354e <vListInsertEnd>
 8004a20:	e005      	b.n	8004a2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3318      	adds	r3, #24
 8004a26:	4619      	mov	r1, r3
 8004a28:	480e      	ldr	r0, [pc, #56]	@ (8004a64 <xTaskRemoveFromEventList+0xbc>)
 8004a2a:	f7fe fd90 	bl	800354e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <xTaskRemoveFromEventList+0xc0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d905      	bls.n	8004a48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <xTaskRemoveFromEventList+0xc4>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e001      	b.n	8004a4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a4c:	697b      	ldr	r3, [r7, #20]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000448 	.word	0x20000448
 8004a5c:	20000428 	.word	0x20000428
 8004a60:	20000324 	.word	0x20000324
 8004a64:	200003e0 	.word	0x200003e0
 8004a68:	20000320 	.word	0x20000320
 8004a6c:	20000434 	.word	0x20000434

08004a70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <vTaskInternalSetTimeOutState+0x24>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <vTaskInternalSetTimeOutState+0x28>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	20000438 	.word	0x20000438
 8004a98:	20000424 	.word	0x20000424

08004a9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	613b      	str	r3, [r7, #16]
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60fb      	str	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ae2:	f000 fc79 	bl	80053d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b5c <xTaskCheckForTimeOut+0xc0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d102      	bne.n	8004b06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	e023      	b.n	8004b4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <xTaskCheckForTimeOut+0xc4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d007      	beq.n	8004b22 <xTaskCheckForTimeOut+0x86>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e015      	b.n	8004b4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d20b      	bcs.n	8004b44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff99 	bl	8004a70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	e004      	b.n	8004b4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b4e:	f000 fc75 	bl	800543c <vPortExitCritical>

	return xReturn;
 8004b52:	69fb      	ldr	r3, [r7, #28]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000424 	.word	0x20000424
 8004b60:	20000438 	.word	0x20000438

08004b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <vTaskMissedYield+0x14>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	20000434 	.word	0x20000434

08004b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b84:	f000 f852 	bl	8004c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <prvIdleTask+0x28>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d9f9      	bls.n	8004b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <prvIdleTask+0x2c>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ba0:	e7f0      	b.n	8004b84 <prvIdleTask+0x8>
 8004ba2:	bf00      	nop
 8004ba4:	20000324 	.word	0x20000324
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	e00c      	b.n	8004bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4a12      	ldr	r2, [pc, #72]	@ (8004c0c <prvInitialiseTaskLists+0x60>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fc94 	bl	80034f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d9ef      	bls.n	8004bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd8:	480d      	ldr	r0, [pc, #52]	@ (8004c10 <prvInitialiseTaskLists+0x64>)
 8004bda:	f7fe fc8b 	bl	80034f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bde:	480d      	ldr	r0, [pc, #52]	@ (8004c14 <prvInitialiseTaskLists+0x68>)
 8004be0:	f7fe fc88 	bl	80034f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004be4:	480c      	ldr	r0, [pc, #48]	@ (8004c18 <prvInitialiseTaskLists+0x6c>)
 8004be6:	f7fe fc85 	bl	80034f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bea:	480c      	ldr	r0, [pc, #48]	@ (8004c1c <prvInitialiseTaskLists+0x70>)
 8004bec:	f7fe fc82 	bl	80034f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bf0:	480b      	ldr	r0, [pc, #44]	@ (8004c20 <prvInitialiseTaskLists+0x74>)
 8004bf2:	f7fe fc7f 	bl	80034f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <prvInitialiseTaskLists+0x78>)
 8004bf8:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <prvInitialiseTaskLists+0x64>)
 8004bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <prvInitialiseTaskLists+0x7c>)
 8004bfe:	4a05      	ldr	r2, [pc, #20]	@ (8004c14 <prvInitialiseTaskLists+0x68>)
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000324 	.word	0x20000324
 8004c10:	200003b0 	.word	0x200003b0
 8004c14:	200003c4 	.word	0x200003c4
 8004c18:	200003e0 	.word	0x200003e0
 8004c1c:	200003f4 	.word	0x200003f4
 8004c20:	2000040c 	.word	0x2000040c
 8004c24:	200003d8 	.word	0x200003d8
 8004c28:	200003dc 	.word	0x200003dc

08004c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c32:	e019      	b.n	8004c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c34:	f000 fbd0 	bl	80053d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <prvCheckTasksWaitingTermination+0x50>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fcdf 	bl	8003608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <prvCheckTasksWaitingTermination+0x54>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a0b      	ldr	r2, [pc, #44]	@ (8004c80 <prvCheckTasksWaitingTermination+0x54>)
 8004c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c5e:	f000 fbed 	bl	800543c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f810 	bl	8004c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <prvCheckTasksWaitingTermination+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e1      	bne.n	8004c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200003f4 	.word	0x200003f4
 8004c80:	20000420 	.word	0x20000420
 8004c84:	20000408 	.word	0x20000408

08004c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd8a 	bl	80057b8 <vPortFree>
				vPortFree( pxTCB );
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fd87 	bl	80057b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004caa:	e019      	b.n	8004ce0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d103      	bne.n	8004cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fd7e 	bl	80057b8 <vPortFree>
	}
 8004cbc:	e010      	b.n	8004ce0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d00b      	beq.n	8004ce0 <prvDeleteTCB+0x58>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <prvDeleteTCB+0x54>
	}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d00:	e008      	b.n	8004d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <prvResetNextTaskUnblockTime+0x38>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <prvResetNextTaskUnblockTime+0x3c>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	200003d8 	.word	0x200003d8
 8004d24:	20000440 	.word	0x20000440

08004d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <xTaskGetSchedulerState+0x34>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d36:	2301      	movs	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e008      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3c:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <xTaskGetSchedulerState+0x38>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d44:	2302      	movs	r3, #2
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	e001      	b.n	8004d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d4e:	687b      	ldr	r3, [r7, #4]
	}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000042c 	.word	0x2000042c
 8004d60:	20000448 	.word	0x20000448

08004d64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d05e      	beq.n	8004e38 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <xTaskPriorityInherit+0xe0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d24e      	bcs.n	8004e26 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db06      	blt.n	8004d9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d90:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <xTaskPriorityInherit+0xe0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	f1c3 0207 	rsb	r2, r3, #7
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4a26      	ldr	r2, [pc, #152]	@ (8004e48 <xTaskPriorityInherit+0xe4>)
 8004db0:	4413      	add	r3, r2
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d12f      	bne.n	8004e16 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fc24 	bl	8003608 <uxListRemove>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	2201      	movs	r2, #1
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e4c <xTaskPriorityInherit+0xe8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <xTaskPriorityInherit+0xe8>)
 8004dda:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ddc:	4b19      	ldr	r3, [pc, #100]	@ (8004e44 <xTaskPriorityInherit+0xe0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	2201      	movs	r2, #1
 8004dec:	409a      	lsls	r2, r3
 8004dee:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <xTaskPriorityInherit+0xe8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <xTaskPriorityInherit+0xe8>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a10      	ldr	r2, [pc, #64]	@ (8004e48 <xTaskPriorityInherit+0xe4>)
 8004e06:	441a      	add	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe fb9d 	bl	800354e <vListInsertEnd>
 8004e14:	e004      	b.n	8004e20 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <xTaskPriorityInherit+0xe0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e008      	b.n	8004e38 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <xTaskPriorityInherit+0xe0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d201      	bcs.n	8004e38 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e38:	68fb      	ldr	r3, [r7, #12]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000320 	.word	0x20000320
 8004e48:	20000324 	.word	0x20000324
 8004e4c:	20000428 	.word	0x20000428

08004e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d070      	beq.n	8004f48 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e66:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <xTaskPriorityDisinherit+0x104>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d00b      	beq.n	8004e88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60bb      	str	r3, [r7, #8]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d044      	beq.n	8004f48 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d140      	bne.n	8004f48 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fb9c 	bl	8003608 <uxListRemove>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d115      	bne.n	8004f02 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	491f      	ldr	r1, [pc, #124]	@ (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xTaskPriorityDisinherit+0xb2>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <xTaskPriorityDisinherit+0x10c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4013      	ands	r3, r2
 8004efe:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <xTaskPriorityDisinherit+0x10c>)
 8004f00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f1c3 0207 	rsb	r2, r3, #7
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <xTaskPriorityDisinherit+0x10c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	4a0d      	ldr	r2, [pc, #52]	@ (8004f5c <xTaskPriorityDisinherit+0x10c>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <xTaskPriorityDisinherit+0x108>)
 8004f36:	441a      	add	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fe fb05 	bl	800354e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f48:	697b      	ldr	r3, [r7, #20]
	}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000320 	.word	0x20000320
 8004f58:	20000324 	.word	0x20000324
 8004f5c:	20000428 	.word	0x20000428

08004f60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d079      	beq.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d902      	bls.n	8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e002      	b.n	8004fae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d059      	beq.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d154      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8005074 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10b      	bne.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	60bb      	str	r3, [r7, #8]
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db04      	blt.n	8005002 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f1c3 0207 	rsb	r2, r3, #7
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	6959      	ldr	r1, [r3, #20]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005012:	4413      	add	r3, r2
 8005014:	4299      	cmp	r1, r3
 8005016:	d129      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe faf3 	bl	8003608 <uxListRemove>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	2201      	movs	r2, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43da      	mvns	r2, r3
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4013      	ands	r3, r2
 800503a:	4a10      	ldr	r2, [pc, #64]	@ (800507c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800503c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	2201      	movs	r2, #1
 8005044:	409a      	lsls	r2, r3
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	4a0b      	ldr	r2, [pc, #44]	@ (800507c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a06      	ldr	r2, [pc, #24]	@ (8005078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800505e:	441a      	add	r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fa71 	bl	800354e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000320 	.word	0x20000320
 8005078:	20000324 	.word	0x20000324
 800507c:	20000428 	.word	0x20000428

08005080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005084:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005092:	3201      	adds	r2, #1
 8005094:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005096:	4b03      	ldr	r3, [pc, #12]	@ (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
	}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000320 	.word	0x20000320

080050a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	4b28      	ldr	r3, [pc, #160]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe faa2 	bl	8003608 <uxListRemove>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	2201      	movs	r2, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	4b21      	ldr	r3, [pc, #132]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	4a20      	ldr	r2, [pc, #128]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d10a      	bne.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f0:	4b1a      	ldr	r3, [pc, #104]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	481a      	ldr	r0, [pc, #104]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050fa:	f7fe fa28 	bl	800354e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050fe:	e026      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	d209      	bcs.n	800512c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <prvAddCurrentTaskToDelayedList+0xc0>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0f      	ldr	r3, [pc, #60]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe fa36 	bl	8003596 <vListInsert>
}
 800512a:	e010      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <prvAddCurrentTaskToDelayedList+0xc4>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe fa2c 	bl	8003596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d202      	bcs.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005148:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000424 	.word	0x20000424
 800515c:	20000320 	.word	0x20000320
 8005160:	20000428 	.word	0x20000428
 8005164:	2000040c 	.word	0x2000040c
 8005168:	200003dc 	.word	0x200003dc
 800516c:	200003d8 	.word	0x200003d8
 8005170:	20000440 	.word	0x20000440

08005174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3b04      	subs	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800518c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b04      	subs	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a4:	4a0c      	ldr	r2, [pc, #48]	@ (80051d8 <pxPortInitialiseStack+0x64>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b14      	subs	r3, #20
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f06f 0202 	mvn.w	r2, #2
 80051c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3b20      	subs	r3, #32
 80051c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	080051dd 	.word	0x080051dd

080051dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <prvTaskExitError+0x58>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d00b      	beq.n	8005208 <prvTaskExitError+0x2c>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <prvTaskExitError+0x28>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60bb      	str	r3, [r7, #8]
}
 800521a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800521c:	bf00      	nop
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0fc      	beq.n	800521e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	4770      	bx	lr
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst2>:
 8005260:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005268:	4808      	ldr	r0, [pc, #32]	@ (800528c <prvPortStartFirstTask+0x24>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8814 	msr	CONTROL, r0
 800527a:	b662      	cpsie	i
 800527c:	b661      	cpsie	f
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	df00      	svc	0
 8005288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800528a:	bf00      	nop
 800528c:	e000ed08 	.word	0xe000ed08

08005290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005296:	4b47      	ldr	r3, [pc, #284]	@ (80053b4 <xPortStartScheduler+0x124>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <xPortStartScheduler+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10b      	bne.n	80052b8 <xPortStartScheduler+0x28>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	613b      	str	r3, [r7, #16]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <xPortStartScheduler+0x124>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3f      	ldr	r2, [pc, #252]	@ (80053bc <xPortStartScheduler+0x12c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10b      	bne.n	80052da <xPortStartScheduler+0x4a>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60fb      	str	r3, [r7, #12]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <xPortStartScheduler+0x130>)
 80052dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	22ff      	movs	r2, #255	@ 0xff
 80052ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b31      	ldr	r3, [pc, #196]	@ (80053c4 <xPortStartScheduler+0x134>)
 8005300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005304:	2207      	movs	r2, #7
 8005306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005308:	e009      	b.n	800531e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <xPortStartScheduler+0x138>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	4a2d      	ldr	r2, [pc, #180]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0ef      	beq.n	800530a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800532a:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <xPortStartScheduler+0x138>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	d00b      	beq.n	800534e <xPortStartScheduler+0xbe>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <xPortStartScheduler+0x138>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005360:	4a19      	ldr	r2, [pc, #100]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536c:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <xPortStartScheduler+0x13c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <xPortStartScheduler+0x13c>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b14      	ldr	r3, [pc, #80]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005384:	f000 f8da 	bl	800553c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <xPortStartScheduler+0x140>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800538e:	f000 f8f9 	bl	8005584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0f      	ldr	r2, [pc, #60]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800539c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800539e:	f7ff ff63 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053a2:	f7ff fa7f 	bl	80048a4 <vTaskSwitchContext>
	prvTaskExitError();
 80053a6:	f7ff ff19 	bl	80051dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	410fc271 	.word	0x410fc271
 80053bc:	410fc270 	.word	0x410fc270
 80053c0:	e000e400 	.word	0xe000e400
 80053c4:	2000044c 	.word	0x2000044c
 80053c8:	20000450 	.word	0x20000450
 80053cc:	e000ed20 	.word	0xe000ed20
 80053d0:	2000000c 	.word	0x2000000c
 80053d4:	e000ef34 	.word	0xe000ef34

080053d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053f2:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005404:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <vPortEnterCritical+0x60>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <vPortEnterCritical+0x4e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	603b      	str	r3, [r7, #0]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <vPortEnterCritical+0x4a>
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005442:	4b12      	ldr	r3, [pc, #72]	@ (800548c <vPortExitCritical+0x50>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <vPortExitCritical+0x26>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3b01      	subs	r3, #1
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortExitCritical+0x50>)
 800546a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <vPortExitCritical+0x50>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <vPortExitCritical+0x44>
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	2000000c 	.word	0x2000000c

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f01e 0f10 	tst.w	lr, #16
 80054a0:	bf08      	it	eq
 80054a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054b4:	f380 8811 	msr	BASEPRI, r0
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f7ff f9f0 	bl	80048a4 <vTaskSwitchContext>
 80054c4:	f04f 0000 	mov.w	r0, #0
 80054c8:	f380 8811 	msr	BASEPRI, r0
 80054cc:	bc09      	pop	{r0, r3}
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6808      	ldr	r0, [r1, #0]
 80054d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d6:	f01e 0f10 	tst.w	lr, #16
 80054da:	bf08      	it	eq
 80054dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054e0:	f380 8809 	msr	PSP, r0
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst>:
 80054f0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005512:	f7ff f90d 	bl	8004730 <xTaskIncrementTick>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <xPortSysTickHandler+0x40>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <vPortSetupTimerInterrupt+0x38>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <vPortSetupTimerInterrupt+0x3c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <vPortSetupTimerInterrupt+0x40>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <vPortSetupTimerInterrupt+0x44>)
 800555a:	3b01      	subs	r3, #1
 800555c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000e010 	.word	0xe000e010
 8005574:	e000e018 	.word	0xe000e018
 8005578:	20000000 	.word	0x20000000
 800557c:	10624dd3 	.word	0x10624dd3
 8005580:	e000e014 	.word	0xe000e014

08005584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005594 <vPortEnableVFP+0x10>
 8005588:	6801      	ldr	r1, [r0, #0]
 800558a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800558e:	6001      	str	r1, [r0, #0]
 8005590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005592:	bf00      	nop
 8005594:	e000ed88 	.word	0xe000ed88

08005598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d915      	bls.n	80055d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055aa:	4a18      	ldr	r2, [pc, #96]	@ (800560c <vPortValidateInterruptPriority+0x74>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055b4:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <vPortValidateInterruptPriority+0x78>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	7afa      	ldrb	r2, [r7, #11]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d20b      	bcs.n	80055d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <vPortValidateInterruptPriority+0x7c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055de:	4b0e      	ldr	r3, [pc, #56]	@ (8005618 <vPortValidateInterruptPriority+0x80>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d90b      	bls.n	80055fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	603b      	str	r3, [r7, #0]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vPortValidateInterruptPriority+0x62>
	}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e3f0 	.word	0xe000e3f0
 8005610:	2000044c 	.word	0x2000044c
 8005614:	e000ed0c 	.word	0xe000ed0c
 8005618:	20000450 	.word	0x20000450

0800561c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	@ 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005628:	f7fe ffd6 	bl	80045d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800562c:	4b5c      	ldr	r3, [pc, #368]	@ (80057a0 <pvPortMalloc+0x184>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005634:	f000 f924 	bl	8005880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005638:	4b5a      	ldr	r3, [pc, #360]	@ (80057a4 <pvPortMalloc+0x188>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 8095 	bne.w	8005770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01e      	beq.n	800568a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800564c:	2208      	movs	r2, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	3308      	adds	r3, #8
 8005666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <pvPortMalloc+0x6e>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	617b      	str	r3, [r7, #20]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d06f      	beq.n	8005770 <pvPortMalloc+0x154>
 8005690:	4b45      	ldr	r3, [pc, #276]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d86a      	bhi.n	8005770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800569a:	4b44      	ldr	r3, [pc, #272]	@ (80057ac <pvPortMalloc+0x190>)
 800569c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800569e:	4b43      	ldr	r3, [pc, #268]	@ (80057ac <pvPortMalloc+0x190>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056a4:	e004      	b.n	80056b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d903      	bls.n	80056c2 <pvPortMalloc+0xa6>
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056c2:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <pvPortMalloc+0x184>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d051      	beq.n	8005770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2208      	movs	r2, #8
 80056d2:	4413      	add	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	2308      	movs	r3, #8
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d920      	bls.n	8005730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <pvPortMalloc+0xfc>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800572a:	69b8      	ldr	r0, [r7, #24]
 800572c:	f000 f90a 	bl	8005944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <pvPortMalloc+0x18c>)
 800573c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800573e:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <pvPortMalloc+0x194>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d203      	bcs.n	8005752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800574a:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <pvPortMalloc+0x18c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a18      	ldr	r2, [pc, #96]	@ (80057b0 <pvPortMalloc+0x194>)
 8005750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4b13      	ldr	r3, [pc, #76]	@ (80057a4 <pvPortMalloc+0x188>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	431a      	orrs	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <pvPortMalloc+0x198>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a11      	ldr	r2, [pc, #68]	@ (80057b4 <pvPortMalloc+0x198>)
 800576e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005770:	f7fe ff40 	bl	80045f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <pvPortMalloc+0x17a>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <pvPortMalloc+0x176>
	return pvReturn;
 8005796:	69fb      	ldr	r3, [r7, #28]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	@ 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20001014 	.word	0x20001014
 80057a4:	20001028 	.word	0x20001028
 80057a8:	20001018 	.word	0x20001018
 80057ac:	2000100c 	.word	0x2000100c
 80057b0:	2000101c 	.word	0x2000101c
 80057b4:	20001020 	.word	0x20001020

080057b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04f      	beq.n	800586a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ca:	2308      	movs	r3, #8
 80057cc:	425b      	negs	r3, r3
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <vPortFree+0xbc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <vPortFree+0x46>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	60fb      	str	r3, [r7, #12]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <vPortFree+0x66>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <vPortFree+0xbc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11a      	bne.n	800586a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <vPortFree+0xbc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005844:	f7fe fec8 	bl	80045d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <vPortFree+0xc0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4413      	add	r3, r2
 8005852:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <vPortFree+0xc0>)
 8005854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f000 f874 	bl	8005944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800585c:	4b07      	ldr	r3, [pc, #28]	@ (800587c <vPortFree+0xc4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	4a06      	ldr	r2, [pc, #24]	@ (800587c <vPortFree+0xc4>)
 8005864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005866:	f7fe fec5 	bl	80045f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20001028 	.word	0x20001028
 8005878:	20001018 	.word	0x20001018
 800587c:	20001024 	.word	0x20001024

08005880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005886:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800588a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800588c:	4b27      	ldr	r3, [pc, #156]	@ (800592c <prvHeapInit+0xac>)
 800588e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3307      	adds	r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0307 	bic.w	r3, r3, #7
 80058a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <prvHeapInit+0xac>)
 80058b0:	4413      	add	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <prvHeapInit+0xb0>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058be:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <prvHeapInit+0xb0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4413      	add	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058cc:	2208      	movs	r2, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <prvHeapInit+0xb4>)
 80058e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058e2:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <prvHeapInit+0xb4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ea:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <prvHeapInit+0xb4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005900:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <prvHeapInit+0xb4>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <prvHeapInit+0xb8>)
 800590e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a09      	ldr	r2, [pc, #36]	@ (800593c <prvHeapInit+0xbc>)
 8005916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005918:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <prvHeapInit+0xc0>)
 800591a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000454 	.word	0x20000454
 8005930:	2000100c 	.word	0x2000100c
 8005934:	20001014 	.word	0x20001014
 8005938:	2000101c 	.word	0x2000101c
 800593c:	20001018 	.word	0x20001018
 8005940:	20001028 	.word	0x20001028

08005944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800594c:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <prvInsertBlockIntoFreeList+0xac>)
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <prvInsertBlockIntoFreeList+0x14>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d8f7      	bhi.n	8005952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	4413      	add	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d108      	bne.n	8005986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d118      	bne.n	80059cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <prvInsertBlockIntoFreeList+0xb0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d00d      	beq.n	80059c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e008      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059c2:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <prvInsertBlockIntoFreeList+0xb0>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e003      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d002      	beq.n	80059e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	2000100c 	.word	0x2000100c
 80059f4:	20001014 	.word	0x20001014

080059f8 <memset>:
 80059f8:	4402      	add	r2, r0
 80059fa:	4603      	mov	r3, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	@ (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 f826 	bl	8005a6c <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	08005b24 	.word	0x08005b24
 8005a44:	08005b24 	.word	0x08005b24
 8005a48:	08005b24 	.word	0x08005b24
 8005a4c:	08005b28 	.word	0x08005b28

08005a50 <memcpy>:
 8005a50:	440a      	add	r2, r1
 8005a52:	4291      	cmp	r1, r2
 8005a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a58:	d100      	bne.n	8005a5c <memcpy+0xc>
 8005a5a:	4770      	bx	lr
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a66:	4291      	cmp	r1, r2
 8005a68:	d1f9      	bne.n	8005a5e <memcpy+0xe>
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
