
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d60  08005d60  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  08005dc4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005dc4  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001063e  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  000176ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000197a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b63  00000000  00000000  0001a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026229  00000000  00000000  0001b19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011279  00000000  00000000  000413c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f094f  00000000  00000000  0005263d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  00142fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00147218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ca0 	.word	0x08005ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ca0 	.word	0x08005ca0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fca5 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f871 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f9e5 	bl	800094c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f9b3 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000586:	f000 f8bd 	bl	8000704 <MX_TIM8_Init>
  MX_TIM16_Init();
 800058a:	f000 f937 	bl	80007fc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);          // trigger timer
 800058e:	482d      	ldr	r0, [pc, #180]	@ (8000644 <main+0xd4>)
 8000590:	f002 fb26 	bl	8002be0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	482b      	ldr	r0, [pc, #172]	@ (8000644 <main+0xd4>)
 8000598:	f002 fc5c 	bl	8002e54 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim8);           // echo timer
 800059c:	482a      	ldr	r0, [pc, #168]	@ (8000648 <main+0xd8>)
 800059e:	f002 fb1f 	bl	8002be0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim8,  TIM_CHANNEL_1);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4828      	ldr	r0, [pc, #160]	@ (8000648 <main+0xd8>)
 80005a6:	f002 fdbd 	bl	8003124 <HAL_TIM_IC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      static uint32_t t0 = 0;
      if (HAL_GetTick() - t0 >= 100)       // 100ms print rate
 80005aa:	f000 fcbf 	bl	8000f2c <HAL_GetTick>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <main+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	2b63      	cmp	r3, #99	@ 0x63
 80005b8:	d9f7      	bls.n	80005aa <main+0x3a>
      {
          t0 = HAL_GetTick();
 80005ba:	f000 fcb7 	bl	8000f2c <HAL_GetTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a22      	ldr	r2, [pc, #136]	@ (800064c <main+0xdc>)
 80005c2:	6013      	str	r3, [r2, #0]
          uint32_t echo = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 80005c4:	2100      	movs	r1, #0
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <main+0xd8>)
 80005c8:	f003 f9a2 	bl	8003910 <HAL_TIM_ReadCapturedValue>
 80005cc:	64f8      	str	r0, [r7, #76]	@ 0x4c
          float dist_cm = echo / 58.0f;     // HC‑SR04 formula
 80005ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005d8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000650 <main+0xe0>
 80005dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
          int   i_part  = (int)dist_cm;
 80005e4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80005e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005ec:	ee17 3a90 	vmov	r3, s15
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
          int   f_part  = (int)((dist_cm - i_part)*1000);
 80005f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005f4:	ee07 3a90 	vmov	s15, r3
 80005f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000604:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000654 <main+0xe4>
 8000608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
 8000614:	643b      	str	r3, [r7, #64]	@ 0x40

          char buf[64];
          snprintf(buf, sizeof(buf),
 8000616:	4638      	mov	r0, r7
 8000618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000622:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <main+0xe8>)
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	f004 fe87 	bl	8005338 <sniprintf>
                   "echo=%lu  distance=%3d.%03d cm\r\n",
                   echo, i_part, f_part);
          HAL_UART_Transmit(&huart2,
                            (uint8_t*)buf, strlen(buf), 1000);
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdcf 	bl	80001d0 <strlen>
 8000632:	4603      	mov	r3, r0
          HAL_UART_Transmit(&huart2,
 8000634:	b29a      	uxth	r2, r3
 8000636:	4639      	mov	r1, r7
 8000638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063c:	4807      	ldr	r0, [pc, #28]	@ (800065c <main+0xec>)
 800063e:	f004 f91d 	bl	800487c <HAL_UART_Transmit>
  {
 8000642:	e7b2      	b.n	80005aa <main+0x3a>
 8000644:	200000c4 	.word	0x200000c4
 8000648:	20000078 	.word	0x20000078
 800064c:	20000198 	.word	0x20000198
 8000650:	42680000 	.word	0x42680000
 8000654:	447a0000 	.word	0x447a0000
 8000658:	08005cb8 	.word	0x08005cb8
 800065c:	20000110 	.word	0x20000110

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	@ 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	@ 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fe96 	bl	80053a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000686:	f000 ff0f 	bl	80014a8 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f9d4 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ae:	230a      	movs	r3, #10
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff46 	bl	8001554 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ce:	f000 f9b5 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb0d 	bl	8001d0c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 f9a0 	bl	8000a3c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	@ 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000734:	4a30      	ldr	r2, [pc, #192]	@ (80007f8 <MX_TIM8_Init+0xf4>)
 8000736:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000738:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 800073a:	224f      	movs	r2, #79	@ 0x4f
 800073c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800074a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800075e:	4825      	ldr	r0, [pc, #148]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000760:	f002 f9e6 	bl	8002b30 <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f967 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800076e:	4821      	ldr	r0, [pc, #132]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000770:	f002 fc76 	bl	8003060 <HAL_TIM_IC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800077a:	f000 f95f 	bl	8000a3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800077e:	2304      	movs	r3, #4
 8000780:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000782:	2350      	movs	r3, #80	@ 0x50
 8000784:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4817      	ldr	r0, [pc, #92]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 8000796:	f003 f879 	bl	800388c <HAL_TIM_SlaveConfigSynchro>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 80007a0:	f000 f94c 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	480f      	ldr	r0, [pc, #60]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 80007b8:	f003 feee 	bl	8004598 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f93b 	bl	8000a3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_TIM8_Init+0xf0>)
 80007de:	f002 fea4 	bl	800352a <HAL_TIM_IC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80007e8:	f000 f928 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3730      	adds	r7, #48	@ 0x30
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000078 	.word	0x20000078
 80007f8:	40013400 	.word	0x40013400

080007fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b092      	sub	sp, #72	@ 0x48
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	222c      	movs	r2, #44	@ 0x2c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fdbf 	bl	80053a0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000824:	4a30      	ldr	r2, [pc, #192]	@ (80008e8 <MX_TIM16_Init+0xec>)
 8000826:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 199;
 8000828:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 800082a:	22c7      	movs	r2, #199	@ 0xc7
 800082c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000836:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800083a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000850:	f002 f96e 	bl	8002b30 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800085a:	f000 f8ef 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800085e:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000860:	f002 fa96 	bl	8002d90 <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800086a:	f000 f8e7 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	@ 0x60
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088e:	2200      	movs	r2, #0
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 8000894:	f002 fee6 	bl	8003664 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800089e:	f000 f8cd 	bl	8000a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 80008c6:	f003 feef 	bl	80046a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80008d0:	f000 f8b4 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM16_Init+0xe8>)
 80008d6:	f000 f93b 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3748      	adds	r7, #72	@ 0x48
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	40014400 	.word	0x40014400

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f003 ff56 	bl	80047e0 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f87f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000110 	.word	0x20000110
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a2a      	ldr	r2, [pc, #168]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_GPIO_Init+0xc4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ca:	f000 fd47 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0xc8>)
 80009e6:	f000 fb8f 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f000 fb80 	bl	8001108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000800 	.word	0x48000800

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 fa6b 	bl	8000f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a24      	ldr	r2, [pc, #144]	@ (8000b40 <HAL_TIM_Base_MspInit+0xb0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d128      	bne.n	8000b04 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ab2:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000ab8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae2:	2340      	movs	r3, #64	@ 0x40
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000af2:	2303      	movs	r3, #3
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_TIM_Base_MspInit+0xb8>)
 8000afe:	f000 fb03 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b02:	e018      	b.n	8000b36 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <HAL_TIM_Base_MspInit+0xbc>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb4>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fac2 	bl	80010b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f000 fadb 	bl	80010ec <HAL_NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40013400 	.word	0x40013400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	40014400 	.word	0x40014400

08000b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_TIM_MspPostInit+0x64>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d11c      	bne.n	8000bac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_TIM_MspPostInit+0x68>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_TIM_MspPostInit+0x68>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_TIM_MspPostInit+0x68>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	@ 0x40
 8000b8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f000 faae 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40014400 	.word	0x40014400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2288      	movs	r2, #136	@ 0x88
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fbdf 	bl	80053a0 <memset>
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <HAL_UART_MspInit+0xb0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d13b      	bne.n	8000c64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fadd 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff ff1a 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c50:	2307      	movs	r3, #7
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f000 fa52 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	37b0      	adds	r7, #176	@ 0xb0
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c82:	4b2f      	ldr	r3, [pc, #188]	@ (8000d40 <HAL_InitTick+0xcc>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	4a2e      	ldr	r2, [pc, #184]	@ (8000d40 <HAL_InitTick+0xcc>)
 8000c88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <HAL_InitTick+0xcc>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9a:	f107 020c 	add.w	r2, r7, #12
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f9f5 	bl	8002094 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000caa:	f001 f9dd 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <HAL_InitTick+0xd0>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9b      	lsrs	r3, r3, #18
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <HAL_InitTick+0xd8>)
 8000cc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ce8:	4817      	ldr	r0, [pc, #92]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cea:	f001 ff21 	bl	8002b30 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d11b      	bne.n	8000d34 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cfc:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <HAL_InitTick+0xd4>)
 8000cfe:	f001 ffd7 	bl	8002cb0 <HAL_TIM_Base_Start_IT>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d111      	bne.n	8000d34 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 f9eb 	bl	80010ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d808      	bhi.n	8000d2e <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2019      	movs	r0, #25
 8000d22:	f000 f9c7 	bl	80010b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_InitTick+0xdc>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e002      	b.n	8000d34 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3730      	adds	r7, #48	@ 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	431bde83 	.word	0x431bde83
 8000d48:	2000019c 	.word	0x2000019c
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	20000004 	.word	0x20000004

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <TIM1_UP_TIM16_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000dc2:	f002 faab 	bl	800331c <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 8000dc6:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <TIM1_UP_TIM16_IRQHandler+0x28>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <TIM1_UP_TIM16_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim16);
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <TIM1_UP_TIM16_IRQHandler+0x28>)
 8000dd0:	f002 faa4 	bl	800331c <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000019c 	.word	0x2000019c
 8000ddc:	200000c4 	.word	0x200000c4

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 face 	bl	80053b0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20018000 	.word	0x20018000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001e8 	.word	0x200001e8
 8000e48:	20000338 	.word	0x20000338

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	@ (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	@ (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fa8d 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fb65 	bl	8000570 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eb4:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8000eb8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ebc:	20000338 	.word	0x20000338

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_Init+0x3c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_Init+0x3c>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f8df 	bl	800109e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee0:	200f      	movs	r0, #15
 8000ee2:	f7ff fec7 	bl	8000c74 <HAL_InitTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	e001      	b.n	8000ef6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef2:	f7ff fda9 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	200001ec 	.word	0x200001ec

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001ec 	.word	0x200001ec

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff4c 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c6:	f7ff ff61 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6978      	ldr	r0, [r7, #20]
 80010d2:	f7ff ffb1 	bl	8001038 <NVIC_EncodePriority>
 80010d6:	4602      	mov	r2, r0
 80010d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff80 	bl	8000fe4 <__NVIC_SetPriority>
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff54 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e17f      	b.n	8001418 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8171 	beq.w	8001412 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d005      	beq.n	8001148 <HAL_GPIO_Init+0x40>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 0201 	and.w	r2, r3, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d118      	bne.n	80011e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	6939      	ldr	r1, [r7, #16]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80ac 	beq.w	8001412 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001438 <HAL_GPIO_Init+0x330>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	4a5e      	ldr	r2, [pc, #376]	@ (8001438 <HAL_GPIO_Init+0x330>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001438 <HAL_GPIO_Init+0x330>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d2:	4a5a      	ldr	r2, [pc, #360]	@ (800143c <HAL_GPIO_Init+0x334>)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x242>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	@ (8001440 <HAL_GPIO_Init+0x338>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x23e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4e      	ldr	r2, [pc, #312]	@ (8001444 <HAL_GPIO_Init+0x33c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x23a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4d      	ldr	r2, [pc, #308]	@ (8001448 <HAL_GPIO_Init+0x340>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x236>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4c      	ldr	r2, [pc, #304]	@ (800144c <HAL_GPIO_Init+0x344>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x232>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	@ (8001450 <HAL_GPIO_Init+0x348>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x22e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4a      	ldr	r2, [pc, #296]	@ (8001454 <HAL_GPIO_Init+0x34c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x22a>
 800132e:	2306      	movs	r3, #6
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x244>
 8001332:	2307      	movs	r3, #7
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x244>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x244>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x244>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x244>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x244>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x244>
 800134a:	2300      	movs	r3, #0
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135c:	4937      	ldr	r1, [pc, #220]	@ (800143c <HAL_GPIO_Init+0x334>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <HAL_GPIO_Init+0x350>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_GPIO_Init+0x350>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <HAL_GPIO_Init+0x350>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_GPIO_Init+0x350>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_GPIO_Init+0x350>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_GPIO_Init+0x350>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x350>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_GPIO_Init+0x350>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae78 	bne.w	8001118 <HAL_GPIO_Init+0x10>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	48001000 	.word	0x48001000
 8001450:	48001400 	.word	0x48001400
 8001454:	48001800 	.word	0x48001800
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001478:	e002      	b.n	8001480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014b6:	d130      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c4:	d038      	beq.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2232      	movs	r2, #50	@ 0x32
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0c9b      	lsrs	r3, r3, #18
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ec:	e002      	b.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001500:	d102      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f2      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001514:	d110      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e00f      	b.n	800153a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001526:	d007      	beq.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40007000 	.word	0x40007000
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83

08001554 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e3ca      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001566:	4b97      	ldr	r3, [pc, #604]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001570:	4b94      	ldr	r3, [pc, #592]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80e4 	beq.w	8001750 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_RCC_OscConfig+0x4a>
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	f040 808b 	bne.w	80016ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	f040 8087 	bne.w	80016ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x62>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e3a2      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	4b82      	ldr	r3, [pc, #520]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_RCC_OscConfig+0x7c>
 80015c6:	4b7f      	ldr	r3, [pc, #508]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ce:	e005      	b.n	80015dc <HAL_RCC_OscConfig+0x88>
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015dc:	4293      	cmp	r3, r2
 80015de:	d223      	bcs.n	8001628 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fd87 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e383      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f4:	4b73      	ldr	r3, [pc, #460]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a72      	ldr	r2, [pc, #456]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b70      	ldr	r3, [pc, #448]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	496d      	ldr	r1, [pc, #436]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001612:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	4968      	ldr	r1, [pc, #416]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
 8001626:	e025      	b.n	8001674 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001628:	4b66      	ldr	r3, [pc, #408]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a65      	ldr	r2, [pc, #404]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b63      	ldr	r3, [pc, #396]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4960      	ldr	r1, [pc, #384]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001646:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	495b      	ldr	r1, [pc, #364]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d109      	bne.n	8001674 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fd47 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e343      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001674:	f000 fc4a 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b52      	ldr	r3, [pc, #328]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4950      	ldr	r1, [pc, #320]	@ (80017c8 <HAL_RCC_OscConfig+0x274>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	4a4e      	ldr	r2, [pc, #312]	@ (80017cc <HAL_RCC_OscConfig+0x278>)
 8001692:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001694:	4b4e      	ldr	r3, [pc, #312]	@ (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff faeb 	bl	8000c74 <HAL_InitTick>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d052      	beq.n	800174e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	e327      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d032      	beq.n	800171a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b4:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a42      	ldr	r2, [pc, #264]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc34 	bl	8000f2c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc30 	bl	8000f2c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e310      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016da:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a36      	ldr	r2, [pc, #216]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4931      	ldr	r1, [pc, #196]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001704:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	492c      	ldr	r1, [pc, #176]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e01a      	b.n	8001750 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171a:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001726:	f7ff fc01 	bl	8000f2c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172e:	f7ff fbfd 	bl	8000f2c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e2dd      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001740:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x1da>
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d074      	beq.n	8001846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b08      	cmp	r3, #8
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x21a>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d10e      	bne.n	8001786 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d10b      	bne.n	8001786 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d064      	beq.n	8001844 <HAL_RCC_OscConfig+0x2f0>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d160      	bne.n	8001844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e2ba      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x24a>
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e026      	b.n	80017ec <HAL_RCC_OscConfig+0x298>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a6:	d115      	bne.n	80017d4 <HAL_RCC_OscConfig+0x280>
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a02      	ldr	r2, [pc, #8]	@ (80017c4 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x298>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08005cdc 	.word	0x08005cdc
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004
 80017d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb9a 	bl	8000f2c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb96 	bl	8000f2c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e276      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180e:	4b92      	ldr	r3, [pc, #584]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x2a8>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fb86 	bl	8000f2c <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fb82 	bl	8000f2c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e262      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001836:	4b88      	ldr	r3, [pc, #544]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x2d0>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d060      	beq.n	8001914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x310>
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d119      	bne.n	8001892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d116      	bne.n	8001892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	4b7c      	ldr	r3, [pc, #496]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x328>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e23f      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b76      	ldr	r3, [pc, #472]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	4973      	ldr	r1, [pc, #460]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	e040      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d023      	beq.n	80018e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189a:	4b6f      	ldr	r3, [pc, #444]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb41 	bl	8000f2c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb3d 	bl	8000f2c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e21d      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	4b65      	ldr	r3, [pc, #404]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	495f      	ldr	r1, [pc, #380]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e018      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb1d 	bl	8000f2c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb19 	bl	8000f2c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1f9      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001908:	4b53      	ldr	r3, [pc, #332]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001928:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff faf8 	bl	8000f2c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff faf4 	bl	8000f2c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1d4      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001952:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x3ec>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b3d      	ldr	r3, [pc, #244]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001968:	4a3b      	ldr	r2, [pc, #236]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fadb 	bl	8000f2c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fad7 	bl	8000f2c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1b7      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198c:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10d      	bne.n	80019d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	4a26      	ldr	r2, [pc, #152]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_RCC_OscConfig+0x508>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d118      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_RCC_OscConfig+0x508>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_RCC_OscConfig+0x508>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa9e 	bl	8000f2c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f4:	f7ff fa9a 	bl	8000f2c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e17a      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_RCC_OscConfig+0x508>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4d8>
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a2a:	e029      	b.n	8001a80 <HAL_RCC_OscConfig+0x52c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d115      	bne.n	8001a60 <HAL_RCC_OscConfig+0x50c>
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x52c>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	4b9c      	ldr	r3, [pc, #624]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a66:	4a9b      	ldr	r2, [pc, #620]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a70:	4b98      	ldr	r3, [pc, #608]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a76:	4a97      	ldr	r2, [pc, #604]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d016      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fa50 	bl	8000f2c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7ff fa4c 	bl	8000f2c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e12a      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ed      	beq.n	8001a90 <HAL_RCC_OscConfig+0x53c>
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fa39 	bl	8000f2c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fa35 	bl	8000f2c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e113      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ed      	bne.n	8001abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	4a79      	ldr	r2, [pc, #484]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80fe 	beq.w	8001cfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	f040 80d0 	bne.w	8001ca8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b08:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d130      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	3b01      	subs	r3, #1
 8001b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d127      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11f      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b48:	2a07      	cmp	r2, #7
 8001b4a:	bf14      	ite	ne
 8001b4c:	2201      	movne	r2, #1
 8001b4e:	2200      	moveq	r2, #0
 8001b50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d113      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d06e      	beq.n	8001c5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d069      	beq.n	8001c58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b84:	4b53      	ldr	r3, [pc, #332]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b90:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0ad      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bac:	f7ff f9be 	bl	8000f2c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f9ba 	bl	8000f2c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e09a      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc6:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd2:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b40      	ldr	r3, [pc, #256]	@ (8001cd8 <HAL_RCC_OscConfig+0x784>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001be2:	3a01      	subs	r2, #1
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bec:	0212      	lsls	r2, r2, #8
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bf4:	0852      	lsrs	r2, r2, #1
 8001bf6:	3a01      	subs	r2, #1
 8001bf8:	0552      	lsls	r2, r2, #21
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c00:	0852      	lsrs	r2, r2, #1
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0652      	lsls	r2, r2, #25
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c0c:	0912      	lsrs	r2, r2, #4
 8001c0e:	0452      	lsls	r2, r2, #17
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4930      	ldr	r1, [pc, #192]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c30:	f7ff f97c 	bl	8000f2c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f978 	bl	8000f2c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c56:	e050      	b.n	8001cfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04f      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d148      	bne.n	8001cfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c74:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c80:	f7ff f954 	bl	8000f2c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f950 	bl	8000f2c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e030      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x734>
 8001ca6:	e028      	b.n	8001cfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d023      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f937 	bl	8000f2c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc0:	e00c      	b.n	8001cdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f933 	bl	8000f2c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d905      	bls.n	8001cdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e013      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_OscConfig+0x7b0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ec      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x7b0>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4905      	ldr	r1, [pc, #20]	@ (8001d04 <HAL_RCC_OscConfig+0x7b0>)
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_RCC_OscConfig+0x7b4>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
 8001cf4:	e001      	b.n	8001cfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	feeefffc 	.word	0xfeeefffc

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0e7      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4970      	ldr	r1, [pc, #448]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cf      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d908      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4960      	ldr	r1, [pc, #384]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04c      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0a6      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e09a      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e08e      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e086      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4943      	ldr	r1, [pc, #268]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f89a 	bl	8000f2c <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff f896 	bl	8000f2c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e06e      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d208      	bcs.n	8001e52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	492b      	ldr	r1, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e52:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d210      	bcs.n	8001e82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 0207 	bic.w	r2, r3, #7
 8001e68:	4923      	ldr	r1, [pc, #140]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e036      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4918      	ldr	r1, [pc, #96]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4910      	ldr	r1, [pc, #64]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec0:	f000 f824 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	490b      	ldr	r1, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1fc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fec5 	bl	8000c74 <HAL_InitTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08005cdc 	.word	0x08005cdc
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f24:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d11e      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f4c:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10d      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	e004      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d134      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d003      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fb0:	e005      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb4:	617b      	str	r3, [r7, #20]
      break;
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fba:	617b      	str	r3, [r7, #20]
      break;
 8001fbc:	e002      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0e5b      	lsrs	r3, r3, #25
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	08005cf4 	.word	0x08005cf4
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4904      	ldr	r1, [pc, #16]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	08005cec 	.word	0x08005cec

08002068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800206c:	f7ff ffda 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0adb      	lsrs	r3, r3, #11
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4904      	ldr	r1, [pc, #16]	@ (8002090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08005cec 	.word	0x08005cec

08002094 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	220f      	movs	r2, #15
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_RCC_GetClockConfig+0x60>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0207 	and.w	r2, r3, #7
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40022000 	.word	0x40022000

080020f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002104:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9bc 	bl	800148c <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
 8002116:	e014      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	@ 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f9ac 	bl	800148c <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002148:	d10b      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d919      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2ba0      	cmp	r3, #160	@ 0xa0
 8002154:	d902      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e013      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e010      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	@ 0x80
 8002166:	d902      	bls.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002168:	2303      	movs	r3, #3
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	@ 0x80
 8002172:	d102      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	@ 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d041      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021dc:	d02a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021e2:	d824      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021ee:	d81e      	bhi.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021f8:	d010      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fa:	e018      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021fc:	4b86      	ldr	r3, [pc, #536]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a85      	ldr	r2, [pc, #532]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002206:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002208:	e015      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fabb 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221a:	e00c      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3320      	adds	r3, #32
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fba6 	bl	8002974 <RCCEx_PLLSAI2_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	74fb      	strb	r3, [r7, #19]
      break;
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800224a:	4973      	ldr	r1, [pc, #460]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002252:	e001      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d041      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002268:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800226c:	d02a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800226e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002272:	d824      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800227e:	d81e      	bhi.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002288:	d010      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800228a:	e018      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800228c:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a61      	ldr	r2, [pc, #388]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002296:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002298:	e015      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fa73 	bl	800278c <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022aa:	e00c      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3320      	adds	r3, #32
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fb5e 	bl	8002974 <RCCEx_PLLSAI2_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022bc:	e003      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	74fb      	strb	r3, [r7, #19]
      break;
 80022c2:	e000      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022cc:	4b52      	ldr	r3, [pc, #328]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022da:	494f      	ldr	r1, [pc, #316]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022e2:	e001      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a0 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fa:	4b47      	ldr	r3, [pc, #284]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	4a40      	ldr	r2, [pc, #256]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	@ 0x58
 800231c:	4b3e      	ldr	r3, [pc, #248]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232c:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3a      	ldr	r2, [pc, #232]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002338:	f7fe fdf8 	bl	8000f2c <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233e:	e009      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002340:	f7fe fdf4 	bl	8000f2c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	74fb      	strb	r3, [r7, #19]
        break;
 8002352:	e005      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002354:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002366:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01f      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d019      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800238e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	4a20      	ldr	r2, [pc, #128]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe fdb3 	bl	8000f2c <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c8:	e00b      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fdaf 	bl	8000f2c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d902      	bls.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	74fb      	strb	r3, [r7, #19]
            break;
 80023e0:	e006      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ec      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002406:	4904      	ldr	r1, [pc, #16]	@ (8002418 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800240e:	e009      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
 8002414:	e006      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002424:	7c7b      	ldrb	r3, [r7, #17]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b9e      	ldr	r3, [pc, #632]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	4a9d      	ldr	r2, [pc, #628]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b98      	ldr	r3, [pc, #608]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f023 0203 	bic.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002450:	4994      	ldr	r1, [pc, #592]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002464:	4b8f      	ldr	r3, [pc, #572]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f023 020c 	bic.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	498c      	ldr	r1, [pc, #560]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002486:	4b87      	ldr	r3, [pc, #540]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4983      	ldr	r1, [pc, #524]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a8:	4b7e      	ldr	r3, [pc, #504]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	497b      	ldr	r1, [pc, #492]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d8:	4972      	ldr	r1, [pc, #456]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ec:	4b6d      	ldr	r3, [pc, #436]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	496a      	ldr	r1, [pc, #424]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002514:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	4961      	ldr	r1, [pc, #388]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002530:	4b5c      	ldr	r3, [pc, #368]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253e:	4959      	ldr	r1, [pc, #356]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002552:	4b54      	ldr	r3, [pc, #336]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002558:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002560:	4950      	ldr	r1, [pc, #320]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002574:	4b4b      	ldr	r3, [pc, #300]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	4948      	ldr	r1, [pc, #288]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002596:	4b43      	ldr	r3, [pc, #268]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	493f      	ldr	r1, [pc, #252]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b8:	4b3a      	ldr	r3, [pc, #232]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c6:	4937      	ldr	r1, [pc, #220]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025d6:	d106      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d8:	4b32      	ldr	r3, [pc, #200]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a31      	ldr	r2, [pc, #196]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025e2:	60d3      	str	r3, [r2, #12]
 80025e4:	e011      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ee:	d10c      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f8c8 	bl	800278c <RCCEx_PLLSAI1_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d028      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002616:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002624:	491f      	ldr	r1, [pc, #124]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002630:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002634:	d106      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a1a      	ldr	r2, [pc, #104]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002640:	60d3      	str	r3, [r2, #12]
 8002642:	e011      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800264c:	d10c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f899 	bl	800278c <RCCEx_PLLSAI1_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02b      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002692:	d109      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a02      	ldr	r2, [pc, #8]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
 80026a0:	e014      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f867 	bl	800278c <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d02f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026e6:	4928      	ldr	r1, [pc, #160]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026f6:	d10d      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	2102      	movs	r1, #2
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f844 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
 8002712:	e011      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800271c:	d10c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3320      	adds	r3, #32
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f925 	bl	8002974 <RCCEx_PLLSAI2_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002744:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002752:	490d      	ldr	r1, [pc, #52]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002776:	4904      	ldr	r1, [pc, #16]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800277e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279a:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027a6:	4b72      	ldr	r3, [pc, #456]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027be:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
       ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d047      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d018      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0x86>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d825      	bhi.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0x62>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d009      	beq.n	8002800 <RCCEx_PLLSAI1_Config+0x74>
 80027ec:	e020      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ee:	4b60      	ldr	r3, [pc, #384]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e01a      	b.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002800:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e013      	b.n	800283a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002812:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281e:	4b54      	ldr	r3, [pc, #336]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282e:	e006      	b.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e004      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	430b      	orrs	r3, r1
 800285c:	4944      	ldr	r1, [pc, #272]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d17d      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe fb5a 	bl	8000f2c <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800287c:	f7fe fb56 	bl	8000f2c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
        break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002890:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ef      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d160      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a8:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0912      	lsrs	r2, r2, #4
 80028c0:	0452      	lsls	r2, r2, #17
 80028c2:	430a      	orrs	r2, r1
 80028c4:	492a      	ldr	r1, [pc, #168]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	610b      	str	r3, [r1, #16]
 80028ca:	e027      	b.n	800291c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d112      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d2:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	0211      	lsls	r1, r2, #8
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6912      	ldr	r2, [r2, #16]
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0552      	lsls	r2, r2, #21
 80028ee:	430a      	orrs	r2, r1
 80028f0:	491f      	ldr	r1, [pc, #124]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	610b      	str	r3, [r1, #16]
 80028f6:	e011      	b.n	800291c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002900:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6952      	ldr	r2, [r2, #20]
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	3a01      	subs	r2, #1
 8002912:	0652      	lsls	r2, r2, #25
 8002914:	430a      	orrs	r2, r1
 8002916:	4916      	ldr	r1, [pc, #88]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002926:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fb00 	bl	8000f2c <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292e:	e009      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002930:	f7fe fafc 	bl	8000f2c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
          break;
 8002942:	e005      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4904      	ldr	r1, [pc, #16]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000

08002974 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002982:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800298e:	4b67      	ldr	r3, [pc, #412]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
       ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029a6:	4b61      	ldr	r3, [pc, #388]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
       ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d047      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d018      	beq.n	80029fa <RCCEx_PLLSAI2_Config+0x86>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d825      	bhi.n	8002a18 <RCCEx_PLLSAI2_Config+0xa4>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RCCEx_PLLSAI2_Config+0x62>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d009      	beq.n	80029e8 <RCCEx_PLLSAI2_Config+0x74>
 80029d4:	e020      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d6:	4b55      	ldr	r3, [pc, #340]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e01a      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e8:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e013      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fa:	4b4c      	ldr	r3, [pc, #304]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a06:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a16:	e006      	b.n	8002a26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e004      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	430b      	orrs	r3, r1
 8002a44:	4939      	ldr	r1, [pc, #228]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d167      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a35      	ldr	r2, [pc, #212]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fa66 	bl	8000f2c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a64:	f7fe fa62 	bl	8000f2c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
        break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a78:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ef      	bne.n	8002a64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d14a      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a90:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	0912      	lsrs	r2, r2, #4
 8002aa8:	0452      	lsls	r2, r2, #17
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	491f      	ldr	r1, [pc, #124]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	614b      	str	r3, [r1, #20]
 8002ab2:	e011      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002abc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	0211      	lsls	r1, r2, #8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	0852      	lsrs	r2, r2, #1
 8002acc:	3a01      	subs	r2, #1
 8002ace:	0652      	lsls	r2, r2, #25
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	4916      	ldr	r1, [pc, #88]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fa22 	bl	8000f2c <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aec:	f7fe fa1e 	bl	8000f2c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
          break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b00:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4904      	ldr	r1, [pc, #16]	@ (8002b2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e049      	b.n	8002bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd ff9a 	bl	8000a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 ff3a 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d001      	beq.n	8002bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e047      	b.n	8002c88 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a23      	ldr	r2, [pc, #140]	@ (8002c94 <HAL_TIM_Base_Start+0xb4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c12:	d018      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <HAL_TIM_Base_Start+0xb8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_TIM_Base_Start+0xbc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <HAL_TIM_Base_Start+0xc0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca4 <HAL_TIM_Base_Start+0xc4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIM_Base_Start+0x66>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <HAL_TIM_Base_Start+0xc8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <HAL_TIM_Base_Start+0xcc>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d015      	beq.n	8002c84 <HAL_TIM_Base_Start+0xa4>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5e:	d011      	beq.n	8002c84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	e008      	b.n	8002c84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e000      	b.n	8002c86 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	40000c00 	.word	0x40000c00
 8002ca4:	40013400 	.word	0x40013400
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	00010007 	.word	0x00010007

08002cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04f      	b.n	8002d68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1b      	ldr	r2, [pc, #108]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d115      	bne.n	8002d52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d015      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3e:	d011      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e008      	b.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e000      	b.n	8002d66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	00010007 	.word	0x00010007

08002d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e049      	b.n	8002e36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f841 	bl	8002e3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fe0a 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x24>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e03c      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x9e>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d109      	bne.n	8002e92 <HAL_TIM_PWM_Start+0x3e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e02f      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x9e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d109      	bne.n	8002eac <HAL_TIM_PWM_Start+0x58>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e022      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x9e>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d109      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x72>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e015      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x9e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d109      	bne.n	8002ee0 <HAL_TIM_PWM_Start+0x8c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e008      	b.n	8002ef2 <HAL_TIM_PWM_Start+0x9e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e09c      	b.n	8003034 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xb6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f08:	e023      	b.n	8002f52 <HAL_TIM_PWM_Start+0xfe>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIM_PWM_Start+0xc6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f18:	e01b      	b.n	8002f52 <HAL_TIM_PWM_Start+0xfe>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Start+0xd6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f28:	e013      	b.n	8002f52 <HAL_TIM_PWM_Start+0xfe>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Start+0xe6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f38:	e00b      	b.n	8002f52 <HAL_TIM_PWM_Start+0xfe>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0xf6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f48:	e003      	b.n	8002f52 <HAL_TIM_PWM_Start+0xfe>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 faf7 	bl	800454e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a35      	ldr	r2, [pc, #212]	@ (800303c <HAL_TIM_PWM_Start+0x1e8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x13e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a34      	ldr	r2, [pc, #208]	@ (8003040 <HAL_TIM_PWM_Start+0x1ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x13e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a32      	ldr	r2, [pc, #200]	@ (8003044 <HAL_TIM_PWM_Start+0x1f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x13e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a31      	ldr	r2, [pc, #196]	@ (8003048 <HAL_TIM_PWM_Start+0x1f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIM_PWM_Start+0x13e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800304c <HAL_TIM_PWM_Start+0x1f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x142>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_TIM_PWM_Start+0x144>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	@ (800303c <HAL_TIM_PWM_Start+0x1e8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbe:	d018      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	@ (8003050 <HAL_TIM_PWM_Start+0x1fc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a21      	ldr	r2, [pc, #132]	@ (8003054 <HAL_TIM_PWM_Start+0x200>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <HAL_TIM_PWM_Start+0x204>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a17      	ldr	r2, [pc, #92]	@ (8003040 <HAL_TIM_PWM_Start+0x1ec>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0x19e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <HAL_TIM_PWM_Start+0x1f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d115      	bne.n	800301e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	4b18      	ldr	r3, [pc, #96]	@ (800305c <HAL_TIM_PWM_Start+0x208>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d015      	beq.n	8003030 <HAL_TIM_PWM_Start+0x1dc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300a:	d011      	beq.n	8003030 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	e008      	b.n	8003030 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e000      	b.n	8003032 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	00010007 	.word	0x00010007

08003060 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e049      	b.n	8003106 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f841 	bl	800310e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f000 fca2 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_TIM_IC_Start+0x1a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e023      	b.n	8003186 <HAL_TIM_IC_Start+0x62>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d104      	bne.n	800314e <HAL_TIM_IC_Start+0x2a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e01b      	b.n	8003186 <HAL_TIM_IC_Start+0x62>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d104      	bne.n	800315e <HAL_TIM_IC_Start+0x3a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e013      	b.n	8003186 <HAL_TIM_IC_Start+0x62>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	d104      	bne.n	800316e <HAL_TIM_IC_Start+0x4a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e00b      	b.n	8003186 <HAL_TIM_IC_Start+0x62>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b10      	cmp	r3, #16
 8003172:	d104      	bne.n	800317e <HAL_TIM_IC_Start+0x5a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e003      	b.n	8003186 <HAL_TIM_IC_Start+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003184:	b2db      	uxtb	r3, r3
 8003186:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_TIM_IC_Start+0x74>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e013      	b.n	80031c0 <HAL_TIM_IC_Start+0x9c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d104      	bne.n	80031a8 <HAL_TIM_IC_Start+0x84>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e00b      	b.n	80031c0 <HAL_TIM_IC_Start+0x9c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d104      	bne.n	80031b8 <HAL_TIM_IC_Start+0x94>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e003      	b.n	80031c0 <HAL_TIM_IC_Start+0x9c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80031c8:	7bbb      	ldrb	r3, [r7, #14]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e092      	b.n	80032f8 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_IC_Start+0xbe>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e0:	e023      	b.n	800322a <HAL_TIM_IC_Start+0x106>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Start+0xce>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f0:	e01b      	b.n	800322a <HAL_TIM_IC_Start+0x106>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start+0xde>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003200:	e013      	b.n	800322a <HAL_TIM_IC_Start+0x106>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	d104      	bne.n	8003212 <HAL_TIM_IC_Start+0xee>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003210:	e00b      	b.n	800322a <HAL_TIM_IC_Start+0x106>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b10      	cmp	r3, #16
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start+0xfe>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	e003      	b.n	800322a <HAL_TIM_IC_Start+0x106>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_TIM_IC_Start+0x116>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003238:	e013      	b.n	8003262 <HAL_TIM_IC_Start+0x13e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d104      	bne.n	800324a <HAL_TIM_IC_Start+0x126>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003248:	e00b      	b.n	8003262 <HAL_TIM_IC_Start+0x13e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d104      	bne.n	800325a <HAL_TIM_IC_Start+0x136>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003258:	e003      	b.n	8003262 <HAL_TIM_IC_Start+0x13e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	6839      	ldr	r1, [r7, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f96f 	bl	800454e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	@ (8003300 <HAL_TIM_IC_Start+0x1dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003282:	d018      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1e      	ldr	r2, [pc, #120]	@ (8003304 <HAL_TIM_IC_Start+0x1e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <HAL_TIM_IC_Start+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1b      	ldr	r2, [pc, #108]	@ (800330c <HAL_TIM_IC_Start+0x1e8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_TIM_IC_Start+0x1ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_IC_Start+0x192>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_TIM_IC_Start+0x1f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d115      	bne.n	80032e2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <HAL_TIM_IC_Start+0x1f4>)
 80032be:	4013      	ands	r3, r2
 80032c0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d015      	beq.n	80032f4 <HAL_TIM_IC_Start+0x1d0>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ce:	d011      	beq.n	80032f4 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	e008      	b.n	80032f4 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e000      	b.n	80032f6 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40013400 	.word	0x40013400
 8003314:	40014000 	.word	0x40014000
 8003318:	00010007 	.word	0x00010007

0800331c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01b      	beq.n	8003380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fb20 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fb12 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb23 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d020      	beq.n	80033cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0204 	mvn.w	r2, #4
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fafa 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 faec 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fafd 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d020      	beq.n	8003418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01b      	beq.n	8003418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0208 	mvn.w	r2, #8
 80033e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2204      	movs	r2, #4
 80033ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fad4 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fac6 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fad7 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2208      	movs	r2, #8
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 faae 	bl	80039ac <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 faa0 	bl	8003998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fab1 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fac8 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00c      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80034ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f001 f981 	bl	80047b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00c      	beq.n	80034da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f001 f979 	bl	80047cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00c      	beq.n	80034fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa6b 	bl	80039d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0220 	mvn.w	r2, #32
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f001 f941 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003544:	2302      	movs	r3, #2
 8003546:	e088      	b.n	800365a <HAL_TIM_IC_ConfigChannel+0x130>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11b      	bne.n	800358e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003566:	f000 fe4f 	bl	8004208 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 020c 	bic.w	r2, r2, #12
 8003578:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6999      	ldr	r1, [r3, #24]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	619a      	str	r2, [r3, #24]
 800358c:	e060      	b.n	8003650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d11c      	bne.n	80035ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035a4:	f000 fecd 	bl	8004342 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80035b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e040      	b.n	8003650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80035e4:	f000 ff1a 	bl	800441c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020c 	bic.w	r2, r2, #12
 80035f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69d9      	ldr	r1, [r3, #28]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	61da      	str	r2, [r3, #28]
 800360a:	e021      	b.n	8003650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d11c      	bne.n	800364c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003622:	f000 ff37 	bl	8004494 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003634:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e001      	b.n	8003650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800367e:	2302      	movs	r3, #2
 8003680:	e0ff      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b14      	cmp	r3, #20
 800368e:	f200 80f0 	bhi.w	8003872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003692:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003873 	.word	0x08003873
 80036a0:	08003873 	.word	0x08003873
 80036a4:	08003873 	.word	0x08003873
 80036a8:	0800372d 	.word	0x0800372d
 80036ac:	08003873 	.word	0x08003873
 80036b0:	08003873 	.word	0x08003873
 80036b4:	08003873 	.word	0x08003873
 80036b8:	0800376f 	.word	0x0800376f
 80036bc:	08003873 	.word	0x08003873
 80036c0:	08003873 	.word	0x08003873
 80036c4:	08003873 	.word	0x08003873
 80036c8:	080037af 	.word	0x080037af
 80036cc:	08003873 	.word	0x08003873
 80036d0:	08003873 	.word	0x08003873
 80036d4:	08003873 	.word	0x08003873
 80036d8:	080037f1 	.word	0x080037f1
 80036dc:	08003873 	.word	0x08003873
 80036e0:	08003873 	.word	0x08003873
 80036e4:	08003873 	.word	0x08003873
 80036e8:	08003831 	.word	0x08003831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa1e 	bl	8003b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
      break;
 800372a:	e0a5      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fa8e 	bl	8003c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	619a      	str	r2, [r3, #24]
      break;
 800376c:	e084      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 faf7 	bl	8003d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0208 	orr.w	r2, r2, #8
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0204 	bic.w	r2, r2, #4
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
      break;
 80037ac:	e064      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb5f 	bl	8003e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	021a      	lsls	r2, r3, #8
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	61da      	str	r2, [r3, #28]
      break;
 80037ee:	e043      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fba8 	bl	8003f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800382e:	e023      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fbec 	bl	8004014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800384a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003870:	e002      	b.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
      break;
 8003876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop

0800388c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e031      	b.n	8003908 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fc12 	bl	80040e0 <TIM_SlaveTimer_SetConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e018      	b.n	8003908 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d831      	bhi.n	8003988 <HAL_TIM_ReadCapturedValue+0x78>
 8003924:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003961 	.word	0x08003961
 8003930:	08003989 	.word	0x08003989
 8003934:	08003989 	.word	0x08003989
 8003938:	08003989 	.word	0x08003989
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003989 	.word	0x08003989
 8003944:	08003989 	.word	0x08003989
 8003948:	08003989 	.word	0x08003989
 800394c:	08003975 	.word	0x08003975
 8003950:	08003989 	.word	0x08003989
 8003954:	08003989 	.word	0x08003989
 8003958:	08003989 	.word	0x08003989
 800395c:	0800397f 	.word	0x0800397f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	60fb      	str	r3, [r7, #12]

      break;
 8003968:	e00f      	b.n	800398a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	60fb      	str	r3, [r7, #12]

      break;
 8003972:	e00a      	b.n	800398a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	60fb      	str	r3, [r7, #12]

      break;
 800397c:	e005      	b.n	800398a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	60fb      	str	r3, [r7, #12]

      break;
 8003986:	e000      	b.n	800398a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003988:	bf00      	nop
  }

  return tmpreg;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a46      	ldr	r2, [pc, #280]	@ (8003b14 <TIM_Base_SetConfig+0x12c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a43      	ldr	r2, [pc, #268]	@ (8003b18 <TIM_Base_SetConfig+0x130>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <TIM_Base_SetConfig+0x134>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a41      	ldr	r2, [pc, #260]	@ (8003b20 <TIM_Base_SetConfig+0x138>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a40      	ldr	r2, [pc, #256]	@ (8003b24 <TIM_Base_SetConfig+0x13c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a35      	ldr	r2, [pc, #212]	@ (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a48:	d01b      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a32      	ldr	r2, [pc, #200]	@ (8003b18 <TIM_Base_SetConfig+0x130>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d017      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a31      	ldr	r2, [pc, #196]	@ (8003b1c <TIM_Base_SetConfig+0x134>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a30      	ldr	r2, [pc, #192]	@ (8003b20 <TIM_Base_SetConfig+0x138>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2f      	ldr	r2, [pc, #188]	@ (8003b24 <TIM_Base_SetConfig+0x13c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b28 <TIM_Base_SetConfig+0x140>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <TIM_Base_SetConfig+0x144>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b30 <TIM_Base_SetConfig+0x148>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0xf8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <TIM_Base_SetConfig+0x13c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0xf8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <TIM_Base_SetConfig+0x140>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <TIM_Base_SetConfig+0x144>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0xf8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a15      	ldr	r2, [pc, #84]	@ (8003b30 <TIM_Base_SetConfig+0x148>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f023 0201 	bic.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]
  }
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 0201 	bic.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 0302 	bic.w	r3, r3, #2
 8003b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c40 <TIM_OC1_SetConfig+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00f      	beq.n	8003bb4 <TIM_OC1_SetConfig+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2b      	ldr	r2, [pc, #172]	@ (8003c44 <TIM_OC1_SetConfig+0x110>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_OC1_SetConfig+0x80>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c48 <TIM_OC1_SetConfig+0x114>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_OC1_SetConfig+0x80>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a29      	ldr	r2, [pc, #164]	@ (8003c4c <TIM_OC1_SetConfig+0x118>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC1_SetConfig+0x80>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a28      	ldr	r2, [pc, #160]	@ (8003c50 <TIM_OC1_SetConfig+0x11c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10c      	bne.n	8003bce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0308 	bic.w	r3, r3, #8
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <TIM_OC1_SetConfig+0x10c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xc2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c44 <TIM_OC1_SetConfig+0x110>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xc2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <TIM_OC1_SetConfig+0x114>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xc2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <TIM_OC1_SetConfig+0x118>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xc2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <TIM_OC1_SetConfig+0x11c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40013400 	.word	0x40013400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800

08003c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0320 	bic.w	r3, r3, #32
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <TIM_OC2_SetConfig+0x100>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC2_SetConfig+0x6c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <TIM_OC2_SetConfig+0x104>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <TIM_OC2_SetConfig+0x100>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_OC2_SetConfig+0xb0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <TIM_OC2_SetConfig+0x104>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <TIM_OC2_SetConfig+0xb0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <TIM_OC2_SetConfig+0x108>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_OC2_SetConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <TIM_OC2_SetConfig+0x10c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_OC2_SetConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a19      	ldr	r2, [pc, #100]	@ (8003d64 <TIM_OC2_SetConfig+0x110>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40013400 	.word	0x40013400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800

08003d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	@ (8003e64 <TIM_OC3_SetConfig+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x6a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <TIM_OC3_SetConfig+0x100>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <TIM_OC3_SetConfig+0xfc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00f      	beq.n	8003e16 <TIM_OC3_SetConfig+0xae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <TIM_OC3_SetConfig+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00b      	beq.n	8003e16 <TIM_OC3_SetConfig+0xae>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1a      	ldr	r2, [pc, #104]	@ (8003e6c <TIM_OC3_SetConfig+0x104>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <TIM_OC3_SetConfig+0xae>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <TIM_OC3_SetConfig+0x108>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0xae>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <TIM_OC3_SetConfig+0x10c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d113      	bne.n	8003e3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40013400 	.word	0x40013400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800

08003e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <TIM_OC4_SetConfig+0xc0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_OC4_SetConfig+0x84>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <TIM_OC4_SetConfig+0xc4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_OC4_SetConfig+0x84>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <TIM_OC4_SetConfig+0xc8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_OC4_SetConfig+0x84>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <TIM_OC4_SetConfig+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC4_SetConfig+0x84>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <TIM_OC4_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d109      	bne.n	8003f10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <TIM_OC5_SetConfig+0xb4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00f      	beq.n	8003fc6 <TIM_OC5_SetConfig+0x7a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <TIM_OC5_SetConfig+0xb8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <TIM_OC5_SetConfig+0x7a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <TIM_OC5_SetConfig+0xbc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <TIM_OC5_SetConfig+0x7a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <TIM_OC5_SetConfig+0xc0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_OC5_SetConfig+0x7a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <TIM_OC5_SetConfig+0xc4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d109      	bne.n	8003fda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800

08004014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800405a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	051b      	lsls	r3, r3, #20
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <TIM_OC6_SetConfig+0xb8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00f      	beq.n	8004090 <TIM_OC6_SetConfig+0x7c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a17      	ldr	r2, [pc, #92]	@ (80040d0 <TIM_OC6_SetConfig+0xbc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_OC6_SetConfig+0x7c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <TIM_OC6_SetConfig+0xc0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_OC6_SetConfig+0x7c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <TIM_OC6_SetConfig+0xc4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC6_SetConfig+0x7c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <TIM_OC6_SetConfig+0xc8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d109      	bne.n	80040a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	029b      	lsls	r3, r3, #10
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b70      	cmp	r3, #112	@ 0x70
 800412c:	d01a      	beq.n	8004164 <TIM_SlaveTimer_SetConfig+0x84>
 800412e:	2b70      	cmp	r3, #112	@ 0x70
 8004130:	d860      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 8004132:	2b60      	cmp	r3, #96	@ 0x60
 8004134:	d054      	beq.n	80041e0 <TIM_SlaveTimer_SetConfig+0x100>
 8004136:	2b60      	cmp	r3, #96	@ 0x60
 8004138:	d85c      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 800413a:	2b50      	cmp	r3, #80	@ 0x50
 800413c:	d046      	beq.n	80041cc <TIM_SlaveTimer_SetConfig+0xec>
 800413e:	2b50      	cmp	r3, #80	@ 0x50
 8004140:	d858      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d019      	beq.n	800417a <TIM_SlaveTimer_SetConfig+0x9a>
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d854      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 800414a:	2b30      	cmp	r3, #48	@ 0x30
 800414c:	d055      	beq.n	80041fa <TIM_SlaveTimer_SetConfig+0x11a>
 800414e:	2b30      	cmp	r3, #48	@ 0x30
 8004150:	d850      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 8004152:	2b20      	cmp	r3, #32
 8004154:	d051      	beq.n	80041fa <TIM_SlaveTimer_SetConfig+0x11a>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d84c      	bhi.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04d      	beq.n	80041fa <TIM_SlaveTimer_SetConfig+0x11a>
 800415e:	2b10      	cmp	r3, #16
 8004160:	d04b      	beq.n	80041fa <TIM_SlaveTimer_SetConfig+0x11a>
 8004162:	e047      	b.n	80041f4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004174:	f000 f9cb 	bl	800450e <TIM_ETR_SetConfig>
      break;
 8004178:	e040      	b.n	80041fc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b05      	cmp	r3, #5
 8004180:	d101      	bne.n	8004186 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03b      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
      break;
 80041ca:	e017      	b.n	80041fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d8:	461a      	mov	r2, r3
 80041da:	f000 f883 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      break;
 80041de:	e00d      	b.n	80041fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ec:	461a      	mov	r2, r3
 80041ee:	f000 f8e5 	bl	80043bc <TIM_TI2_ConfigInputStage>
      break;
 80041f2:	e003      	b.n	80041fc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	e000      	b.n	80041fc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80041fa:	bf00      	nop
  }

  return status;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0201 	bic.w	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <TIM_TI1_SetConfig+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d017      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d013      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a23      	ldr	r2, [pc, #140]	@ (80042d0 <TIM_TI1_SetConfig+0xc8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <TIM_TI1_SetConfig+0xcc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a21      	ldr	r2, [pc, #132]	@ (80042d8 <TIM_TI1_SetConfig+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <TIM_TI1_SetConfig+0xd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_TI1_SetConfig+0x5e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <TIM_TI1_SetConfig+0xd8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <TIM_TI1_SetConfig+0x62>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <TIM_TI1_SetConfig+0x64>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0303 	bic.w	r3, r3, #3
 8004276:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e003      	b.n	800428a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	b2db      	uxtb	r3, r3
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f003 030a 	and.w	r3, r3, #10
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000

080042e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 030a 	bic.w	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	031b      	lsls	r3, r3, #12
 8004386:	b29b      	uxth	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0210 	bic.w	r2, r3, #16
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	031b      	lsls	r3, r3, #12
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004458:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	b2db      	uxtb	r3, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	031b      	lsls	r3, r3, #12
 80044d8:	b29b      	uxth	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	031b      	lsls	r3, r3, #12
 80044ec:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	021a      	lsls	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2201      	movs	r2, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	43db      	mvns	r3, r3
 8004570:	401a      	ands	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	431a      	orrs	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e068      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2d      	ldr	r2, [pc, #180]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d108      	bne.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004622:	d018      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1b      	ldr	r2, [pc, #108]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1a      	ldr	r2, [pc, #104]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40014000 	.word	0x40014000

080046a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e065      	b.n	8004790 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a16      	ldr	r2, [pc, #88]	@ (800479c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	051b      	lsls	r3, r3, #20
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e040      	b.n	8004874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc f9da 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fb6a 	bl	8004f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8af 	bl	8004990 <UART_SetConfig>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e01b      	b.n	8004874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800484a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800485a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fbe9 	bl	8005044 <UART_CheckIdleState>
 8004872:	4603      	mov	r3, r0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004890:	2b20      	cmp	r3, #32
 8004892:	d177      	bne.n	8004984 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Transmit+0x24>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e070      	b.n	8004986 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2221      	movs	r2, #33	@ 0x21
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fc fb3b 	bl	8000f2c <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d0:	d108      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e003      	b.n	80048ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048ec:	e02f      	b.n	800494e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	@ 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fc4b 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e03b      	b.n	8004986 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	881a      	ldrh	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	b292      	uxth	r2, r2
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3302      	adds	r3, #2
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e007      	b.n	800493c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1c9      	bne.n	80048ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2140      	movs	r1, #64	@ 0x40
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fc15 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e005      	b.n	8004986 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004994:	b08a      	sub	sp, #40	@ 0x28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4ba4      	ldr	r3, [pc, #656]	@ (8004c50 <UART_SetConfig+0x2c0>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a99      	ldr	r2, [pc, #612]	@ (8004c54 <UART_SetConfig+0x2c4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	4313      	orrs	r3, r2
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a90      	ldr	r2, [pc, #576]	@ (8004c58 <UART_SetConfig+0x2c8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d126      	bne.n	8004a68 <UART_SetConfig+0xd8>
 8004a1a:	4b90      	ldr	r3, [pc, #576]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d81b      	bhi.n	8004a60 <UART_SetConfig+0xd0>
 8004a28:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0xa0>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e116      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e112      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e10e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e10a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e106      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c60 <UART_SetConfig+0x2d0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d138      	bne.n	8004ae4 <UART_SetConfig+0x154>
 8004a72:	4b7a      	ldr	r3, [pc, #488]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d82d      	bhi.n	8004adc <UART_SetConfig+0x14c>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <UART_SetConfig+0xf8>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e0d8      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e0d4      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e0d0      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e0cc      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e0c8      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c64 <UART_SetConfig+0x2d4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d125      	bne.n	8004b3a <UART_SetConfig+0x1aa>
 8004aee:	4b5b      	ldr	r3, [pc, #364]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004af8:	2b30      	cmp	r3, #48	@ 0x30
 8004afa:	d016      	beq.n	8004b2a <UART_SetConfig+0x19a>
 8004afc:	2b30      	cmp	r3, #48	@ 0x30
 8004afe:	d818      	bhi.n	8004b32 <UART_SetConfig+0x1a2>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d00a      	beq.n	8004b1a <UART_SetConfig+0x18a>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d814      	bhi.n	8004b32 <UART_SetConfig+0x1a2>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <UART_SetConfig+0x182>
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d008      	beq.n	8004b22 <UART_SetConfig+0x192>
 8004b10:	e00f      	b.n	8004b32 <UART_SetConfig+0x1a2>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b18:	e0ad      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b20:	e0a9      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b22:	2304      	movs	r3, #4
 8004b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b28:	e0a5      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b30:	e0a1      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b32:	2310      	movs	r3, #16
 8004b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b38:	e09d      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c68 <UART_SetConfig+0x2d8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d125      	bne.n	8004b90 <UART_SetConfig+0x200>
 8004b44:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b50:	d016      	beq.n	8004b80 <UART_SetConfig+0x1f0>
 8004b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b54:	d818      	bhi.n	8004b88 <UART_SetConfig+0x1f8>
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d00a      	beq.n	8004b70 <UART_SetConfig+0x1e0>
 8004b5a:	2b80      	cmp	r3, #128	@ 0x80
 8004b5c:	d814      	bhi.n	8004b88 <UART_SetConfig+0x1f8>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <UART_SetConfig+0x1d8>
 8004b62:	2b40      	cmp	r3, #64	@ 0x40
 8004b64:	d008      	beq.n	8004b78 <UART_SetConfig+0x1e8>
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x1f8>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e082      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e07e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e07a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e076      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e072      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <UART_SetConfig+0x2dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d12a      	bne.n	8004bf0 <UART_SetConfig+0x260>
 8004b9a:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba8:	d01a      	beq.n	8004be0 <UART_SetConfig+0x250>
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0x258>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb4:	d00c      	beq.n	8004bd0 <UART_SetConfig+0x240>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bba:	d815      	bhi.n	8004be8 <UART_SetConfig+0x258>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <UART_SetConfig+0x238>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc4:	d008      	beq.n	8004bd8 <UART_SetConfig+0x248>
 8004bc6:	e00f      	b.n	8004be8 <UART_SetConfig+0x258>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e052      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e04e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e04a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be6:	e046      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e042      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <UART_SetConfig+0x2c4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d13a      	bne.n	8004c70 <UART_SetConfig+0x2e0>
 8004bfa:	4b18      	ldr	r3, [pc, #96]	@ (8004c5c <UART_SetConfig+0x2cc>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c08:	d01a      	beq.n	8004c40 <UART_SetConfig+0x2b0>
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c0e:	d81b      	bhi.n	8004c48 <UART_SetConfig+0x2b8>
 8004c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c14:	d00c      	beq.n	8004c30 <UART_SetConfig+0x2a0>
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1a:	d815      	bhi.n	8004c48 <UART_SetConfig+0x2b8>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <UART_SetConfig+0x298>
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c24:	d008      	beq.n	8004c38 <UART_SetConfig+0x2a8>
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x2b8>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e022      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c30:	2302      	movs	r3, #2
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e01e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3e:	e01a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c40:	2308      	movs	r3, #8
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c46:	e016      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4e:	e012      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c50:	efff69f3 	.word	0xefff69f3
 8004c54:	40008000 	.word	0x40008000
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a9f      	ldr	r2, [pc, #636]	@ (8004ef8 <UART_SetConfig+0x568>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d17a      	bne.n	8004d76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d824      	bhi.n	8004cd2 <UART_SetConfig+0x342>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <UART_SetConfig+0x300>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cc3 	.word	0x08004cc3
 8004ca4:	08004cd3 	.word	0x08004cd3
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004cd3 	.word	0x08004cd3
 8004cb0:	08004ccb 	.word	0x08004ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fd f9c2 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbc:	4b8f      	ldr	r3, [pc, #572]	@ (8004efc <UART_SetConfig+0x56c>)
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e00d      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc2:	f7fd f923 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8004cc6:	61f8      	str	r0, [r7, #28]
        break;
 8004cc8:	e009      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cce:	61fb      	str	r3, [r7, #28]
        break;
 8004cd0:	e005      	b.n	8004cde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80fb 	beq.w	8004edc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d305      	bcc.n	8004d02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d903      	bls.n	8004d0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d08:	e0e8      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	461c      	mov	r4, r3
 8004d10:	4615      	mov	r5, r2
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	022b      	lsls	r3, r5, #8
 8004d1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d20:	0222      	lsls	r2, r4, #8
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	6849      	ldr	r1, [r1, #4]
 8004d26:	0849      	lsrs	r1, r1, #1
 8004d28:	2000      	movs	r0, #0
 8004d2a:	4688      	mov	r8, r1
 8004d2c:	4681      	mov	r9, r0
 8004d2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004d32:	eb43 0b09 	adc.w	fp, r3, r9
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d44:	4650      	mov	r0, sl
 8004d46:	4659      	mov	r1, fp
 8004d48:	f7fb fa9a 	bl	8000280 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5a:	d308      	bcc.n	8004d6e <UART_SetConfig+0x3de>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d62:	d204      	bcs.n	8004d6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	e0b6      	b.n	8004edc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d74:	e0b2      	b.n	8004edc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7e:	d15e      	bne.n	8004e3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d828      	bhi.n	8004dda <UART_SetConfig+0x44a>
 8004d88:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0x400>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004ddb 	.word	0x08004ddb
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fd f942 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8004db8:	61f8      	str	r0, [r7, #28]
        break;
 8004dba:	e014      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fd f954 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
        break;
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8004efc <UART_SetConfig+0x56c>)
 8004dc6:	61fb      	str	r3, [r7, #28]
        break;
 8004dc8:	e00d      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fd f89f 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8004dce:	61f8      	str	r0, [r7, #28]
        break;
 8004dd0:	e009      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e005      	b.n	8004de6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d077      	beq.n	8004edc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005a      	lsls	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d916      	bls.n	8004e36 <UART_SetConfig+0x4a6>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0e:	d212      	bcs.n	8004e36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f023 030f 	bic.w	r3, r3, #15
 8004e18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	8afa      	ldrh	r2, [r7, #22]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e052      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e3c:	e04e      	b.n	8004edc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d827      	bhi.n	8004e96 <UART_SetConfig+0x506>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <UART_SetConfig+0x4bc>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e87 	.word	0x08004e87
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fd f8e4 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8004e74:	61f8      	str	r0, [r7, #28]
        break;
 8004e76:	e014      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fd f8f6 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	61f8      	str	r0, [r7, #28]
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <UART_SetConfig+0x56c>)
 8004e82:	61fb      	str	r3, [r7, #28]
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fd f841 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8004e8a:	61f8      	str	r0, [r7, #28]
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e92:	61fb      	str	r3, [r7, #28]
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085a      	lsrs	r2, r3, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d909      	bls.n	8004ed6 <UART_SetConfig+0x546>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d205      	bcs.n	8004ed6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e002      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ee8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3728      	adds	r7, #40	@ 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40008000 	.word	0x40008000
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffe:	d10a      	bne.n	8005016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b098      	sub	sp, #96	@ 0x60
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005054:	f7fb ff6a 	bl	8000f2c <HAL_GetTick>
 8005058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d12e      	bne.n	80050c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f88c 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d021      	beq.n	80050c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005096:	653b      	str	r3, [r7, #80]	@ 0x50
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e062      	b.n	800518c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d149      	bne.n	8005168 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f856 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d03c      	beq.n	8005168 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	623b      	str	r3, [r7, #32]
   return(result);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510c:	633b      	str	r3, [r7, #48]	@ 0x30
 800510e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005140:	61fa      	str	r2, [r7, #28]
 8005142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e011      	b.n	800518c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3758      	adds	r7, #88	@ 0x58
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	e04f      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d04b      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fb febd 	bl	8000f2c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e04e      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d037      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b80      	cmp	r3, #128	@ 0x80
 80051da:	d034      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d031      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d110      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2208      	movs	r2, #8
 80051f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f838 	bl	800526e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2208      	movs	r2, #8
 8005202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e029      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005220:	d111      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800522a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f81e 	bl	800526e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e00f      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	429a      	cmp	r2, r3
 8005262:	d0a0      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800526e:	b480      	push	{r7}
 8005270:	b095      	sub	sp, #84	@ 0x54
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800528a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
 8005296:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800529a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e6      	bne.n	8005276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3308      	adds	r3, #8
 80052c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d118      	bne.n	8005316 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 0310 	bic.w	r3, r3, #16
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6979      	ldr	r1, [r7, #20]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	613b      	str	r3, [r7, #16]
   return(result);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e6      	bne.n	80052e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800532a:	bf00      	nop
 800532c:	3754      	adds	r7, #84	@ 0x54
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <sniprintf>:
 8005338:	b40c      	push	{r2, r3}
 800533a:	b530      	push	{r4, r5, lr}
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <sniprintf+0x64>)
 800533e:	1e0c      	subs	r4, r1, #0
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	b09d      	sub	sp, #116	@ 0x74
 8005344:	da08      	bge.n	8005358 <sniprintf+0x20>
 8005346:	238b      	movs	r3, #139	@ 0x8b
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	b01d      	add	sp, #116	@ 0x74
 8005350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005354:	b002      	add	sp, #8
 8005356:	4770      	bx	lr
 8005358:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800535c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005360:	bf14      	ite	ne
 8005362:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005366:	4623      	moveq	r3, r4
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	9307      	str	r3, [sp, #28]
 800536c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005370:	9002      	str	r0, [sp, #8]
 8005372:	9006      	str	r0, [sp, #24]
 8005374:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005378:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800537a:	ab21      	add	r3, sp, #132	@ 0x84
 800537c:	a902      	add	r1, sp, #8
 800537e:	4628      	mov	r0, r5
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	f000 f995 	bl	80056b0 <_svfiprintf_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	bfbc      	itt	lt
 800538a:	238b      	movlt	r3, #139	@ 0x8b
 800538c:	602b      	strlt	r3, [r5, #0]
 800538e:	2c00      	cmp	r4, #0
 8005390:	d0dd      	beq.n	800534e <sniprintf+0x16>
 8005392:	9b02      	ldr	r3, [sp, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e7d9      	b.n	800534e <sniprintf+0x16>
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c

080053a0 <memset>:
 80053a0:	4402      	add	r2, r0
 80053a2:	4603      	mov	r3, r0
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d100      	bne.n	80053aa <memset+0xa>
 80053a8:	4770      	bx	lr
 80053aa:	f803 1b01 	strb.w	r1, [r3], #1
 80053ae:	e7f9      	b.n	80053a4 <memset+0x4>

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	@ (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4d0d      	ldr	r5, [pc, #52]	@ (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	@ (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2600      	movs	r6, #0
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4d0b      	ldr	r5, [pc, #44]	@ (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005400 <__libc_init_array+0x44>)
 80053d0:	f000 fc66 	bl	8005ca0 <_init>
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2600      	movs	r6, #0
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	08005d60 	.word	0x08005d60
 80053f8:	08005d60 	.word	0x08005d60
 80053fc:	08005d60 	.word	0x08005d60
 8005400:	08005d64 	.word	0x08005d64

08005404 <__retarget_lock_acquire_recursive>:
 8005404:	4770      	bx	lr

08005406 <__retarget_lock_release_recursive>:
 8005406:	4770      	bx	lr

08005408 <_free_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4605      	mov	r5, r0
 800540c:	2900      	cmp	r1, #0
 800540e:	d041      	beq.n	8005494 <_free_r+0x8c>
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f0c      	subs	r4, r1, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfb8      	it	lt
 800541a:	18e4      	addlt	r4, r4, r3
 800541c:	f000 f8e0 	bl	80055e0 <__malloc_lock>
 8005420:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <_free_r+0x90>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	b933      	cbnz	r3, 8005434 <_free_r+0x2c>
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6014      	str	r4, [r2, #0]
 800542a:	4628      	mov	r0, r5
 800542c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005430:	f000 b8dc 	b.w	80055ec <__malloc_unlock>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d908      	bls.n	800544a <_free_r+0x42>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	1821      	adds	r1, r4, r0
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1809      	addeq	r1, r1, r0
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	e7ed      	b.n	8005426 <_free_r+0x1e>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x4c>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x42>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1850      	adds	r0, r2, r1
 8005458:	42a0      	cmp	r0, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x6c>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	4401      	add	r1, r0
 8005460:	1850      	adds	r0, r2, r1
 8005462:	4283      	cmp	r3, r0
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1e0      	bne.n	800542a <_free_r+0x22>
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	4408      	add	r0, r1
 8005470:	6010      	str	r0, [r2, #0]
 8005472:	e7da      	b.n	800542a <_free_r+0x22>
 8005474:	d902      	bls.n	800547c <_free_r+0x74>
 8005476:	230c      	movs	r3, #12
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	e7d6      	b.n	800542a <_free_r+0x22>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	1821      	adds	r1, r4, r0
 8005480:	428b      	cmp	r3, r1
 8005482:	bf04      	itt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	bf04      	itt	eq
 800548c:	1809      	addeq	r1, r1, r0
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	6054      	str	r4, [r2, #4]
 8005492:	e7ca      	b.n	800542a <_free_r+0x22>
 8005494:	bd38      	pop	{r3, r4, r5, pc}
 8005496:	bf00      	nop
 8005498:	20000334 	.word	0x20000334

0800549c <sbrk_aligned>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4e0f      	ldr	r6, [pc, #60]	@ (80054dc <sbrk_aligned+0x40>)
 80054a0:	460c      	mov	r4, r1
 80054a2:	6831      	ldr	r1, [r6, #0]
 80054a4:	4605      	mov	r5, r0
 80054a6:	b911      	cbnz	r1, 80054ae <sbrk_aligned+0x12>
 80054a8:	f000 fba6 	bl	8005bf8 <_sbrk_r>
 80054ac:	6030      	str	r0, [r6, #0]
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 fba1 	bl	8005bf8 <_sbrk_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	d103      	bne.n	80054c2 <sbrk_aligned+0x26>
 80054ba:	f04f 34ff 	mov.w	r4, #4294967295
 80054be:	4620      	mov	r0, r4
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	1cc4      	adds	r4, r0, #3
 80054c4:	f024 0403 	bic.w	r4, r4, #3
 80054c8:	42a0      	cmp	r0, r4
 80054ca:	d0f8      	beq.n	80054be <sbrk_aligned+0x22>
 80054cc:	1a21      	subs	r1, r4, r0
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fb92 	bl	8005bf8 <_sbrk_r>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d1f2      	bne.n	80054be <sbrk_aligned+0x22>
 80054d8:	e7ef      	b.n	80054ba <sbrk_aligned+0x1e>
 80054da:	bf00      	nop
 80054dc:	20000330 	.word	0x20000330

080054e0 <_malloc_r>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	1ccd      	adds	r5, r1, #3
 80054e6:	f025 0503 	bic.w	r5, r5, #3
 80054ea:	3508      	adds	r5, #8
 80054ec:	2d0c      	cmp	r5, #12
 80054ee:	bf38      	it	cc
 80054f0:	250c      	movcc	r5, #12
 80054f2:	2d00      	cmp	r5, #0
 80054f4:	4606      	mov	r6, r0
 80054f6:	db01      	blt.n	80054fc <_malloc_r+0x1c>
 80054f8:	42a9      	cmp	r1, r5
 80054fa:	d904      	bls.n	8005506 <_malloc_r+0x26>
 80054fc:	230c      	movs	r3, #12
 80054fe:	6033      	str	r3, [r6, #0]
 8005500:	2000      	movs	r0, #0
 8005502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055dc <_malloc_r+0xfc>
 800550a:	f000 f869 	bl	80055e0 <__malloc_lock>
 800550e:	f8d8 3000 	ldr.w	r3, [r8]
 8005512:	461c      	mov	r4, r3
 8005514:	bb44      	cbnz	r4, 8005568 <_malloc_r+0x88>
 8005516:	4629      	mov	r1, r5
 8005518:	4630      	mov	r0, r6
 800551a:	f7ff ffbf 	bl	800549c <sbrk_aligned>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	4604      	mov	r4, r0
 8005522:	d158      	bne.n	80055d6 <_malloc_r+0xf6>
 8005524:	f8d8 4000 	ldr.w	r4, [r8]
 8005528:	4627      	mov	r7, r4
 800552a:	2f00      	cmp	r7, #0
 800552c:	d143      	bne.n	80055b6 <_malloc_r+0xd6>
 800552e:	2c00      	cmp	r4, #0
 8005530:	d04b      	beq.n	80055ca <_malloc_r+0xea>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	4639      	mov	r1, r7
 8005536:	4630      	mov	r0, r6
 8005538:	eb04 0903 	add.w	r9, r4, r3
 800553c:	f000 fb5c 	bl	8005bf8 <_sbrk_r>
 8005540:	4581      	cmp	r9, r0
 8005542:	d142      	bne.n	80055ca <_malloc_r+0xea>
 8005544:	6821      	ldr	r1, [r4, #0]
 8005546:	1a6d      	subs	r5, r5, r1
 8005548:	4629      	mov	r1, r5
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff ffa6 	bl	800549c <sbrk_aligned>
 8005550:	3001      	adds	r0, #1
 8005552:	d03a      	beq.n	80055ca <_malloc_r+0xea>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	442b      	add	r3, r5
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	f8d8 3000 	ldr.w	r3, [r8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	bb62      	cbnz	r2, 80055bc <_malloc_r+0xdc>
 8005562:	f8c8 7000 	str.w	r7, [r8]
 8005566:	e00f      	b.n	8005588 <_malloc_r+0xa8>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	1b52      	subs	r2, r2, r5
 800556c:	d420      	bmi.n	80055b0 <_malloc_r+0xd0>
 800556e:	2a0b      	cmp	r2, #11
 8005570:	d917      	bls.n	80055a2 <_malloc_r+0xc2>
 8005572:	1961      	adds	r1, r4, r5
 8005574:	42a3      	cmp	r3, r4
 8005576:	6025      	str	r5, [r4, #0]
 8005578:	bf18      	it	ne
 800557a:	6059      	strne	r1, [r3, #4]
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	bf08      	it	eq
 8005580:	f8c8 1000 	streq.w	r1, [r8]
 8005584:	5162      	str	r2, [r4, r5]
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	4630      	mov	r0, r6
 800558a:	f000 f82f 	bl	80055ec <__malloc_unlock>
 800558e:	f104 000b 	add.w	r0, r4, #11
 8005592:	1d23      	adds	r3, r4, #4
 8005594:	f020 0007 	bic.w	r0, r0, #7
 8005598:	1ac2      	subs	r2, r0, r3
 800559a:	bf1c      	itt	ne
 800559c:	1a1b      	subne	r3, r3, r0
 800559e:	50a3      	strne	r3, [r4, r2]
 80055a0:	e7af      	b.n	8005502 <_malloc_r+0x22>
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	bf0c      	ite	eq
 80055a8:	f8c8 2000 	streq.w	r2, [r8]
 80055ac:	605a      	strne	r2, [r3, #4]
 80055ae:	e7eb      	b.n	8005588 <_malloc_r+0xa8>
 80055b0:	4623      	mov	r3, r4
 80055b2:	6864      	ldr	r4, [r4, #4]
 80055b4:	e7ae      	b.n	8005514 <_malloc_r+0x34>
 80055b6:	463c      	mov	r4, r7
 80055b8:	687f      	ldr	r7, [r7, #4]
 80055ba:	e7b6      	b.n	800552a <_malloc_r+0x4a>
 80055bc:	461a      	mov	r2, r3
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d1fb      	bne.n	80055bc <_malloc_r+0xdc>
 80055c4:	2300      	movs	r3, #0
 80055c6:	6053      	str	r3, [r2, #4]
 80055c8:	e7de      	b.n	8005588 <_malloc_r+0xa8>
 80055ca:	230c      	movs	r3, #12
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 f80c 	bl	80055ec <__malloc_unlock>
 80055d4:	e794      	b.n	8005500 <_malloc_r+0x20>
 80055d6:	6005      	str	r5, [r0, #0]
 80055d8:	e7d6      	b.n	8005588 <_malloc_r+0xa8>
 80055da:	bf00      	nop
 80055dc:	20000334 	.word	0x20000334

080055e0 <__malloc_lock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	@ (80055e8 <__malloc_lock+0x8>)
 80055e2:	f7ff bf0f 	b.w	8005404 <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	2000032c 	.word	0x2000032c

080055ec <__malloc_unlock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	@ (80055f4 <__malloc_unlock+0x8>)
 80055ee:	f7ff bf0a 	b.w	8005406 <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	2000032c 	.word	0x2000032c

080055f8 <__ssputs_r>:
 80055f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	688e      	ldr	r6, [r1, #8]
 80055fe:	461f      	mov	r7, r3
 8005600:	42be      	cmp	r6, r7
 8005602:	680b      	ldr	r3, [r1, #0]
 8005604:	4682      	mov	sl, r0
 8005606:	460c      	mov	r4, r1
 8005608:	4690      	mov	r8, r2
 800560a:	d82d      	bhi.n	8005668 <__ssputs_r+0x70>
 800560c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005610:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005614:	d026      	beq.n	8005664 <__ssputs_r+0x6c>
 8005616:	6965      	ldr	r5, [r4, #20]
 8005618:	6909      	ldr	r1, [r1, #16]
 800561a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800561e:	eba3 0901 	sub.w	r9, r3, r1
 8005622:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005626:	1c7b      	adds	r3, r7, #1
 8005628:	444b      	add	r3, r9
 800562a:	106d      	asrs	r5, r5, #1
 800562c:	429d      	cmp	r5, r3
 800562e:	bf38      	it	cc
 8005630:	461d      	movcc	r5, r3
 8005632:	0553      	lsls	r3, r2, #21
 8005634:	d527      	bpl.n	8005686 <__ssputs_r+0x8e>
 8005636:	4629      	mov	r1, r5
 8005638:	f7ff ff52 	bl	80054e0 <_malloc_r>
 800563c:	4606      	mov	r6, r0
 800563e:	b360      	cbz	r0, 800569a <__ssputs_r+0xa2>
 8005640:	6921      	ldr	r1, [r4, #16]
 8005642:	464a      	mov	r2, r9
 8005644:	f000 fae8 	bl	8005c18 <memcpy>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800564e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	6126      	str	r6, [r4, #16]
 8005656:	6165      	str	r5, [r4, #20]
 8005658:	444e      	add	r6, r9
 800565a:	eba5 0509 	sub.w	r5, r5, r9
 800565e:	6026      	str	r6, [r4, #0]
 8005660:	60a5      	str	r5, [r4, #8]
 8005662:	463e      	mov	r6, r7
 8005664:	42be      	cmp	r6, r7
 8005666:	d900      	bls.n	800566a <__ssputs_r+0x72>
 8005668:	463e      	mov	r6, r7
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	4632      	mov	r2, r6
 800566e:	4641      	mov	r1, r8
 8005670:	f000 faa8 	bl	8005bc4 <memmove>
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	1b9b      	subs	r3, r3, r6
 8005678:	60a3      	str	r3, [r4, #8]
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	4433      	add	r3, r6
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	2000      	movs	r0, #0
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	462a      	mov	r2, r5
 8005688:	f000 fad4 	bl	8005c34 <_realloc_r>
 800568c:	4606      	mov	r6, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	d1e0      	bne.n	8005654 <__ssputs_r+0x5c>
 8005692:	6921      	ldr	r1, [r4, #16]
 8005694:	4650      	mov	r0, sl
 8005696:	f7ff feb7 	bl	8005408 <_free_r>
 800569a:	230c      	movs	r3, #12
 800569c:	f8ca 3000 	str.w	r3, [sl]
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	e7e9      	b.n	8005682 <__ssputs_r+0x8a>
	...

080056b0 <_svfiprintf_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	4698      	mov	r8, r3
 80056b6:	898b      	ldrh	r3, [r1, #12]
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	b09d      	sub	sp, #116	@ 0x74
 80056bc:	4607      	mov	r7, r0
 80056be:	460d      	mov	r5, r1
 80056c0:	4614      	mov	r4, r2
 80056c2:	d510      	bpl.n	80056e6 <_svfiprintf_r+0x36>
 80056c4:	690b      	ldr	r3, [r1, #16]
 80056c6:	b973      	cbnz	r3, 80056e6 <_svfiprintf_r+0x36>
 80056c8:	2140      	movs	r1, #64	@ 0x40
 80056ca:	f7ff ff09 	bl	80054e0 <_malloc_r>
 80056ce:	6028      	str	r0, [r5, #0]
 80056d0:	6128      	str	r0, [r5, #16]
 80056d2:	b930      	cbnz	r0, 80056e2 <_svfiprintf_r+0x32>
 80056d4:	230c      	movs	r3, #12
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	b01d      	add	sp, #116	@ 0x74
 80056de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e2:	2340      	movs	r3, #64	@ 0x40
 80056e4:	616b      	str	r3, [r5, #20]
 80056e6:	2300      	movs	r3, #0
 80056e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ea:	2320      	movs	r3, #32
 80056ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f4:	2330      	movs	r3, #48	@ 0x30
 80056f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005894 <_svfiprintf_r+0x1e4>
 80056fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056fe:	f04f 0901 	mov.w	r9, #1
 8005702:	4623      	mov	r3, r4
 8005704:	469a      	mov	sl, r3
 8005706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570a:	b10a      	cbz	r2, 8005710 <_svfiprintf_r+0x60>
 800570c:	2a25      	cmp	r2, #37	@ 0x25
 800570e:	d1f9      	bne.n	8005704 <_svfiprintf_r+0x54>
 8005710:	ebba 0b04 	subs.w	fp, sl, r4
 8005714:	d00b      	beq.n	800572e <_svfiprintf_r+0x7e>
 8005716:	465b      	mov	r3, fp
 8005718:	4622      	mov	r2, r4
 800571a:	4629      	mov	r1, r5
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ff6b 	bl	80055f8 <__ssputs_r>
 8005722:	3001      	adds	r0, #1
 8005724:	f000 80a7 	beq.w	8005876 <_svfiprintf_r+0x1c6>
 8005728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800572a:	445a      	add	r2, fp
 800572c:	9209      	str	r2, [sp, #36]	@ 0x24
 800572e:	f89a 3000 	ldrb.w	r3, [sl]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 809f 	beq.w	8005876 <_svfiprintf_r+0x1c6>
 8005738:	2300      	movs	r3, #0
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005742:	f10a 0a01 	add.w	sl, sl, #1
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	9307      	str	r3, [sp, #28]
 800574a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800574e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005750:	4654      	mov	r4, sl
 8005752:	2205      	movs	r2, #5
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	484e      	ldr	r0, [pc, #312]	@ (8005894 <_svfiprintf_r+0x1e4>)
 800575a:	f7fa fd41 	bl	80001e0 <memchr>
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	b9d8      	cbnz	r0, 800579a <_svfiprintf_r+0xea>
 8005762:	06d0      	lsls	r0, r2, #27
 8005764:	bf44      	itt	mi
 8005766:	2320      	movmi	r3, #32
 8005768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800576c:	0711      	lsls	r1, r2, #28
 800576e:	bf44      	itt	mi
 8005770:	232b      	movmi	r3, #43	@ 0x2b
 8005772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b2a      	cmp	r3, #42	@ 0x2a
 800577c:	d015      	beq.n	80057aa <_svfiprintf_r+0xfa>
 800577e:	9a07      	ldr	r2, [sp, #28]
 8005780:	4654      	mov	r4, sl
 8005782:	2000      	movs	r0, #0
 8005784:	f04f 0c0a 	mov.w	ip, #10
 8005788:	4621      	mov	r1, r4
 800578a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800578e:	3b30      	subs	r3, #48	@ 0x30
 8005790:	2b09      	cmp	r3, #9
 8005792:	d94b      	bls.n	800582c <_svfiprintf_r+0x17c>
 8005794:	b1b0      	cbz	r0, 80057c4 <_svfiprintf_r+0x114>
 8005796:	9207      	str	r2, [sp, #28]
 8005798:	e014      	b.n	80057c4 <_svfiprintf_r+0x114>
 800579a:	eba0 0308 	sub.w	r3, r0, r8
 800579e:	fa09 f303 	lsl.w	r3, r9, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	46a2      	mov	sl, r4
 80057a8:	e7d2      	b.n	8005750 <_svfiprintf_r+0xa0>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d19      	adds	r1, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9103      	str	r1, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfbb      	ittet	lt
 80057b6:	425b      	neglt	r3, r3
 80057b8:	f042 0202 	orrlt.w	r2, r2, #2
 80057bc:	9307      	strge	r3, [sp, #28]
 80057be:	9307      	strlt	r3, [sp, #28]
 80057c0:	bfb8      	it	lt
 80057c2:	9204      	strlt	r2, [sp, #16]
 80057c4:	7823      	ldrb	r3, [r4, #0]
 80057c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c8:	d10a      	bne.n	80057e0 <_svfiprintf_r+0x130>
 80057ca:	7863      	ldrb	r3, [r4, #1]
 80057cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ce:	d132      	bne.n	8005836 <_svfiprintf_r+0x186>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	9203      	str	r2, [sp, #12]
 80057d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057dc:	3402      	adds	r4, #2
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058a4 <_svfiprintf_r+0x1f4>
 80057e4:	7821      	ldrb	r1, [r4, #0]
 80057e6:	2203      	movs	r2, #3
 80057e8:	4650      	mov	r0, sl
 80057ea:	f7fa fcf9 	bl	80001e0 <memchr>
 80057ee:	b138      	cbz	r0, 8005800 <_svfiprintf_r+0x150>
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	eba0 000a 	sub.w	r0, r0, sl
 80057f6:	2240      	movs	r2, #64	@ 0x40
 80057f8:	4082      	lsls	r2, r0
 80057fa:	4313      	orrs	r3, r2
 80057fc:	3401      	adds	r4, #1
 80057fe:	9304      	str	r3, [sp, #16]
 8005800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005804:	4824      	ldr	r0, [pc, #144]	@ (8005898 <_svfiprintf_r+0x1e8>)
 8005806:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800580a:	2206      	movs	r2, #6
 800580c:	f7fa fce8 	bl	80001e0 <memchr>
 8005810:	2800      	cmp	r0, #0
 8005812:	d036      	beq.n	8005882 <_svfiprintf_r+0x1d2>
 8005814:	4b21      	ldr	r3, [pc, #132]	@ (800589c <_svfiprintf_r+0x1ec>)
 8005816:	bb1b      	cbnz	r3, 8005860 <_svfiprintf_r+0x1b0>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	3307      	adds	r3, #7
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	3308      	adds	r3, #8
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005826:	4433      	add	r3, r6
 8005828:	9309      	str	r3, [sp, #36]	@ 0x24
 800582a:	e76a      	b.n	8005702 <_svfiprintf_r+0x52>
 800582c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005830:	460c      	mov	r4, r1
 8005832:	2001      	movs	r0, #1
 8005834:	e7a8      	b.n	8005788 <_svfiprintf_r+0xd8>
 8005836:	2300      	movs	r3, #0
 8005838:	3401      	adds	r4, #1
 800583a:	9305      	str	r3, [sp, #20]
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 0c0a 	mov.w	ip, #10
 8005842:	4620      	mov	r0, r4
 8005844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005848:	3a30      	subs	r2, #48	@ 0x30
 800584a:	2a09      	cmp	r2, #9
 800584c:	d903      	bls.n	8005856 <_svfiprintf_r+0x1a6>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0c6      	beq.n	80057e0 <_svfiprintf_r+0x130>
 8005852:	9105      	str	r1, [sp, #20]
 8005854:	e7c4      	b.n	80057e0 <_svfiprintf_r+0x130>
 8005856:	fb0c 2101 	mla	r1, ip, r1, r2
 800585a:	4604      	mov	r4, r0
 800585c:	2301      	movs	r3, #1
 800585e:	e7f0      	b.n	8005842 <_svfiprintf_r+0x192>
 8005860:	ab03      	add	r3, sp, #12
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	462a      	mov	r2, r5
 8005866:	4b0e      	ldr	r3, [pc, #56]	@ (80058a0 <_svfiprintf_r+0x1f0>)
 8005868:	a904      	add	r1, sp, #16
 800586a:	4638      	mov	r0, r7
 800586c:	f3af 8000 	nop.w
 8005870:	1c42      	adds	r2, r0, #1
 8005872:	4606      	mov	r6, r0
 8005874:	d1d6      	bne.n	8005824 <_svfiprintf_r+0x174>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	065b      	lsls	r3, r3, #25
 800587a:	f53f af2d 	bmi.w	80056d8 <_svfiprintf_r+0x28>
 800587e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005880:	e72c      	b.n	80056dc <_svfiprintf_r+0x2c>
 8005882:	ab03      	add	r3, sp, #12
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	462a      	mov	r2, r5
 8005888:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <_svfiprintf_r+0x1f0>)
 800588a:	a904      	add	r1, sp, #16
 800588c:	4638      	mov	r0, r7
 800588e:	f000 f879 	bl	8005984 <_printf_i>
 8005892:	e7ed      	b.n	8005870 <_svfiprintf_r+0x1c0>
 8005894:	08005d24 	.word	0x08005d24
 8005898:	08005d2e 	.word	0x08005d2e
 800589c:	00000000 	.word	0x00000000
 80058a0:	080055f9 	.word	0x080055f9
 80058a4:	08005d2a 	.word	0x08005d2a

080058a8 <_printf_common>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	4616      	mov	r6, r2
 80058ae:	4698      	mov	r8, r3
 80058b0:	688a      	ldr	r2, [r1, #8]
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bfb8      	it	lt
 80058bc:	4613      	movlt	r3, r2
 80058be:	6033      	str	r3, [r6, #0]
 80058c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058c4:	4607      	mov	r7, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b10a      	cbz	r2, 80058ce <_printf_common+0x26>
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	0699      	lsls	r1, r3, #26
 80058d2:	bf42      	ittt	mi
 80058d4:	6833      	ldrmi	r3, [r6, #0]
 80058d6:	3302      	addmi	r3, #2
 80058d8:	6033      	strmi	r3, [r6, #0]
 80058da:	6825      	ldr	r5, [r4, #0]
 80058dc:	f015 0506 	ands.w	r5, r5, #6
 80058e0:	d106      	bne.n	80058f0 <_printf_common+0x48>
 80058e2:	f104 0a19 	add.w	sl, r4, #25
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	6832      	ldr	r2, [r6, #0]
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dc26      	bgt.n	800593e <_printf_common+0x96>
 80058f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	3b00      	subs	r3, #0
 80058f8:	bf18      	it	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	0692      	lsls	r2, r2, #26
 80058fe:	d42b      	bmi.n	8005958 <_printf_common+0xb0>
 8005900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005904:	4641      	mov	r1, r8
 8005906:	4638      	mov	r0, r7
 8005908:	47c8      	blx	r9
 800590a:	3001      	adds	r0, #1
 800590c:	d01e      	beq.n	800594c <_printf_common+0xa4>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	6922      	ldr	r2, [r4, #16]
 8005912:	f003 0306 	and.w	r3, r3, #6
 8005916:	2b04      	cmp	r3, #4
 8005918:	bf02      	ittt	eq
 800591a:	68e5      	ldreq	r5, [r4, #12]
 800591c:	6833      	ldreq	r3, [r6, #0]
 800591e:	1aed      	subeq	r5, r5, r3
 8005920:	68a3      	ldr	r3, [r4, #8]
 8005922:	bf0c      	ite	eq
 8005924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005928:	2500      	movne	r5, #0
 800592a:	4293      	cmp	r3, r2
 800592c:	bfc4      	itt	gt
 800592e:	1a9b      	subgt	r3, r3, r2
 8005930:	18ed      	addgt	r5, r5, r3
 8005932:	2600      	movs	r6, #0
 8005934:	341a      	adds	r4, #26
 8005936:	42b5      	cmp	r5, r6
 8005938:	d11a      	bne.n	8005970 <_printf_common+0xc8>
 800593a:	2000      	movs	r0, #0
 800593c:	e008      	b.n	8005950 <_printf_common+0xa8>
 800593e:	2301      	movs	r3, #1
 8005940:	4652      	mov	r2, sl
 8005942:	4641      	mov	r1, r8
 8005944:	4638      	mov	r0, r7
 8005946:	47c8      	blx	r9
 8005948:	3001      	adds	r0, #1
 800594a:	d103      	bne.n	8005954 <_printf_common+0xac>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	3501      	adds	r5, #1
 8005956:	e7c6      	b.n	80058e6 <_printf_common+0x3e>
 8005958:	18e1      	adds	r1, r4, r3
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	2030      	movs	r0, #48	@ 0x30
 800595e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005962:	4422      	add	r2, r4
 8005964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800596c:	3302      	adds	r3, #2
 800596e:	e7c7      	b.n	8005900 <_printf_common+0x58>
 8005970:	2301      	movs	r3, #1
 8005972:	4622      	mov	r2, r4
 8005974:	4641      	mov	r1, r8
 8005976:	4638      	mov	r0, r7
 8005978:	47c8      	blx	r9
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa4>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d9      	b.n	8005936 <_printf_common+0x8e>
	...

08005984 <_printf_i>:
 8005984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	7e0f      	ldrb	r7, [r1, #24]
 800598a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800598c:	2f78      	cmp	r7, #120	@ 0x78
 800598e:	4691      	mov	r9, r2
 8005990:	4680      	mov	r8, r0
 8005992:	460c      	mov	r4, r1
 8005994:	469a      	mov	sl, r3
 8005996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800599a:	d807      	bhi.n	80059ac <_printf_i+0x28>
 800599c:	2f62      	cmp	r7, #98	@ 0x62
 800599e:	d80a      	bhi.n	80059b6 <_printf_i+0x32>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	f000 80d2 	beq.w	8005b4a <_printf_i+0x1c6>
 80059a6:	2f58      	cmp	r7, #88	@ 0x58
 80059a8:	f000 80b9 	beq.w	8005b1e <_printf_i+0x19a>
 80059ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059b4:	e03a      	b.n	8005a2c <_printf_i+0xa8>
 80059b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ba:	2b15      	cmp	r3, #21
 80059bc:	d8f6      	bhi.n	80059ac <_printf_i+0x28>
 80059be:	a101      	add	r1, pc, #4	@ (adr r1, 80059c4 <_printf_i+0x40>)
 80059c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c4:	08005a1d 	.word	0x08005a1d
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	080059ad 	.word	0x080059ad
 80059d0:	080059ad 	.word	0x080059ad
 80059d4:	080059ad 	.word	0x080059ad
 80059d8:	080059ad 	.word	0x080059ad
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	080059ad 	.word	0x080059ad
 80059e4:	080059ad 	.word	0x080059ad
 80059e8:	080059ad 	.word	0x080059ad
 80059ec:	080059ad 	.word	0x080059ad
 80059f0:	08005b31 	.word	0x08005b31
 80059f4:	08005a5b 	.word	0x08005a5b
 80059f8:	08005aeb 	.word	0x08005aeb
 80059fc:	080059ad 	.word	0x080059ad
 8005a00:	080059ad 	.word	0x080059ad
 8005a04:	08005b53 	.word	0x08005b53
 8005a08:	080059ad 	.word	0x080059ad
 8005a0c:	08005a5b 	.word	0x08005a5b
 8005a10:	080059ad 	.word	0x080059ad
 8005a14:	080059ad 	.word	0x080059ad
 8005a18:	08005af3 	.word	0x08005af3
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	1d1a      	adds	r2, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6032      	str	r2, [r6, #0]
 8005a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e09d      	b.n	8005b6c <_printf_i+0x1e8>
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	6031      	str	r1, [r6, #0]
 8005a38:	0606      	lsls	r6, r0, #24
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0xbc>
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	e003      	b.n	8005a48 <_printf_i+0xc4>
 8005a40:	0645      	lsls	r5, r0, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0xb8>
 8005a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	da03      	bge.n	8005a54 <_printf_i+0xd0>
 8005a4c:	232d      	movs	r3, #45	@ 0x2d
 8005a4e:	426d      	negs	r5, r5
 8005a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a54:	4859      	ldr	r0, [pc, #356]	@ (8005bbc <_printf_i+0x238>)
 8005a56:	230a      	movs	r3, #10
 8005a58:	e011      	b.n	8005a7e <_printf_i+0xfa>
 8005a5a:	6821      	ldr	r1, [r4, #0]
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	0608      	lsls	r0, r1, #24
 8005a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a64:	d402      	bmi.n	8005a6c <_printf_i+0xe8>
 8005a66:	0649      	lsls	r1, r1, #25
 8005a68:	bf48      	it	mi
 8005a6a:	b2ad      	uxthmi	r5, r5
 8005a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a6e:	4853      	ldr	r0, [pc, #332]	@ (8005bbc <_printf_i+0x238>)
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	bf14      	ite	ne
 8005a74:	230a      	movne	r3, #10
 8005a76:	2308      	moveq	r3, #8
 8005a78:	2100      	movs	r1, #0
 8005a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a7e:	6866      	ldr	r6, [r4, #4]
 8005a80:	60a6      	str	r6, [r4, #8]
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	bfa2      	ittt	ge
 8005a86:	6821      	ldrge	r1, [r4, #0]
 8005a88:	f021 0104 	bicge.w	r1, r1, #4
 8005a8c:	6021      	strge	r1, [r4, #0]
 8005a8e:	b90d      	cbnz	r5, 8005a94 <_printf_i+0x110>
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	d04b      	beq.n	8005b2c <_printf_i+0x1a8>
 8005a94:	4616      	mov	r6, r2
 8005a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a9e:	5dc7      	ldrb	r7, [r0, r7]
 8005aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aa4:	462f      	mov	r7, r5
 8005aa6:	42bb      	cmp	r3, r7
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	d9f4      	bls.n	8005a96 <_printf_i+0x112>
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d10b      	bne.n	8005ac8 <_printf_i+0x144>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07df      	lsls	r7, r3, #31
 8005ab4:	d508      	bpl.n	8005ac8 <_printf_i+0x144>
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	6861      	ldr	r1, [r4, #4]
 8005aba:	4299      	cmp	r1, r3
 8005abc:	bfde      	ittt	le
 8005abe:	2330      	movle	r3, #48	@ 0x30
 8005ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ac8:	1b92      	subs	r2, r2, r6
 8005aca:	6122      	str	r2, [r4, #16]
 8005acc:	f8cd a000 	str.w	sl, [sp]
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	aa03      	add	r2, sp, #12
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f7ff fee6 	bl	80058a8 <_printf_common>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d14a      	bne.n	8005b76 <_printf_i+0x1f2>
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	b004      	add	sp, #16
 8005ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	f043 0320 	orr.w	r3, r3, #32
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	4833      	ldr	r0, [pc, #204]	@ (8005bc0 <_printf_i+0x23c>)
 8005af4:	2778      	movs	r7, #120	@ 0x78
 8005af6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6831      	ldr	r1, [r6, #0]
 8005afe:	061f      	lsls	r7, r3, #24
 8005b00:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b04:	d402      	bmi.n	8005b0c <_printf_i+0x188>
 8005b06:	065f      	lsls	r7, r3, #25
 8005b08:	bf48      	it	mi
 8005b0a:	b2ad      	uxthmi	r5, r5
 8005b0c:	6031      	str	r1, [r6, #0]
 8005b0e:	07d9      	lsls	r1, r3, #31
 8005b10:	bf44      	itt	mi
 8005b12:	f043 0320 	orrmi.w	r3, r3, #32
 8005b16:	6023      	strmi	r3, [r4, #0]
 8005b18:	b11d      	cbz	r5, 8005b22 <_printf_i+0x19e>
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	e7ac      	b.n	8005a78 <_printf_i+0xf4>
 8005b1e:	4827      	ldr	r0, [pc, #156]	@ (8005bbc <_printf_i+0x238>)
 8005b20:	e7e9      	b.n	8005af6 <_printf_i+0x172>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	f023 0320 	bic.w	r3, r3, #32
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	e7f6      	b.n	8005b1a <_printf_i+0x196>
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	e7bd      	b.n	8005aac <_printf_i+0x128>
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	6825      	ldr	r5, [r4, #0]
 8005b34:	6961      	ldr	r1, [r4, #20]
 8005b36:	1d18      	adds	r0, r3, #4
 8005b38:	6030      	str	r0, [r6, #0]
 8005b3a:	062e      	lsls	r6, r5, #24
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	d501      	bpl.n	8005b44 <_printf_i+0x1c0>
 8005b40:	6019      	str	r1, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <_printf_i+0x1c6>
 8005b44:	0668      	lsls	r0, r5, #25
 8005b46:	d5fb      	bpl.n	8005b40 <_printf_i+0x1bc>
 8005b48:	8019      	strh	r1, [r3, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6123      	str	r3, [r4, #16]
 8005b4e:	4616      	mov	r6, r2
 8005b50:	e7bc      	b.n	8005acc <_printf_i+0x148>
 8005b52:	6833      	ldr	r3, [r6, #0]
 8005b54:	1d1a      	adds	r2, r3, #4
 8005b56:	6032      	str	r2, [r6, #0]
 8005b58:	681e      	ldr	r6, [r3, #0]
 8005b5a:	6862      	ldr	r2, [r4, #4]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f7fa fb3e 	bl	80001e0 <memchr>
 8005b64:	b108      	cbz	r0, 8005b6a <_printf_i+0x1e6>
 8005b66:	1b80      	subs	r0, r0, r6
 8005b68:	6060      	str	r0, [r4, #4]
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b74:	e7aa      	b.n	8005acc <_printf_i+0x148>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	4632      	mov	r2, r6
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	47d0      	blx	sl
 8005b80:	3001      	adds	r0, #1
 8005b82:	d0ad      	beq.n	8005ae0 <_printf_i+0x15c>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	079b      	lsls	r3, r3, #30
 8005b88:	d413      	bmi.n	8005bb2 <_printf_i+0x22e>
 8005b8a:	68e0      	ldr	r0, [r4, #12]
 8005b8c:	9b03      	ldr	r3, [sp, #12]
 8005b8e:	4298      	cmp	r0, r3
 8005b90:	bfb8      	it	lt
 8005b92:	4618      	movlt	r0, r3
 8005b94:	e7a6      	b.n	8005ae4 <_printf_i+0x160>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	47d0      	blx	sl
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d09d      	beq.n	8005ae0 <_printf_i+0x15c>
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	9903      	ldr	r1, [sp, #12]
 8005baa:	1a5b      	subs	r3, r3, r1
 8005bac:	42ab      	cmp	r3, r5
 8005bae:	dcf2      	bgt.n	8005b96 <_printf_i+0x212>
 8005bb0:	e7eb      	b.n	8005b8a <_printf_i+0x206>
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	f104 0619 	add.w	r6, r4, #25
 8005bb8:	e7f5      	b.n	8005ba6 <_printf_i+0x222>
 8005bba:	bf00      	nop
 8005bbc:	08005d35 	.word	0x08005d35
 8005bc0:	08005d46 	.word	0x08005d46

08005bc4 <memmove>:
 8005bc4:	4288      	cmp	r0, r1
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	eb01 0402 	add.w	r4, r1, r2
 8005bcc:	d902      	bls.n	8005bd4 <memmove+0x10>
 8005bce:	4284      	cmp	r4, r0
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	d807      	bhi.n	8005be4 <memmove+0x20>
 8005bd4:	1e43      	subs	r3, r0, #1
 8005bd6:	42a1      	cmp	r1, r4
 8005bd8:	d008      	beq.n	8005bec <memmove+0x28>
 8005bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005be2:	e7f8      	b.n	8005bd6 <memmove+0x12>
 8005be4:	4402      	add	r2, r0
 8005be6:	4601      	mov	r1, r0
 8005be8:	428a      	cmp	r2, r1
 8005bea:	d100      	bne.n	8005bee <memmove+0x2a>
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bf6:	e7f7      	b.n	8005be8 <memmove+0x24>

08005bf8 <_sbrk_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d06      	ldr	r5, [pc, #24]	@ (8005c14 <_sbrk_r+0x1c>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	f7fb f8ec 	bl	8000de0 <_sbrk>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_sbrk_r+0x1a>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_sbrk_r+0x1a>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	20000328 	.word	0x20000328

08005c18 <memcpy>:
 8005c18:	440a      	add	r2, r1
 8005c1a:	4291      	cmp	r1, r2
 8005c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c20:	d100      	bne.n	8005c24 <memcpy+0xc>
 8005c22:	4770      	bx	lr
 8005c24:	b510      	push	{r4, lr}
 8005c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2e:	4291      	cmp	r1, r2
 8005c30:	d1f9      	bne.n	8005c26 <memcpy+0xe>
 8005c32:	bd10      	pop	{r4, pc}

08005c34 <_realloc_r>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4615      	mov	r5, r2
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	b921      	cbnz	r1, 8005c4a <_realloc_r+0x16>
 8005c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4611      	mov	r1, r2
 8005c46:	f7ff bc4b 	b.w	80054e0 <_malloc_r>
 8005c4a:	b92a      	cbnz	r2, 8005c58 <_realloc_r+0x24>
 8005c4c:	f7ff fbdc 	bl	8005408 <_free_r>
 8005c50:	2400      	movs	r4, #0
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	f000 f81a 	bl	8005c90 <_malloc_usable_size_r>
 8005c5c:	4285      	cmp	r5, r0
 8005c5e:	4606      	mov	r6, r0
 8005c60:	d802      	bhi.n	8005c68 <_realloc_r+0x34>
 8005c62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c66:	d8f4      	bhi.n	8005c52 <_realloc_r+0x1e>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fc38 	bl	80054e0 <_malloc_r>
 8005c70:	4607      	mov	r7, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0ec      	beq.n	8005c50 <_realloc_r+0x1c>
 8005c76:	42b5      	cmp	r5, r6
 8005c78:	462a      	mov	r2, r5
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	bf28      	it	cs
 8005c7e:	4632      	movcs	r2, r6
 8005c80:	f7ff ffca 	bl	8005c18 <memcpy>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fbbe 	bl	8005408 <_free_r>
 8005c8c:	463c      	mov	r4, r7
 8005c8e:	e7e0      	b.n	8005c52 <_realloc_r+0x1e>

08005c90 <_malloc_usable_size_r>:
 8005c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c94:	1f18      	subs	r0, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfbc      	itt	lt
 8005c9a:	580b      	ldrlt	r3, [r1, r0]
 8005c9c:	18c0      	addlt	r0, r0, r3
 8005c9e:	4770      	bx	lr

08005ca0 <_init>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	bf00      	nop
 8005ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca6:	bc08      	pop	{r3}
 8005ca8:	469e      	mov	lr, r3
 8005caa:	4770      	bx	lr

08005cac <_fini>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	bf00      	nop
 8005cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb2:	bc08      	pop	{r3}
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	4770      	bx	lr
