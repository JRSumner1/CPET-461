
Lab 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca8  08004ca8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cac  08004cac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004cb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000010  08004cc0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08004cc0  00006024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efc1  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002805  00000000  00000000  00015001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00017808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  000185c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c43  00000000  00000000  00019033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076e  00000000  00000000  0003fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef9f4  00000000  00000000  000503e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fdd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003680  00000000  00000000  0013fe1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bf0 	.word	0x08004bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004bf0 	.word	0x08004bf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000034 	.word	0x20000034
 80004f0:	20000088 	.word	0x20000088

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, StartTask1, osPriorityNormal, 0, 128);
 80004fa:	4b14      	ldr	r3, [pc, #80]	@ (800054c <MX_FREERTOS_Init+0x58>)
 80004fc:	f107 041c 	add.w	r4, r7, #28
 8000500:	461d      	mov	r5, r3
 8000502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(myTask1), NULL);
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fe6b 	bl	80031f0 <osThreadCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <MX_FREERTOS_Init+0x5c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, StartTask2, osPriorityNormal, 0, 128);
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_FREERTOS_Init+0x60>)
 8000522:	463c      	mov	r4, r7
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(myTask2), NULL);
 8000532:	463b      	mov	r3, r7
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fe5a 	bl	80031f0 <osThreadCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <MX_FREERTOS_Init+0x64>)
 8000540:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000542:	bf00      	nop
 8000544:	3738      	adds	r7, #56	@ 0x38
 8000546:	46bd      	mov	sp, r7
 8000548:	bdb0      	pop	{r4, r5, r7, pc}
 800054a:	bf00      	nop
 800054c:	08004c10 	.word	0x08004c10
 8000550:	2000002c 	.word	0x2000002c
 8000554:	08004c34 	.word	0x08004c34
 8000558:	20000030 	.word	0x20000030

0800055c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  for(;;)
  {
	osEvent event = osSignalWait(0x01, osWaitForever); // Wait for bit 0
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	f04f 32ff 	mov.w	r2, #4294967295
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f002 feca 	bl	8003308 <osSignalWait>
	if (event.status == osEventSignal)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b08      	cmp	r3, #8
 8000578:	d1f4      	bne.n	8000564 <StartTask1+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800057a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f000 fd91 	bl	80010a8 <HAL_GPIO_TogglePin>
  {
 8000586:	e7ed      	b.n	8000564 <StartTask1+0x8>

08000588 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osEvent event = osSignalWait(0x02, osWaitForever); // Wait for bit 0
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f002 feb4 	bl	8003308 <osSignalWait>
	if (event.status == osEventSignal)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b08      	cmp	r3, #8
 80005a4:	d1f4      	bne.n	8000590 <StartTask2+0x8>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80005a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ae:	f000 fd7b 	bl	80010a8 <HAL_GPIO_TogglePin>
  {
 80005b2:	e7ed      	b.n	8000590 <StartTask2+0x8>

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b30      	ldr	r3, [pc, #192]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a2f      	ldr	r2, [pc, #188]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a29      	ldr	r2, [pc, #164]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b27      	ldr	r3, [pc, #156]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b24      	ldr	r3, [pc, #144]	@ (800068c <MX_GPIO_Init+0xd8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a23      	ldr	r2, [pc, #140]	@ (800068c <MX_GPIO_Init+0xd8>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_GPIO_Init+0xd8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <MX_GPIO_Init+0xd8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a1d      	ldr	r2, [pc, #116]	@ (800068c <MX_GPIO_Init+0xd8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_GPIO_Init+0xd8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f000 fd20 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <MX_GPIO_Init+0xdc>)
 8000650:	f000 fb68 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 8000654:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f000 fb58 	bl	8000d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2105      	movs	r1, #5
 8000678:	2028      	movs	r0, #40	@ 0x28
 800067a:	f000 fb1c 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067e:	2028      	movs	r0, #40	@ 0x28
 8000680:	f000 fb35 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	48000800 	.word	0x48000800

08000694 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
static int pressCount = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B1_Pin)
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a4:	d11d      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        pressCount++;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x58>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a0f      	ldr	r2, [pc, #60]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x58>)
 80006ae:	6013      	str	r3, [r2, #0]
        if (pressCount == 1)
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x58>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d106      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x32>
        {
            // Set Task 1’s signal
            osSignalSet(Task1Handle, 0x01);
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fde2 	bl	8003288 <osSignalSet>
        else
        {
            pressCount = 0; // or handle 3rd press etc.
        }
    }
}
 80006c4:	e00d      	b.n	80006e2 <HAL_GPIO_EXTI_Callback+0x4e>
        else if (pressCount == 2)
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x58>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d106      	bne.n	80006dc <HAL_GPIO_EXTI_Callback+0x48>
            osSignalSet(Task2Handle, 0x20);
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2120      	movs	r1, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fdd7 	bl	8003288 <osSignalSet>
}
 80006da:	e002      	b.n	80006e2 <HAL_GPIO_EXTI_Callback+0x4e>
            pressCount = 0; // or handle 3rd press etc.
 80006dc:	4b03      	ldr	r3, [pc, #12]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000288 	.word	0x20000288
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	20000030 	.word	0x20000030

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 f984 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f80a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff56 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000708:	f000 f8c8 	bl	800089c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800070c:	f7ff fef2 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000710:	f002 fd67 	bl	80031e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <main+0x1c>

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	@ 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	@ 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fa36 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800073e:	f000 fcf3 	bl	8001128 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000748:	f000 f837 	bl	80007ba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2310      	movs	r3, #16
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000766:	230a      	movs	r3, #10
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800076a:	2307      	movs	r3, #7
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fd2a 	bl	80011d4 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000786:	f000 f818 	bl	80007ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f8f2 	bl	800198c <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ae:	f000 f804 	bl	80007ba <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3758      	adds	r7, #88	@ 0x58
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007be:	b672      	cpsid	i
}
 80007c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fa56 	bl	8000cb6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f935 	bl	8000ac0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000856:	f003 fae9 	bl	8003e2c <xTaskGetSchedulerState>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d001      	beq.n	8000864 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000860:	f003 ff1a 	bl	8004698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800086c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000870:	f000 fc34 	bl	80010dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	f001 ff34 	bl	800274c <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f7ff ff66 	bl	80007ba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000028c 	.word	0x2000028c
 80008f8:	40004400 	.word	0x40004400

080008fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0ac      	sub	sp, #176	@ 0xb0
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2288      	movs	r2, #136	@ 0x88
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f93b 	bl	8004b98 <memset>
  if(uartHandle->Instance==USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <HAL_UART_MspInit+0xb0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d13b      	bne.n	80009a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fa4b 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000944:	f7ff ff39 	bl	80007ba <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094c:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 800094e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000952:	6593      	str	r3, [r2, #88]	@ 0x58
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 8000956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_UART_MspInit+0xb4>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000978:	230c      	movs	r3, #12
 800097a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000990:	2307      	movs	r3, #7
 8000992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f000 f9c0 	bl	8000d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	37b0      	adds	r7, #176	@ 0xb0
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ff5e 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f004 f8e1 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fe87 	bl	80006f8 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f8:	08004cb0 	.word	0x08004cb0
  ldr r2, =_sbss
 80009fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a00:	20001024 	.word	0x20001024

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_Init+0x3c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <HAL_Init+0x3c>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f000 f93e 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a24:	200f      	movs	r0, #15
 8000a26:	f000 f80f 	bl	8000a48 <HAL_InitTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	e001      	b.n	8000a3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a36:	f7ff fec7 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_InitTick+0x6c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d023      	beq.n	8000aa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_InitTick+0x70>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_InitTick+0x6c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f949 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10f      	bne.n	8000a9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d809      	bhi.n	8000a98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f913 	bl	8000cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_InitTick+0x74>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	e007      	b.n	8000aa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e004      	b.n	8000aa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e001      	b.n	8000aa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000314 	.word	0x20000314

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000314 	.word	0x20000314

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e17f      	b.n	8001034 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 8171 	beq.w	800102e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x40>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 0201 	and.w	r2, r3, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d118      	bne.n	8000e04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	6939      	ldr	r1, [r7, #16]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80ac 	beq.w	800102e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <HAL_GPIO_Init+0x330>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	4a5e      	ldr	r2, [pc, #376]	@ (8001054 <HAL_GPIO_Init+0x330>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <HAL_GPIO_Init+0x330>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eee:	4a5a      	ldr	r2, [pc, #360]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f18:	d025      	beq.n	8000f66 <HAL_GPIO_Init+0x242>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800105c <HAL_GPIO_Init+0x338>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01f      	beq.n	8000f62 <HAL_GPIO_Init+0x23e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	@ (8001060 <HAL_GPIO_Init+0x33c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x23a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001064 <HAL_GPIO_Init+0x340>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x236>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_GPIO_Init+0x344>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x232>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <HAL_GPIO_Init+0x348>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x22e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4a      	ldr	r2, [pc, #296]	@ (8001070 <HAL_GPIO_Init+0x34c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x22a>
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e00c      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e00a      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e008      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e004      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x244>
 8000f66:	2300      	movs	r3, #0
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	f002 0203 	and.w	r2, r2, #3
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	4093      	lsls	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f78:	4937      	ldr	r1, [pc, #220]	@ (8001058 <HAL_GPIO_Init+0x334>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000faa:	4a32      	ldr	r2, [pc, #200]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd4:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_GPIO_Init+0x350>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001028:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <HAL_GPIO_Init+0x350>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	f47f ae78 	bne.w	8000d34 <HAL_GPIO_Init+0x10>
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	48001800 	.word	0x48001800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4013      	ands	r3, r2
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43d9      	mvns	r1, r3
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	400b      	ands	r3, r1
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff faca 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <HAL_PWREx_GetVoltageRange+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000

08001128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001136:	d130      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001144:	d038      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800114e:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001150:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001154:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2232      	movs	r2, #50	@ 0x32
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9b      	lsrs	r3, r3, #18
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116c:	e002      	b.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001180:	d102      	bne.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f2      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001194:	d110      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e00f      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a6:	d007      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011b0:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e3ca      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e6:	4b97      	ldr	r3, [pc, #604]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f0:	4b94      	ldr	r3, [pc, #592]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80e4 	beq.w	80013d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_RCC_OscConfig+0x4a>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	f040 808b 	bne.w	800132c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b01      	cmp	r3, #1
 800121a:	f040 8087 	bne.w	800132c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121e:	4b89      	ldr	r3, [pc, #548]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_RCC_OscConfig+0x62>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e3a2      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_RCC_OscConfig+0x7c>
 8001246:	4b7f      	ldr	r3, [pc, #508]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800124e:	e005      	b.n	800125c <HAL_RCC_OscConfig+0x88>
 8001250:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800125c:	4293      	cmp	r3, r2
 800125e:	d223      	bcs.n	80012a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fd55 	bl	8001d14 <RCC_SetFlashLatencyFromMSIRange>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e383      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001274:	4b73      	ldr	r3, [pc, #460]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a72      	ldr	r2, [pc, #456]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	496d      	ldr	r1, [pc, #436]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001292:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4968      	ldr	r1, [pc, #416]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
 80012a6:	e025      	b.n	80012f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a8:	4b66      	ldr	r3, [pc, #408]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a65      	ldr	r2, [pc, #404]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b63      	ldr	r3, [pc, #396]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4960      	ldr	r1, [pc, #384]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	495b      	ldr	r1, [pc, #364]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fd15 	bl	8001d14 <RCC_SetFlashLatencyFromMSIRange>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e343      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f4:	f000 fc4a 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b52      	ldr	r3, [pc, #328]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	4950      	ldr	r1, [pc, #320]	@ (8001448 <HAL_RCC_OscConfig+0x274>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	4a4e      	ldr	r2, [pc, #312]	@ (800144c <HAL_RCC_OscConfig+0x278>)
 8001312:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <HAL_RCC_OscConfig+0x27c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb95 	bl	8000a48 <HAL_InitTick>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d052      	beq.n	80013ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	e327      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d032      	beq.n	800139a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a42      	ldr	r2, [pc, #264]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001340:	f7ff fbd2 	bl	8000ae8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001348:	f7ff fbce 	bl	8000ae8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e310      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a36      	ldr	r2, [pc, #216]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4931      	ldr	r1, [pc, #196]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001384:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	492c      	ldr	r1, [pc, #176]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
 8001398:	e01a      	b.n	80013d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb9f 	bl	8000ae8 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb9b 	bl	8000ae8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e2dd      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x1da>
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d074      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x21a>
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d10e      	bne.n	8001406 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d10b      	bne.n	8001406 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d064      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d160      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e2ba      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x24a>
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e026      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001426:	d115      	bne.n	8001454 <HAL_RCC_OscConfig+0x280>
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800142e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a02      	ldr	r2, [pc, #8]	@ (8001444 <HAL_RCC_OscConfig+0x270>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	08004c58 	.word	0x08004c58
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004
 8001454:	4ba0      	ldr	r3, [pc, #640]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a9f      	ldr	r2, [pc, #636]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b9d      	ldr	r3, [pc, #628]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a9c      	ldr	r2, [pc, #624]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fb38 	bl	8000ae8 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fb34 	bl	8000ae8 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e276      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	4b92      	ldr	r3, [pc, #584]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x2a8>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fb24 	bl	8000ae8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb20 	bl	8000ae8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e262      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b6:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d0>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d060      	beq.n	8001594 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x310>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	4b7c      	ldr	r3, [pc, #496]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x328>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e23f      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	4973      	ldr	r1, [pc, #460]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	e040      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d023      	beq.n	8001562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	4b6f      	ldr	r3, [pc, #444]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fadf 	bl	8000ae8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fadb 	bl	8000ae8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e21d      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001540:	4b65      	ldr	r3, [pc, #404]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b62      	ldr	r3, [pc, #392]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	495f      	ldr	r1, [pc, #380]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b5d      	ldr	r3, [pc, #372]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5c      	ldr	r2, [pc, #368]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fabb 	bl	8000ae8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fab7 	bl	8000ae8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1f9      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001588:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4b4b      	ldr	r3, [pc, #300]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ae:	4a4a      	ldr	r2, [pc, #296]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa96 	bl	8000ae8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fa92 	bl	8000ae8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1d4      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e8:	4a3b      	ldr	r2, [pc, #236]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa79 	bl	8000ae8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fa75 	bl	8000ae8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1b7      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160c:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80a6 	beq.w	8001774 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800162c:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	4a26      	ldr	r2, [pc, #152]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	@ 0x58
 8001644:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001650:	2301      	movs	r3, #1
 8001652:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_RCC_OscConfig+0x508>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_RCC_OscConfig+0x508>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_RCC_OscConfig+0x508>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166c:	f7ff fa3c 	bl	8000ae8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff fa38 	bl	8000ae8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e17a      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_RCC_OscConfig+0x508>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x4d8>
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016aa:	e029      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d115      	bne.n	80016e0 <HAL_RCC_OscConfig+0x50c>
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a9b      	ldr	r2, [pc, #620]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	4b98      	ldr	r3, [pc, #608]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a97      	ldr	r2, [pc, #604]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d016      	beq.n	8001736 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff f9ee 	bl	8000ae8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f9ea 	bl	8000ae8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e12a      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	4b8b      	ldr	r3, [pc, #556]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ed      	beq.n	8001710 <HAL_RCC_OscConfig+0x53c>
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff f9d7 	bl	8000ae8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f9d3 	bl	8000ae8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e113      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	4b7f      	ldr	r3, [pc, #508]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ed      	bne.n	800173e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001762:	7ffb      	ldrb	r3, [r7, #31]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b7a      	ldr	r3, [pc, #488]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	4a79      	ldr	r2, [pc, #484]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001772:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80fe 	beq.w	800197a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	2b02      	cmp	r3, #2
 8001784:	f040 80d0 	bne.w	8001928 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001788:	4b72      	ldr	r3, [pc, #456]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	429a      	cmp	r2, r3
 800179a:	d130      	bne.n	80017fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	3b01      	subs	r3, #1
 80017a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d127      	bne.n	80017fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11f      	bne.n	80017fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017c8:	2a07      	cmp	r2, #7
 80017ca:	bf14      	ite	ne
 80017cc:	2201      	movne	r2, #1
 80017ce:	2200      	moveq	r2, #0
 80017d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d113      	bne.n	80017fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	3b01      	subs	r3, #1
 80017e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	3b01      	subs	r3, #1
 80017f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d06e      	beq.n	80018dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d069      	beq.n	80018d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0ad      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001820:	4b4c      	ldr	r3, [pc, #304]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a4b      	ldr	r2, [pc, #300]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800182c:	f7ff f95c 	bl	8000ae8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f958 	bl	8000ae8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e09a      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001846:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001852:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <HAL_RCC_OscConfig+0x784>)
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001862:	3a01      	subs	r2, #1
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800186c:	0212      	lsls	r2, r2, #8
 800186e:	4311      	orrs	r1, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001874:	0852      	lsrs	r2, r2, #1
 8001876:	3a01      	subs	r2, #1
 8001878:	0552      	lsls	r2, r2, #21
 800187a:	4311      	orrs	r1, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001880:	0852      	lsrs	r2, r2, #1
 8001882:	3a01      	subs	r2, #1
 8001884:	0652      	lsls	r2, r2, #25
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800188c:	0912      	lsrs	r2, r2, #4
 800188e:	0452      	lsls	r2, r2, #17
 8001890:	430a      	orrs	r2, r1
 8001892:	4930      	ldr	r1, [pc, #192]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2d      	ldr	r2, [pc, #180]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b0:	f7ff f91a 	bl	8000ae8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f916 	bl	8000ae8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e058      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d6:	e050      	b.n	800197a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e04f      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d148      	bne.n	800197a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001900:	f7ff f8f2 	bl	8000ae8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f8ee 	bl	8000ae8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e030      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x734>
 8001926:	e028      	b.n	800197a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d023      	beq.n	8001976 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_RCC_OscConfig+0x780>)
 8001934:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f8d5 	bl	8000ae8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e00c      	b.n	800195c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f8d1 	bl	8000ae8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d905      	bls.n	800195c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e013      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
 8001954:	40021000 	.word	0x40021000
 8001958:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ec      	bne.n	8001942 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4905      	ldr	r1, [pc, #20]	@ (8001984 <HAL_RCC_OscConfig+0x7b0>)
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_OscConfig+0x7b4>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e001      	b.n	800197a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	feeefffc 	.word	0xfeeefffc

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0e7      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b75      	ldr	r3, [pc, #468]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b72      	ldr	r3, [pc, #456]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4970      	ldr	r1, [pc, #448]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cf      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b66      	ldr	r3, [pc, #408]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d908      	bls.n	80019fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b63      	ldr	r3, [pc, #396]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4960      	ldr	r1, [pc, #384]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d04c      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b5a      	ldr	r3, [pc, #360]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0a6      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	4b54      	ldr	r3, [pc, #336]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e09a      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a42:	4b4e      	ldr	r3, [pc, #312]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e08e      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e086      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4943      	ldr	r1, [pc, #268]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a74:	f7ff f838 	bl	8000ae8 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f834 	bl	8000ae8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e06e      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d208      	bcs.n	8001ad2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	492b      	ldr	r1, [pc, #172]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad2:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d210      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 0207 	bic.w	r2, r3, #7
 8001ae8:	4923      	ldr	r1, [pc, #140]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af0:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_RCC_ClockConfig+0x1ec>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e036      	b.n	8001b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4918      	ldr	r1, [pc, #96]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4910      	ldr	r1, [pc, #64]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b40:	f000 f824 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f4>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_RCC_ClockConfig+0x1fc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe ff6f 	bl	8000a48 <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08004c58 	.word	0x08004c58
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d121      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d11e      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc0:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e005      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001be8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	e004      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c10:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d134      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xac>
 8001c30:	e005      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3a:	617b      	str	r3, [r7, #20]
      break;
 8001c3c:	e002      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	3301      	adds	r3, #1
 8001c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fb03 f202 	mul.w	r2, r3, r2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0e5b      	lsrs	r3, r3, #25
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c84:	69bb      	ldr	r3, [r7, #24]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	@ 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08004c70 	.word	0x08004c70
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4904      	ldr	r1, [pc, #16]	@ (8001ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08004c68 	.word	0x08004c68

08001ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cec:	f7ff ffda 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4904      	ldr	r1, [pc, #16]	@ (8001d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08004c68 	.word	0x08004c68

08001d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d20:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d2c:	f7ff f9ee 	bl	800110c <HAL_PWREx_GetVoltageRange>
 8001d30:	6178      	str	r0, [r7, #20]
 8001d32:	e014      	b.n	8001d5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b25      	ldr	r3, [pc, #148]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	4a24      	ldr	r2, [pc, #144]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d40:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d4c:	f7ff f9de 	bl	800110c <HAL_PWREx_GetVoltageRange>
 8001d50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d64:	d10b      	bne.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b80      	cmp	r3, #128	@ 0x80
 8001d6a:	d919      	bls.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d70:	d902      	bls.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d72:	2302      	movs	r3, #2
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e013      	b.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d78:	2301      	movs	r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e010      	b.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	@ 0x80
 8001d82:	d902      	bls.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d84:	2303      	movs	r3, #3
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e00a      	b.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b80      	cmp	r3, #128	@ 0x80
 8001d8e:	d102      	bne.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d90:	2302      	movs	r3, #2
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e004      	b.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b70      	cmp	r3, #112	@ 0x70
 8001d9a:	d101      	bne.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 0207 	bic.w	r2, r3, #7
 8001da8:	4909      	ldr	r1, [pc, #36]	@ (8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d001      	beq.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001de0:	2300      	movs	r3, #0
 8001de2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d041      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001df4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001df8:	d02a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dfa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dfe:	d824      	bhi.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e04:	d008      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e0a:	d81e      	bhi.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e14:	d010      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e16:	e018      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e18:	4b86      	ldr	r3, [pc, #536]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a85      	ldr	r2, [pc, #532]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e24:	e015      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fabb 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8001e32:	4603      	mov	r3, r0
 8001e34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e36:	e00c      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3320      	adds	r3, #32
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fba6 	bl	8002590 <RCCEx_PLLSAI2_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e48:	e003      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e4e:	e000      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e58:	4b76      	ldr	r3, [pc, #472]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e66:	4973      	ldr	r1, [pc, #460]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e6e:	e001      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d041      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e88:	d02a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e8e:	d824      	bhi.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e94:	d008      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e9a:	d81e      	bhi.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d010      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ea6:	e018      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ea8:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a61      	ldr	r2, [pc, #388]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fa73 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec6:	e00c      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3320      	adds	r3, #32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fb5e 	bl	8002590 <RCCEx_PLLSAI2_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed8:	e003      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ede:	e000      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ee8:	4b52      	ldr	r3, [pc, #328]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef6:	494f      	ldr	r1, [pc, #316]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001efe:	e001      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a0 	beq.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b41      	ldr	r3, [pc, #260]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	4a40      	ldr	r2, [pc, #256]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f38:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fdc8 	bl	8000ae8 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fdc4 	bl	8000ae8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d902      	bls.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f6e:	e005      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f70:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d15c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f82:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01f      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d019      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe fd83 	bl	8000ae8 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fd7f 	bl	8000ae8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d902      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	74fb      	strb	r3, [r7, #19]
            break;
 8001ffc:	e006      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ec      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002022:	4904      	ldr	r1, [pc, #16]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800202a:	e009      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
 8002030:	e006      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002040:	7c7b      	ldrb	r3, [r7, #17]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b9e      	ldr	r3, [pc, #632]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	4a9d      	ldr	r2, [pc, #628]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002050:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205e:	4b98      	ldr	r3, [pc, #608]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f023 0203 	bic.w	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	4994      	ldr	r1, [pc, #592]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002080:	4b8f      	ldr	r3, [pc, #572]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f023 020c 	bic.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	498c      	ldr	r1, [pc, #560]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020a2:	4b87      	ldr	r3, [pc, #540]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	4983      	ldr	r1, [pc, #524]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c4:	4b7e      	ldr	r3, [pc, #504]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	497b      	ldr	r1, [pc, #492]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020e6:	4b76      	ldr	r3, [pc, #472]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f4:	4972      	ldr	r1, [pc, #456]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002108:	4b6d      	ldr	r3, [pc, #436]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	496a      	ldr	r1, [pc, #424]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212a:	4b65      	ldr	r3, [pc, #404]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	4961      	ldr	r1, [pc, #388]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800214c:	4b5c      	ldr	r3, [pc, #368]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215a:	4959      	ldr	r1, [pc, #356]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216e:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002174:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	4950      	ldr	r1, [pc, #320]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002190:	4b4b      	ldr	r3, [pc, #300]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	4948      	ldr	r1, [pc, #288]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b2:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	493f      	ldr	r1, [pc, #252]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d028      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d4:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021e2:	4937      	ldr	r1, [pc, #220]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f2:	d106      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f4:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fe:	60d3      	str	r3, [r2, #12]
 8002200:	e011      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002206:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220a:	d10c      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f8c8 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002232:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	491f      	ldr	r1, [pc, #124]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002250:	d106      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002252:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a1a      	ldr	r2, [pc, #104]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225c:	60d3      	str	r3, [r2, #12]
 800225e:	e011      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002268:	d10c      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f899 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002276:	4603      	mov	r3, r0
 8002278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02b      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ae:	d109      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a02      	ldr	r2, [pc, #8]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ba:	60d3      	str	r3, [r2, #12]
 80022bc:	e014      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f867 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02f      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f4:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002302:	4928      	ldr	r1, [pc, #160]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800230e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002312:	d10d      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	2102      	movs	r1, #2
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f844 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d014      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	74bb      	strb	r3, [r7, #18]
 800232e:	e011      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002338:	d10c      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3320      	adds	r3, #32
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f925 	bl	8002590 <RCCEx_PLLSAI2_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002360:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002392:	4904      	ldr	r1, [pc, #16]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800239a:	7cbb      	ldrb	r3, [r7, #18]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b6:	4b75      	ldr	r3, [pc, #468]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023c2:	4b72      	ldr	r3, [pc, #456]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10d      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
       ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023da:	4b6c      	ldr	r3, [pc, #432]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
       ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d047      	beq.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e044      	b.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d018      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x86>
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d825      	bhi.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <RCCEx_PLLSAI1_Config+0x62>
 8002404:	2b02      	cmp	r3, #2
 8002406:	d009      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x74>
 8002408:	e020      	b.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241a:	e01a      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800241c:	4b5b      	ldr	r3, [pc, #364]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e013      	b.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800242e:	4b57      	ldr	r3, [pc, #348]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800243a:	4b54      	ldr	r3, [pc, #336]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800244a:	e006      	b.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e004      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002452:	bf00      	nop
 8002454:	e002      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002456:	bf00      	nop
 8002458:	e000      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245a:	bf00      	nop
    }

    if(status == HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002462:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	430b      	orrs	r3, r1
 8002478:	4944      	ldr	r1, [pc, #272]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d17d      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002484:	4b41      	ldr	r3, [pc, #260]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a40      	ldr	r2, [pc, #256]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800248e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fb2a 	bl	8000ae8 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002496:	e009      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002498:	f7fe fb26 	bl	8000ae8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	73fb      	strb	r3, [r7, #15]
        break;
 80024aa:	e005      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ef      	bne.n	8002498 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d160      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d111      	bne.n	80024e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6892      	ldr	r2, [r2, #8]
 80024d4:	0211      	lsls	r1, r2, #8
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	0912      	lsrs	r2, r2, #4
 80024dc:	0452      	lsls	r2, r2, #17
 80024de:	430a      	orrs	r2, r1
 80024e0:	492a      	ldr	r1, [pc, #168]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	610b      	str	r3, [r1, #16]
 80024e6:	e027      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d112      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ee:	4b27      	ldr	r3, [pc, #156]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	0211      	lsls	r1, r2, #8
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6912      	ldr	r2, [r2, #16]
 8002504:	0852      	lsrs	r2, r2, #1
 8002506:	3a01      	subs	r2, #1
 8002508:	0552      	lsls	r2, r2, #21
 800250a:	430a      	orrs	r2, r1
 800250c:	491f      	ldr	r1, [pc, #124]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	610b      	str	r3, [r1, #16]
 8002512:	e011      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800251c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	0211      	lsls	r1, r2, #8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6952      	ldr	r2, [r2, #20]
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0652      	lsls	r2, r2, #25
 8002530:	430a      	orrs	r2, r1
 8002532:	4916      	ldr	r1, [pc, #88]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a13      	ldr	r2, [pc, #76]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7fe fad0 	bl	8000ae8 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800254a:	e009      	b.n	8002560 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800254c:	f7fe facc 	bl	8000ae8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	73fb      	strb	r3, [r7, #15]
          break;
 800255e:	e005      	b.n	800256c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ef      	beq.n	800254c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	4904      	ldr	r1, [pc, #16]	@ (800258c <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259e:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d018      	beq.n	80025dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025aa:	4b67      	ldr	r3, [pc, #412]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0203 	and.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10d      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
       ||
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025c2:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
       ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d047      	beq.n	8002666 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e044      	b.n	8002666 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d018      	beq.n	8002616 <RCCEx_PLLSAI2_Config+0x86>
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d825      	bhi.n	8002634 <RCCEx_PLLSAI2_Config+0xa4>
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <RCCEx_PLLSAI2_Config+0x62>
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d009      	beq.n	8002604 <RCCEx_PLLSAI2_Config+0x74>
 80025f0:	e020      	b.n	8002634 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025f2:	4b55      	ldr	r3, [pc, #340]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e01a      	b.n	800263a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002604:	4b50      	ldr	r3, [pc, #320]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002614:	e013      	b.n	800263e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002616:	4b4c      	ldr	r3, [pc, #304]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002632:	e006      	b.n	8002642 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e004      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002642:	bf00      	nop
    }

    if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800264a:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	430b      	orrs	r3, r1
 8002660:	4939      	ldr	r1, [pc, #228]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d167      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800266c:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a35      	ldr	r2, [pc, #212]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fa36 	bl	8000ae8 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800267e:	e009      	b.n	8002694 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002680:	f7fe fa32 	bl	8000ae8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d902      	bls.n	8002694 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	73fb      	strb	r3, [r7, #15]
        break;
 8002692:	e005      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002694:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ef      	bne.n	8002680 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d14a      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026ac:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	0211      	lsls	r1, r2, #8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	0912      	lsrs	r2, r2, #4
 80026c4:	0452      	lsls	r2, r2, #17
 80026c6:	430a      	orrs	r2, r1
 80026c8:	491f      	ldr	r1, [pc, #124]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	614b      	str	r3, [r1, #20]
 80026ce:	e011      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6892      	ldr	r2, [r2, #8]
 80026e0:	0211      	lsls	r1, r2, #8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6912      	ldr	r2, [r2, #16]
 80026e6:	0852      	lsrs	r2, r2, #1
 80026e8:	3a01      	subs	r2, #1
 80026ea:	0652      	lsls	r2, r2, #25
 80026ec:	430a      	orrs	r2, r1
 80026ee:	4916      	ldr	r1, [pc, #88]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe f9f2 	bl	8000ae8 <HAL_GetTick>
 8002704:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002706:	e009      	b.n	800271c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002708:	f7fe f9ee 	bl	8000ae8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	73fb      	strb	r3, [r7, #15]
          break;
 800271a:	e005      	b.n	8002728 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ef      	beq.n	8002708 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4904      	ldr	r1, [pc, #16]	@ (8002748 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e040      	b.n	80027e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe f8c4 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fae0 	bl	8002d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f825 	bl	80027e8 <UART_SetConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e01b      	b.n	80027e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb5f 	bl	8002e9c <UART_CheckIdleState>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b08a      	sub	sp, #40	@ 0x28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4313      	orrs	r3, r2
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa8 <UART_SetConfig+0x2c0>)
 8002818:	4013      	ands	r3, r2
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002820:	430b      	orrs	r3, r1
 8002822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a99      	ldr	r2, [pc, #612]	@ (8002aac <UART_SetConfig+0x2c4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	4313      	orrs	r3, r2
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a90      	ldr	r2, [pc, #576]	@ (8002ab0 <UART_SetConfig+0x2c8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d126      	bne.n	80028c0 <UART_SetConfig+0xd8>
 8002872:	4b90      	ldr	r3, [pc, #576]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d81b      	bhi.n	80028b8 <UART_SetConfig+0xd0>
 8002880:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <UART_SetConfig+0xa0>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028a9 	.word	0x080028a9
 8002890:	080028a1 	.word	0x080028a1
 8002894:	080028b1 	.word	0x080028b1
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289e:	e116      	b.n	8002ace <UART_SetConfig+0x2e6>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a6:	e112      	b.n	8002ace <UART_SetConfig+0x2e6>
 80028a8:	2304      	movs	r3, #4
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ae:	e10e      	b.n	8002ace <UART_SetConfig+0x2e6>
 80028b0:	2308      	movs	r3, #8
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028b6:	e10a      	b.n	8002ace <UART_SetConfig+0x2e6>
 80028b8:	2310      	movs	r3, #16
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028be:	e106      	b.n	8002ace <UART_SetConfig+0x2e6>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab8 <UART_SetConfig+0x2d0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d138      	bne.n	800293c <UART_SetConfig+0x154>
 80028ca:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d82d      	bhi.n	8002934 <UART_SetConfig+0x14c>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <UART_SetConfig+0xf8>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002935 	.word	0x08002935
 80028ec:	08002935 	.word	0x08002935
 80028f0:	08002925 	.word	0x08002925
 80028f4:	08002935 	.word	0x08002935
 80028f8:	08002935 	.word	0x08002935
 80028fc:	08002935 	.word	0x08002935
 8002900:	0800291d 	.word	0x0800291d
 8002904:	08002935 	.word	0x08002935
 8002908:	08002935 	.word	0x08002935
 800290c:	08002935 	.word	0x08002935
 8002910:	0800292d 	.word	0x0800292d
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291a:	e0d8      	b.n	8002ace <UART_SetConfig+0x2e6>
 800291c:	2302      	movs	r3, #2
 800291e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002922:	e0d4      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002924:	2304      	movs	r3, #4
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292a:	e0d0      	b.n	8002ace <UART_SetConfig+0x2e6>
 800292c:	2308      	movs	r3, #8
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002932:	e0cc      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002934:	2310      	movs	r3, #16
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293a:	e0c8      	b.n	8002ace <UART_SetConfig+0x2e6>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <UART_SetConfig+0x2d4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d125      	bne.n	8002992 <UART_SetConfig+0x1aa>
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002950:	2b30      	cmp	r3, #48	@ 0x30
 8002952:	d016      	beq.n	8002982 <UART_SetConfig+0x19a>
 8002954:	2b30      	cmp	r3, #48	@ 0x30
 8002956:	d818      	bhi.n	800298a <UART_SetConfig+0x1a2>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d00a      	beq.n	8002972 <UART_SetConfig+0x18a>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d814      	bhi.n	800298a <UART_SetConfig+0x1a2>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <UART_SetConfig+0x182>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d008      	beq.n	800297a <UART_SetConfig+0x192>
 8002968:	e00f      	b.n	800298a <UART_SetConfig+0x1a2>
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002970:	e0ad      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002972:	2302      	movs	r3, #2
 8002974:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002978:	e0a9      	b.n	8002ace <UART_SetConfig+0x2e6>
 800297a:	2304      	movs	r3, #4
 800297c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002980:	e0a5      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002982:	2308      	movs	r3, #8
 8002984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002988:	e0a1      	b.n	8002ace <UART_SetConfig+0x2e6>
 800298a:	2310      	movs	r3, #16
 800298c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002990:	e09d      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac0 <UART_SetConfig+0x2d8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d125      	bne.n	80029e8 <UART_SetConfig+0x200>
 800299c:	4b45      	ldr	r3, [pc, #276]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029a8:	d016      	beq.n	80029d8 <UART_SetConfig+0x1f0>
 80029aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80029ac:	d818      	bhi.n	80029e0 <UART_SetConfig+0x1f8>
 80029ae:	2b80      	cmp	r3, #128	@ 0x80
 80029b0:	d00a      	beq.n	80029c8 <UART_SetConfig+0x1e0>
 80029b2:	2b80      	cmp	r3, #128	@ 0x80
 80029b4:	d814      	bhi.n	80029e0 <UART_SetConfig+0x1f8>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <UART_SetConfig+0x1d8>
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d008      	beq.n	80029d0 <UART_SetConfig+0x1e8>
 80029be:	e00f      	b.n	80029e0 <UART_SetConfig+0x1f8>
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c6:	e082      	b.n	8002ace <UART_SetConfig+0x2e6>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ce:	e07e      	b.n	8002ace <UART_SetConfig+0x2e6>
 80029d0:	2304      	movs	r3, #4
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d6:	e07a      	b.n	8002ace <UART_SetConfig+0x2e6>
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029de:	e076      	b.n	8002ace <UART_SetConfig+0x2e6>
 80029e0:	2310      	movs	r3, #16
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e072      	b.n	8002ace <UART_SetConfig+0x2e6>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a35      	ldr	r2, [pc, #212]	@ (8002ac4 <UART_SetConfig+0x2dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12a      	bne.n	8002a48 <UART_SetConfig+0x260>
 80029f2:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a00:	d01a      	beq.n	8002a38 <UART_SetConfig+0x250>
 8002a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a06:	d81b      	bhi.n	8002a40 <UART_SetConfig+0x258>
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0c:	d00c      	beq.n	8002a28 <UART_SetConfig+0x240>
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a12:	d815      	bhi.n	8002a40 <UART_SetConfig+0x258>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <UART_SetConfig+0x238>
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1c:	d008      	beq.n	8002a30 <UART_SetConfig+0x248>
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x258>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a26:	e052      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2e:	e04e      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a30:	2304      	movs	r3, #4
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a36:	e04a      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a38:	2308      	movs	r3, #8
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3e:	e046      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a40:	2310      	movs	r3, #16
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a46:	e042      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <UART_SetConfig+0x2c4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d13a      	bne.n	8002ac8 <UART_SetConfig+0x2e0>
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <UART_SetConfig+0x2cc>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a60:	d01a      	beq.n	8002a98 <UART_SetConfig+0x2b0>
 8002a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a66:	d81b      	bhi.n	8002aa0 <UART_SetConfig+0x2b8>
 8002a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a6c:	d00c      	beq.n	8002a88 <UART_SetConfig+0x2a0>
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a72:	d815      	bhi.n	8002aa0 <UART_SetConfig+0x2b8>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <UART_SetConfig+0x298>
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7c:	d008      	beq.n	8002a90 <UART_SetConfig+0x2a8>
 8002a7e:	e00f      	b.n	8002aa0 <UART_SetConfig+0x2b8>
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a86:	e022      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8e:	e01e      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a90:	2304      	movs	r3, #4
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e01a      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e016      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e012      	b.n	8002ace <UART_SetConfig+0x2e6>
 8002aa8:	efff69f3 	.word	0xefff69f3
 8002aac:	40008000 	.word	0x40008000
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	40004800 	.word	0x40004800
 8002ac0:	40004c00 	.word	0x40004c00
 8002ac4:	40005000 	.word	0x40005000
 8002ac8:	2310      	movs	r3, #16
 8002aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8002d50 <UART_SetConfig+0x568>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d17a      	bne.n	8002bce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d824      	bhi.n	8002b2a <UART_SetConfig+0x342>
 8002ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <UART_SetConfig+0x300>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b2b 	.word	0x08002b2b
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002b2b 	.word	0x08002b2b
 8002af8:	08002b1b 	.word	0x08002b1b
 8002afc:	08002b2b 	.word	0x08002b2b
 8002b00:	08002b2b 	.word	0x08002b2b
 8002b04:	08002b2b 	.word	0x08002b2b
 8002b08:	08002b23 	.word	0x08002b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f7ff f8d6 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002b10:	61f8      	str	r0, [r7, #28]
        break;
 8002b12:	e010      	b.n	8002b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b14:	4b8f      	ldr	r3, [pc, #572]	@ (8002d54 <UART_SetConfig+0x56c>)
 8002b16:	61fb      	str	r3, [r7, #28]
        break;
 8002b18:	e00d      	b.n	8002b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b1a:	f7ff f837 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002b1e:	61f8      	str	r0, [r7, #28]
        break;
 8002b20:	e009      	b.n	8002b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b26:	61fb      	str	r3, [r7, #28]
        break;
 8002b28:	e005      	b.n	8002b36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80fb 	beq.w	8002d34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d305      	bcc.n	8002b5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d903      	bls.n	8002b62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b60:	e0e8      	b.n	8002d34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2200      	movs	r2, #0
 8002b66:	461c      	mov	r4, r3
 8002b68:	4615      	mov	r5, r2
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	022b      	lsls	r3, r5, #8
 8002b74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b78:	0222      	lsls	r2, r4, #8
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	6849      	ldr	r1, [r1, #4]
 8002b7e:	0849      	lsrs	r1, r1, #1
 8002b80:	2000      	movs	r0, #0
 8002b82:	4688      	mov	r8, r1
 8002b84:	4681      	mov	r9, r0
 8002b86:	eb12 0a08 	adds.w	sl, r2, r8
 8002b8a:	eb43 0b09 	adc.w	fp, r3, r9
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	4659      	mov	r1, fp
 8002ba0:	f7fd fb16 	bl	80001d0 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bb2:	d308      	bcc.n	8002bc6 <UART_SetConfig+0x3de>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bba:	d204      	bcs.n	8002bc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e0b6      	b.n	8002d34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bcc:	e0b2      	b.n	8002d34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bd6:	d15e      	bne.n	8002c96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d828      	bhi.n	8002c32 <UART_SetConfig+0x44a>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <UART_SetConfig+0x400>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c0d 	.word	0x08002c0d
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	08002c1d 	.word	0x08002c1d
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c23 	.word	0x08002c23
 8002bfc:	08002c33 	.word	0x08002c33
 8002c00:	08002c33 	.word	0x08002c33
 8002c04:	08002c33 	.word	0x08002c33
 8002c08:	08002c2b 	.word	0x08002c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7ff f856 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002c10:	61f8      	str	r0, [r7, #28]
        break;
 8002c12:	e014      	b.n	8002c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c14:	f7ff f868 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 8002c18:	61f8      	str	r0, [r7, #28]
        break;
 8002c1a:	e010      	b.n	8002c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d54 <UART_SetConfig+0x56c>)
 8002c1e:	61fb      	str	r3, [r7, #28]
        break;
 8002c20:	e00d      	b.n	8002c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c22:	f7fe ffb3 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002c26:	61f8      	str	r0, [r7, #28]
        break;
 8002c28:	e009      	b.n	8002c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c2e:	61fb      	str	r3, [r7, #28]
        break;
 8002c30:	e005      	b.n	8002c3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d077      	beq.n	8002d34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005a      	lsls	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	441a      	add	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d916      	bls.n	8002c8e <UART_SetConfig+0x4a6>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d212      	bcs.n	8002c8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f023 030f 	bic.w	r3, r3, #15
 8002c70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	8afb      	ldrh	r3, [r7, #22]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	8afa      	ldrh	r2, [r7, #22]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	e052      	b.n	8002d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c94:	e04e      	b.n	8002d34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d827      	bhi.n	8002cee <UART_SetConfig+0x506>
 8002c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UART_SetConfig+0x4bc>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cc9 	.word	0x08002cc9
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	08002cd9 	.word	0x08002cd9
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002cdf 	.word	0x08002cdf
 8002cb8:	08002cef 	.word	0x08002cef
 8002cbc:	08002cef 	.word	0x08002cef
 8002cc0:	08002cef 	.word	0x08002cef
 8002cc4:	08002ce7 	.word	0x08002ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7fe fff8 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002ccc:	61f8      	str	r0, [r7, #28]
        break;
 8002cce:	e014      	b.n	8002cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7ff f80a 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	61f8      	str	r0, [r7, #28]
        break;
 8002cd6:	e010      	b.n	8002cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <UART_SetConfig+0x56c>)
 8002cda:	61fb      	str	r3, [r7, #28]
        break;
 8002cdc:	e00d      	b.n	8002cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7fe ff55 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002ce2:	61f8      	str	r0, [r7, #28]
        break;
 8002ce4:	e009      	b.n	8002cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cea:	61fb      	str	r3, [r7, #28]
        break;
 8002cec:	e005      	b.n	8002cfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cf8:	bf00      	nop
    }

    if (pclk != 0U)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085a      	lsrs	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	441a      	add	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	d909      	bls.n	8002d2e <UART_SetConfig+0x546>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d205      	bcs.n	8002d2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	e002      	b.n	8002d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	@ 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40008000 	.word	0x40008000
 8002d54:	00f42400 	.word	0x00f42400

08002d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01a      	beq.n	8002e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e56:	d10a      	bne.n	8002e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b098      	sub	sp, #96	@ 0x60
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eac:	f7fd fe1c 	bl	8000ae8 <HAL_GetTick>
 8002eb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d12e      	bne.n	8002f1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f88c 	bl	8002fec <UART_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d021      	beq.n	8002f1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002efa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e6      	bne.n	8002eda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e062      	b.n	8002fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d149      	bne.n	8002fc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f856 	bl	8002fec <UART_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03c      	beq.n	8002fc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	623b      	str	r3, [r7, #32]
   return(result);
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e6      	bne.n	8002f46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f98:	61fa      	str	r2, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e5      	bne.n	8002f78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e011      	b.n	8002fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3758      	adds	r7, #88	@ 0x58
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffc:	e04f      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d04b      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fd fd6f 	bl	8000ae8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <UART_WaitOnFlagUntilTimeout+0x30>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e04e      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d037      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b80      	cmp	r3, #128	@ 0x80
 8003032:	d034      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d031      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d110      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f838 	bl	80030c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2208      	movs	r2, #8
 800305a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e029      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003078:	d111      	bne.n	800309e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f81e 	bl	80030c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e00f      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d0a0      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b095      	sub	sp, #84	@ 0x54
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e6      	bne.n	80030ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3308      	adds	r3, #8
 8003106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003120:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e5      	bne.n	8003100 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	2b01      	cmp	r3, #1
 800313a:	d118      	bne.n	800316e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	60bb      	str	r3, [r7, #8]
   return(result);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f023 0310 	bic.w	r3, r3, #16
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	613b      	str	r3, [r7, #16]
   return(result);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e6      	bne.n	800313c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003182:	bf00      	nop
 8003184:	3754      	adds	r7, #84	@ 0x54
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800319c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a0:	2b84      	cmp	r3, #132	@ 0x84
 80031a2:	d005      	beq.n	80031b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	3303      	adds	r3, #3
 80031ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031b0:	68fb      	ldr	r3, [r7, #12]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031c4:	f3ef 8305 	mrs	r3, IPSR
 80031c8:	607b      	str	r3, [r7, #4]
  return(result);
 80031ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031e6:	f000 fb27 	bl	8003838 <vTaskStartScheduler>
  
  return osOK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <osThreadCreate+0x54>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01c      	beq.n	8003244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685c      	ldr	r4, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691e      	ldr	r6, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ffb6 	bl	800318e <makeFreeRtosPriority>
 8003222:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800322c:	9202      	str	r2, [sp, #8]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9100      	str	r1, [sp, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4632      	mov	r2, r6
 8003236:	4629      	mov	r1, r5
 8003238:	4620      	mov	r0, r4
 800323a:	f000 f965 	bl	8003508 <xTaskCreateStatic>
 800323e:	4603      	mov	r3, r0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e01c      	b.n	800327e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685c      	ldr	r4, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003250:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff98 	bl	800318e <makeFreeRtosPriority>
 800325e:	4602      	mov	r2, r0
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4632      	mov	r2, r6
 800326c:	4629      	mov	r1, r5
 800326e:	4620      	mov	r0, r4
 8003270:	f000 f9aa 	bl	80035c8 <xTaskCreate>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003288 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800329a:	f7ff ff90 	bl	80031be <inHandlerMode>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01c      	beq.n	80032de <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	f107 0208 	add.w	r2, r7, #8
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	2201      	movs	r2, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fee9 	bl	800408c <xTaskGenericNotifyFromISR>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <osSignalSet+0x3e>
      return 0x80000000;
 80032c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80032c4:	e019      	b.n	80032fa <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <osSignalSet+0x70>
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <osSignalSet+0x7c>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	e00c      	b.n	80032f8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	2201      	movs	r2, #1
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fe18 	bl	8003f1c <xTaskGenericNotify>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d002      	beq.n	80032f8 <osSignalSet+0x70>
    return 0x80000000;
 80032f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80032f6:	e000      	b.n	80032fa <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80032f8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d103      	bne.n	800332c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	e009      	b.n	8003340 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <osSignalWait+0x38>
      ticks = 1;
 800333c:	2301      	movs	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003340:	f7ff ff3d 	bl	80031be <inHandlerMode>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800334a:	2382      	movs	r3, #130	@ 0x82
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e01b      	b.n	8003388 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2000      	movs	r0, #0
 800335c:	f000 fd84 	bl	8003e68 <xTaskNotifyWait>
 8003360:	4603      	mov	r3, r0
 8003362:	2b01      	cmp	r3, #1
 8003364:	d008      	beq.n	8003378 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <osSignalWait+0x6a>
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e00a      	b.n	8003388 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8003372:	2340      	movs	r3, #64	@ 0x40
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e007      	b.n	8003388 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	da02      	bge.n	8003384 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800337e:	2386      	movs	r3, #134	@ 0x86
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e001      	b.n	8003388 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003384:	2308      	movs	r3, #8
 8003386:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	461c      	mov	r4, r3
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	3724      	adds	r7, #36	@ 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00c      	b.n	800347c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3308      	adds	r3, #8
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e002      	b.n	8003470 <vListInsert+0x2e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d2f6      	bcs.n	800346a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6852      	ldr	r2, [r2, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	@ 0x38
 800350c:	af04      	add	r7, sp, #16
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <xTaskCreateStatic+0x4a>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	61fb      	str	r3, [r7, #28]
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	e7fd      	b.n	800354e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003552:	2354      	movs	r3, #84	@ 0x54
 8003554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b54      	cmp	r3, #84	@ 0x54
 800355a:	d00b      	beq.n	8003574 <xTaskCreateStatic+0x6c>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61bb      	str	r3, [r7, #24]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003574:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01e      	beq.n	80035ba <xTaskCreateStatic+0xb2>
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01b      	beq.n	80035ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003594:	2300      	movs	r3, #0
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	9302      	str	r3, [sp, #8]
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f850 	bl	8003652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035b4:	f000 f8d6 	bl	8003764 <prvAddNewTaskToReadyList>
 80035b8:	e001      	b.n	80035be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035be:	697b      	ldr	r3, [r7, #20]
	}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	@ 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	@ 0x30
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f8ed 	bl	80047bc <pvPortMalloc>
 80035e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035ea:	2054      	movs	r0, #84	@ 0x54
 80035ec:	f001 f8e6 	bl	80047bc <pvPortMalloc>
 80035f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80035fe:	e005      	b.n	800360c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003600:	6978      	ldr	r0, [r7, #20]
 8003602:	f001 f9a9 	bl	8004958 <vPortFree>
 8003606:	e001      	b.n	800360c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	2300      	movs	r3, #0
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f80e 	bl	8003652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003636:	69f8      	ldr	r0, [r7, #28]
 8003638:	f000 f894 	bl	8003764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e002      	b.n	8003648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003648:	69bb      	ldr	r3, [r7, #24]
	}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b088      	sub	sp, #32
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800366a:	3b01      	subs	r3, #1
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f023 0307 	bic.w	r3, r3, #7
 8003678:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	617b      	str	r3, [r7, #20]
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01f      	beq.n	80036e2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e012      	b.n	80036ce <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	7819      	ldrb	r1, [r3, #0]
 80036b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	3334      	adds	r3, #52	@ 0x34
 80036b8:	460a      	mov	r2, r1
 80036ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3301      	adds	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d9e9      	bls.n	80036a8 <prvInitialiseNewTask+0x56>
 80036d4:	e000      	b.n	80036d8 <prvInitialiseNewTask+0x86>
			{
				break;
 80036d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e0:	e003      	b.n	80036ea <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d901      	bls.n	80036f4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036f0:	2306      	movs	r3, #6
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	2200      	movs	r2, #0
 8003704:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe68 	bl	80033e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003712:	3318      	adds	r3, #24
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe63 	bl	80033e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	f1c3 0207 	rsb	r2, r3, #7
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	69b8      	ldr	r0, [r7, #24]
 8003744:	f000 fde6 	bl	8004314 <pxPortInitialiseStack>
 8003748:	4602      	mov	r2, r0
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800375a:	bf00      	nop
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800376c:	f000 ff04 	bl	8004578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003770:	4b2a      	ldr	r3, [pc, #168]	@ (800381c <prvAddNewTaskToReadyList+0xb8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a29      	ldr	r2, [pc, #164]	@ (800381c <prvAddNewTaskToReadyList+0xb8>)
 8003778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800377a:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <prvAddNewTaskToReadyList+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003782:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <prvAddNewTaskToReadyList+0xbc>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003788:	4b24      	ldr	r3, [pc, #144]	@ (800381c <prvAddNewTaskToReadyList+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d110      	bne.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003790:	f000 fa8e 	bl	8003cb0 <prvInitialiseTaskLists>
 8003794:	e00d      	b.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003796:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <prvAddNewTaskToReadyList+0xc0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800379e:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d802      	bhi.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <prvAddNewTaskToReadyList+0xc4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <prvAddNewTaskToReadyList+0xc4>)
 80037ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <prvAddNewTaskToReadyList+0xc8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	4a18      	ldr	r2, [pc, #96]	@ (800382c <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <prvAddNewTaskToReadyList+0xcc>)
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7ff fe08 	bl	80033fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037ea:	f000 fef7 	bl	80045dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <prvAddNewTaskToReadyList+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <prvAddNewTaskToReadyList+0xd0>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000418 	.word	0x20000418
 8003820:	20000318 	.word	0x20000318
 8003824:	20000424 	.word	0x20000424
 8003828:	20000434 	.word	0x20000434
 800382c:	20000420 	.word	0x20000420
 8003830:	2000031c 	.word	0x2000031c
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003846:	463a      	mov	r2, r7
 8003848:	1d39      	adds	r1, r7, #4
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe36 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	9202      	str	r2, [sp, #8]
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	460a      	mov	r2, r1
 8003866:	491f      	ldr	r1, [pc, #124]	@ (80038e4 <vTaskStartScheduler+0xac>)
 8003868:	481f      	ldr	r0, [pc, #124]	@ (80038e8 <vTaskStartScheduler+0xb0>)
 800386a:	f7ff fe4d 	bl	8003508 <xTaskCreateStatic>
 800386e:	4603      	mov	r3, r0
 8003870:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <vTaskStartScheduler+0xb4>)
 8003872:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <vTaskStartScheduler+0xb4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e001      	b.n	8003886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d116      	bne.n	80038ba <vTaskStartScheduler+0x82>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	613b      	str	r3, [r7, #16]
}
 800389e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <vTaskStartScheduler+0xb8>)
 80038a2:	f04f 32ff 	mov.w	r2, #4294967295
 80038a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <vTaskStartScheduler+0xbc>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038ae:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <vTaskStartScheduler+0xc0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038b4:	f000 fdbc 	bl	8004430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038b8:	e00f      	b.n	80038da <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d10b      	bne.n	80038da <vTaskStartScheduler+0xa2>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60fb      	str	r3, [r7, #12]
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <vTaskStartScheduler+0x9e>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	08004c50 	.word	0x08004c50
 80038e8:	08003c81 	.word	0x08003c81
 80038ec:	2000043c 	.word	0x2000043c
 80038f0:	20000438 	.word	0x20000438
 80038f4:	20000424 	.word	0x20000424
 80038f8:	2000041c 	.word	0x2000041c

080038fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <vTaskSuspendAll+0x18>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a03      	ldr	r2, [pc, #12]	@ (8003914 <vTaskSuspendAll+0x18>)
 8003908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000440 	.word	0x20000440

08003918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003926:	4b42      	ldr	r3, [pc, #264]	@ (8003a30 <xTaskResumeAll+0x118>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <xTaskResumeAll+0x2e>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	603b      	str	r3, [r7, #0]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003946:	f000 fe17 	bl	8004578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800394a:	4b39      	ldr	r3, [pc, #228]	@ (8003a30 <xTaskResumeAll+0x118>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3b01      	subs	r3, #1
 8003950:	4a37      	ldr	r2, [pc, #220]	@ (8003a30 <xTaskResumeAll+0x118>)
 8003952:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003954:	4b36      	ldr	r3, [pc, #216]	@ (8003a30 <xTaskResumeAll+0x118>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d161      	bne.n	8003a20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800395c:	4b35      	ldr	r3, [pc, #212]	@ (8003a34 <xTaskResumeAll+0x11c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05d      	beq.n	8003a20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003964:	e02e      	b.n	80039c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003966:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <xTaskResumeAll+0x120>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3318      	adds	r3, #24
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fd9e 	bl	80034b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fd99 	bl	80034b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	2201      	movs	r2, #1
 8003988:	409a      	lsls	r2, r3
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <xTaskResumeAll+0x124>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	4a2a      	ldr	r2, [pc, #168]	@ (8003a3c <xTaskResumeAll+0x124>)
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <xTaskResumeAll+0x128>)
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f7ff fd25 	bl	80033fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <xTaskResumeAll+0x12c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <xTaskResumeAll+0x130>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <xTaskResumeAll+0x120>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1cc      	bne.n	8003966 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039d2:	f000 fa0b 	bl	8003dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039d6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a4c <xTaskResumeAll+0x134>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039e2:	f000 f837 	bl	8003a54 <xTaskIncrementTick>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <xTaskResumeAll+0x130>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f1      	bne.n	80039e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039fe:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <xTaskResumeAll+0x134>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a04:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <xTaskResumeAll+0x130>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <xTaskResumeAll+0x138>)
 8003a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a20:	f000 fddc 	bl	80045dc <vPortExitCritical>

	return xAlreadyYielded;
 8003a24:	68bb      	ldr	r3, [r7, #8]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000440 	.word	0x20000440
 8003a34:	20000418 	.word	0x20000418
 8003a38:	200003d8 	.word	0x200003d8
 8003a3c:	20000420 	.word	0x20000420
 8003a40:	2000031c 	.word	0x2000031c
 8003a44:	20000318 	.word	0x20000318
 8003a48:	2000042c 	.word	0x2000042c
 8003a4c:	20000428 	.word	0x20000428
 8003a50:	e000ed04 	.word	0xe000ed04

08003a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b9c <xTaskIncrementTick+0x148>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 808f 	bne.w	8003b86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <xTaskIncrementTick+0x14c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba0 <xTaskIncrementTick+0x14c>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d121      	bne.n	8003ac0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ba4 <xTaskIncrementTick+0x150>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <xTaskIncrementTick+0x46>
 8003a9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ba4 <xTaskIncrementTick+0x150>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	4b40      	ldr	r3, [pc, #256]	@ (8003ba8 <xTaskIncrementTick+0x154>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba4 <xTaskIncrementTick+0x150>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ba8 <xTaskIncrementTick+0x154>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bac <xTaskIncrementTick+0x158>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bac <xTaskIncrementTick+0x158>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	f000 f996 	bl	8003dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb0 <xTaskIncrementTick+0x15c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d348      	bcc.n	8003b5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aca:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <xTaskIncrementTick+0x150>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <xTaskIncrementTick+0x15c>)
 8003ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ada:	601a      	str	r2, [r3, #0]
					break;
 8003adc:	e03e      	b.n	8003b5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ade:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <xTaskIncrementTick+0x150>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d203      	bcs.n	8003afe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003af6:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb0 <xTaskIncrementTick+0x15c>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003afc:	e02e      	b.n	8003b5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fcd6 	bl	80034b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3318      	adds	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fccd 	bl	80034b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	409a      	lsls	r2, r3
 8003b22:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <xTaskIncrementTick+0x160>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	4a22      	ldr	r2, [pc, #136]	@ (8003bb4 <xTaskIncrementTick+0x160>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb8 <xTaskIncrementTick+0x164>)
 8003b3a:	441a      	add	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7ff fc59 	bl	80033fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <xTaskIncrementTick+0x168>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3b9      	bcc.n	8003aca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b5a:	e7b6      	b.n	8003aca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b5c:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <xTaskIncrementTick+0x168>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b62:	4915      	ldr	r1, [pc, #84]	@ (8003bb8 <xTaskIncrementTick+0x164>)
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d901      	bls.n	8003b78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <xTaskIncrementTick+0x16c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e004      	b.n	8003b90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <xTaskIncrementTick+0x170>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <xTaskIncrementTick+0x170>)
 8003b8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b90:	697b      	ldr	r3, [r7, #20]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000440 	.word	0x20000440
 8003ba0:	2000041c 	.word	0x2000041c
 8003ba4:	200003d0 	.word	0x200003d0
 8003ba8:	200003d4 	.word	0x200003d4
 8003bac:	20000430 	.word	0x20000430
 8003bb0:	20000438 	.word	0x20000438
 8003bb4:	20000420 	.word	0x20000420
 8003bb8:	2000031c 	.word	0x2000031c
 8003bbc:	20000318 	.word	0x20000318
 8003bc0:	2000042c 	.word	0x2000042c
 8003bc4:	20000428 	.word	0x20000428

08003bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bce:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <vTaskSwitchContext+0xa4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bd6:	4b26      	ldr	r3, [pc, #152]	@ (8003c70 <vTaskSwitchContext+0xa8>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bdc:	e040      	b.n	8003c60 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003bde:	4b24      	ldr	r3, [pc, #144]	@ (8003c70 <vTaskSwitchContext+0xa8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be4:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <vTaskSwitchContext+0xac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	f1c3 031f 	rsb	r3, r3, #31
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	491f      	ldr	r1, [pc, #124]	@ (8003c78 <vTaskSwitchContext+0xb0>)
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <vTaskSwitchContext+0x5a>
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a11      	ldr	r2, [pc, #68]	@ (8003c78 <vTaskSwitchContext+0xb0>)
 8003c32:	4413      	add	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3308      	adds	r3, #8
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <vTaskSwitchContext+0x8e>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	@ (8003c7c <vTaskSwitchContext+0xb4>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20000440 	.word	0x20000440
 8003c70:	2000042c 	.word	0x2000042c
 8003c74:	20000420 	.word	0x20000420
 8003c78:	2000031c 	.word	0x2000031c
 8003c7c:	20000318 	.word	0x20000318

08003c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c88:	f000 f852 	bl	8003d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <prvIdleTask+0x28>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d9f9      	bls.n	8003c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c94:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <prvIdleTask+0x2c>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ca4:	e7f0      	b.n	8003c88 <prvIdleTask+0x8>
 8003ca6:	bf00      	nop
 8003ca8:	2000031c 	.word	0x2000031c
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	e00c      	b.n	8003cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <prvInitialiseTaskLists+0x60>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fb68 	bl	80033a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b06      	cmp	r3, #6
 8003cda:	d9ef      	bls.n	8003cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cdc:	480d      	ldr	r0, [pc, #52]	@ (8003d14 <prvInitialiseTaskLists+0x64>)
 8003cde:	f7ff fb5f 	bl	80033a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ce2:	480d      	ldr	r0, [pc, #52]	@ (8003d18 <prvInitialiseTaskLists+0x68>)
 8003ce4:	f7ff fb5c 	bl	80033a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ce8:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <prvInitialiseTaskLists+0x6c>)
 8003cea:	f7ff fb59 	bl	80033a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cee:	480c      	ldr	r0, [pc, #48]	@ (8003d20 <prvInitialiseTaskLists+0x70>)
 8003cf0:	f7ff fb56 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cf4:	480b      	ldr	r0, [pc, #44]	@ (8003d24 <prvInitialiseTaskLists+0x74>)
 8003cf6:	f7ff fb53 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <prvInitialiseTaskLists+0x78>)
 8003cfc:	4a05      	ldr	r2, [pc, #20]	@ (8003d14 <prvInitialiseTaskLists+0x64>)
 8003cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <prvInitialiseTaskLists+0x7c>)
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <prvInitialiseTaskLists+0x68>)
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2000031c 	.word	0x2000031c
 8003d14:	200003a8 	.word	0x200003a8
 8003d18:	200003bc 	.word	0x200003bc
 8003d1c:	200003d8 	.word	0x200003d8
 8003d20:	200003ec 	.word	0x200003ec
 8003d24:	20000404 	.word	0x20000404
 8003d28:	200003d0 	.word	0x200003d0
 8003d2c:	200003d4 	.word	0x200003d4

08003d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d36:	e019      	b.n	8003d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d38:	f000 fc1e 	bl	8004578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3c:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <prvCheckTasksWaitingTermination+0x50>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fbb3 	bl	80034b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <prvCheckTasksWaitingTermination+0x54>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4a0b      	ldr	r2, [pc, #44]	@ (8003d84 <prvCheckTasksWaitingTermination+0x54>)
 8003d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <prvCheckTasksWaitingTermination+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d88 <prvCheckTasksWaitingTermination+0x58>)
 8003d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d62:	f000 fc3b 	bl	80045dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f810 	bl	8003d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <prvCheckTasksWaitingTermination+0x58>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e1      	bne.n	8003d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200003ec 	.word	0x200003ec
 8003d84:	20000418 	.word	0x20000418
 8003d88:	20000400 	.word	0x20000400

08003d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fdd8 	bl	8004958 <vPortFree>
				vPortFree( pxTCB );
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fdd5 	bl	8004958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dae:	e019      	b.n	8003de4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d103      	bne.n	8003dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fdcc 	bl	8004958 <vPortFree>
	}
 8003dc0:	e010      	b.n	8003de4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d00b      	beq.n	8003de4 <prvDeleteTCB+0x58>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	e7fd      	b.n	8003de0 <prvDeleteTCB+0x54>
	}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <prvResetNextTaskUnblockTime+0x38>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <prvResetNextTaskUnblockTime+0x3c>)
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e04:	e008      	b.n	8003e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <prvResetNextTaskUnblockTime+0x38>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <prvResetNextTaskUnblockTime+0x3c>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	200003d0 	.word	0x200003d0
 8003e28:	20000438 	.word	0x20000438

08003e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <xTaskGetSchedulerState+0x34>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	e008      	b.n	8003e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e40:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <xTaskGetSchedulerState+0x38>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e001      	b.n	8003e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e52:	687b      	ldr	r3, [r7, #4]
	}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000424 	.word	0x20000424
 8003e64:	20000440 	.word	0x20000440

08003e68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003e76:	f000 fb7f 	bl	8004578 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003e7a:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d01a      	beq.n	8003ebe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003e88:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	43d2      	mvns	r2, r2
 8003e92:	400a      	ands	r2, r1
 8003e94:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f000 f9cd 	bl	8004248 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <xTaskNotifyWait+0xb0>)
 8003eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003ebe:	f000 fb8d 	bl	80045dc <vPortExitCritical>

		taskENTER_CRITICAL();
 8003ec2:	f000 fb59 	bl	8004578 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003ecc:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d002      	beq.n	8003eea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e008      	b.n	8003efc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	43d2      	mvns	r2, r2
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <xTaskNotifyWait+0xac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8003f06:	f000 fb69 	bl	80045dc <vPortExitCritical>

		return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
	}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000318 	.word	0x20000318
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <xTaskGenericNotify+0x32>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	61bb      	str	r3, [r7, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003f52:	f000 fb11 	bl	8004578 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d827      	bhi.n	8003fca <xTaskGenericNotify+0xae>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <xTaskGenericNotify+0x64>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fed 	.word	0x08003fed
 8003f84:	08003f95 	.word	0x08003f95
 8003f88:	08003fa3 	.word	0x08003fa3
 8003f8c:	08003faf 	.word	0x08003faf
 8003f90:	08003fb7 	.word	0x08003fb7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8003fa0:	e027      	b.n	8003ff2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8003fac:	e021      	b.n	8003ff2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8003fb4:	e01d      	b.n	8003ff2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003fb6:	7ffb      	ldrb	r3, [r7, #31]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d003      	beq.n	8003fc4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003fc2:	e016      	b.n	8003ff2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003fc8:	e013      	b.n	8003ff2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d00d      	beq.n	8003ff0 <xTaskGenericNotify+0xd4>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	617b      	str	r3, [r7, #20]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <xTaskGenericNotify+0xcc>
					break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <xTaskGenericNotify+0xd6>

					break;
 8003ff0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d13a      	bne.n	800406e <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fa59 	bl	80034b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	2201      	movs	r2, #1
 8004008:	409a      	lsls	r2, r3
 800400a:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <xTaskGenericNotify+0x160>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <xTaskGenericNotify+0x160>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <xTaskGenericNotify+0x164>)
 8004022:	441a      	add	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7ff f9e5 	bl	80033fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <xTaskGenericNotify+0x134>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	613b      	str	r3, [r7, #16]
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <xTaskGenericNotify+0x168>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	429a      	cmp	r2, r3
 800405c:	d907      	bls.n	800406e <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <xTaskGenericNotify+0x16c>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800406e:	f000 fab5 	bl	80045dc <vPortExitCritical>

		return xReturn;
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004074:	4618      	mov	r0, r3
 8004076:	3728      	adds	r7, #40	@ 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000420 	.word	0x20000420
 8004080:	2000031c 	.word	0x2000031c
 8004084:	20000318 	.word	0x20000318
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08e      	sub	sp, #56	@ 0x38
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800409c:	2301      	movs	r3, #1
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	e7fd      	b.n	80040ba <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040be:	f000 fb3b 	bl	8004738 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040c6:	f3ef 8211 	mrs	r2, BASEPRI
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	623a      	str	r2, [r7, #32]
 80040dc:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040de:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d829      	bhi.n	800415c <xTaskGenericNotifyFromISR+0xd0>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <xTaskGenericNotifyFromISR+0x84>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	0800417f 	.word	0x0800417f
 8004114:	08004125 	.word	0x08004125
 8004118:	08004133 	.word	0x08004133
 800411c:	0800413f 	.word	0x0800413f
 8004120:	08004147 	.word	0x08004147
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	431a      	orrs	r2, r3
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004130:	e028      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800413c:	e022      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8004144:	e01e      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004146:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800414a:	2b02      	cmp	r3, #2
 800414c:	d003      	beq.n	8004156 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004154:	e016      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800415a:	e013      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d00d      	beq.n	8004182 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	61bb      	str	r3, [r7, #24]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <xTaskGenericNotifyFromISR+0xee>
					break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8004182:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004184:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004188:	2b01      	cmp	r3, #1
 800418a:	d146      	bne.n	800421a <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	617b      	str	r3, [r7, #20]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ac:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <xTaskGenericNotifyFromISR+0x1a4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11c      	bne.n	80041ee <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f97b 	bl	80034b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	2201      	movs	r2, #1
 80041c4:	409a      	lsls	r2, r3
 80041c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <xTaskGenericNotifyFromISR+0x1a8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <xTaskGenericNotifyFromISR+0x1a8>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <xTaskGenericNotifyFromISR+0x1ac>)
 80041de:	441a      	add	r2, r3
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f7ff f907 	bl	80033fa <vListInsertEnd>
 80041ec:	e005      	b.n	80041fa <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	3318      	adds	r3, #24
 80041f2:	4619      	mov	r1, r3
 80041f4:	4811      	ldr	r0, [pc, #68]	@ (800423c <xTaskGenericNotifyFromISR+0x1b0>)
 80041f6:	f7ff f900 	bl	80033fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <xTaskGenericNotifyFromISR+0x1b4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	429a      	cmp	r2, r3
 8004206:	d908      	bls.n	800421a <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800420e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <xTaskGenericNotifyFromISR+0x1b8>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004224:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004228:	4618      	mov	r0, r3
 800422a:	3738      	adds	r7, #56	@ 0x38
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000440 	.word	0x20000440
 8004234:	20000420 	.word	0x20000420
 8004238:	2000031c 	.word	0x2000031c
 800423c:	200003d8 	.word	0x200003d8
 8004240:	20000318 	.word	0x20000318
 8004244:	2000042c 	.word	0x2000042c

08004248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004258:	4b28      	ldr	r3, [pc, #160]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f928 	bl	80034b4 <uxListRemove>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	2201      	movs	r2, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <prvAddCurrentTaskToDelayedList+0xb8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4013      	ands	r3, r2
 800427e:	4a20      	ldr	r2, [pc, #128]	@ (8004300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d10a      	bne.n	80042a0 <prvAddCurrentTaskToDelayedList+0x58>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	481a      	ldr	r0, [pc, #104]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xbc>)
 800429a:	f7ff f8ae 	bl	80033fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800429e:	e026      	b.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d209      	bcs.n	80042cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7ff f8bc 	bl	8003442 <vListInsert>
}
 80042ca:	e010      	b.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042cc:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <prvAddCurrentTaskToDelayedList+0xc4>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff f8b2 	bl	8003442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042de:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d202      	bcs.n	80042ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042e8:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6013      	str	r3, [r2, #0]
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000041c 	.word	0x2000041c
 80042fc:	20000318 	.word	0x20000318
 8004300:	20000420 	.word	0x20000420
 8004304:	20000404 	.word	0x20000404
 8004308:	200003d4 	.word	0x200003d4
 800430c:	200003d0 	.word	0x200003d0
 8004310:	20000438 	.word	0x20000438

08004314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b04      	subs	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b04      	subs	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b04      	subs	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004344:	4a0c      	ldr	r2, [pc, #48]	@ (8004378 <pxPortInitialiseStack+0x64>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b14      	subs	r3, #20
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b04      	subs	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f06f 0202 	mvn.w	r2, #2
 8004362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b20      	subs	r3, #32
 8004368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	0800437d 	.word	0x0800437d

0800437c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004386:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <prvTaskExitError+0x58>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d00b      	beq.n	80043a8 <prvTaskExitError+0x2c>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <prvTaskExitError+0x28>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60bb      	str	r3, [r7, #8]
}
 80043ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043bc:	bf00      	nop
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0fc      	beq.n	80043be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000000c 	.word	0x2000000c
	...

080043e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043e0:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <pxCurrentTCBConst2>)
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	6808      	ldr	r0, [r1, #0]
 80043e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	f380 8809 	msr	PSP, r0
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8811 	msr	BASEPRI, r0
 80043fa:	4770      	bx	lr
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst2>:
 8004400:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004408:	4808      	ldr	r0, [pc, #32]	@ (800442c <prvPortStartFirstTask+0x24>)
 800440a:	6800      	ldr	r0, [r0, #0]
 800440c:	6800      	ldr	r0, [r0, #0]
 800440e:	f380 8808 	msr	MSP, r0
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8814 	msr	CONTROL, r0
 800441a:	b662      	cpsie	i
 800441c:	b661      	cpsie	f
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	df00      	svc	0
 8004428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800442a:	bf00      	nop
 800442c:	e000ed08 	.word	0xe000ed08

08004430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004436:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <xPortStartScheduler+0x124>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <xPortStartScheduler+0x128>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10b      	bne.n	8004458 <xPortStartScheduler+0x28>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004458:	4b3e      	ldr	r3, [pc, #248]	@ (8004554 <xPortStartScheduler+0x124>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a3f      	ldr	r2, [pc, #252]	@ (800455c <xPortStartScheduler+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10b      	bne.n	800447a <xPortStartScheduler+0x4a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800447a:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <xPortStartScheduler+0x130>)
 800447c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	22ff      	movs	r2, #255	@ 0xff
 800448a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b31      	ldr	r3, [pc, #196]	@ (8004564 <xPortStartScheduler+0x134>)
 80044a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044a2:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <xPortStartScheduler+0x138>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a8:	e009      	b.n	80044be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80044aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004568 <xPortStartScheduler+0x138>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <xPortStartScheduler+0x138>)
 80044b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d0ef      	beq.n	80044aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ca:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <xPortStartScheduler+0x138>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1c3 0307 	rsb	r3, r3, #7
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d00b      	beq.n	80044ee <xPortStartScheduler+0xbe>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <xPortStartScheduler+0x138>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <xPortStartScheduler+0x138>)
 80044f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <xPortStartScheduler+0x138>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <xPortStartScheduler+0x138>)
 8004502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <xPortStartScheduler+0x13c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a16      	ldr	r2, [pc, #88]	@ (800456c <xPortStartScheduler+0x13c>)
 8004512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004518:	4b14      	ldr	r3, [pc, #80]	@ (800456c <xPortStartScheduler+0x13c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a13      	ldr	r2, [pc, #76]	@ (800456c <xPortStartScheduler+0x13c>)
 800451e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004524:	f000 f8da 	bl	80046dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <xPortStartScheduler+0x140>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800452e:	f000 f8f9 	bl	8004724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <xPortStartScheduler+0x144>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a0f      	ldr	r2, [pc, #60]	@ (8004574 <xPortStartScheduler+0x144>)
 8004538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800453c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800453e:	f7ff ff63 	bl	8004408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004542:	f7ff fb41 	bl	8003bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8004546:	f7ff ff19 	bl	800437c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed00 	.word	0xe000ed00
 8004558:	410fc271 	.word	0x410fc271
 800455c:	410fc270 	.word	0x410fc270
 8004560:	e000e400 	.word	0xe000e400
 8004564:	20000444 	.word	0x20000444
 8004568:	20000448 	.word	0x20000448
 800456c:	e000ed20 	.word	0xe000ed20
 8004570:	2000000c 	.word	0x2000000c
 8004574:	e000ef34 	.word	0xe000ef34

08004578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <vPortEnterCritical+0x5c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <vPortEnterCritical+0x5c>)
 800459a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <vPortEnterCritical+0x5c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d110      	bne.n	80045c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <vPortEnterCritical+0x60>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	603b      	str	r3, [r7, #0]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <vPortEnterCritical+0x4a>
	}
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <vPortExitCritical+0x50>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <vPortExitCritical+0x26>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <vPortExitCritical+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a08      	ldr	r2, [pc, #32]	@ (800462c <vPortExitCritical+0x50>)
 800460a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <vPortExitCritical+0x50>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <vPortExitCritical+0x44>
 8004614:	2300      	movs	r3, #0
 8004616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	2000000c 	.word	0x2000000c

08004630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004630:	f3ef 8009 	mrs	r0, PSP
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <pxCurrentTCBConst>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f01e 0f10 	tst.w	lr, #16
 8004640:	bf08      	it	eq
 8004642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464a:	6010      	str	r0, [r2, #0]
 800464c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004654:	f380 8811 	msr	BASEPRI, r0
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f7ff fab2 	bl	8003bc8 <vTaskSwitchContext>
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f380 8811 	msr	BASEPRI, r0
 800466c:	bc09      	pop	{r0, r3}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	f01e 0f10 	tst.w	lr, #16
 800467a:	bf08      	it	eq
 800467c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004680:	f380 8809 	msr	PSP, r0
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst>:
 8004690:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b2:	f7ff f9cf 	bl	8003a54 <xTaskIncrementTick>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <xPortSysTickHandler+0x40>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	2300      	movs	r3, #0
 80046c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f383 8811 	msr	BASEPRI, r3
}
 80046ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	@ (800471c <vPortSetupTimerInterrupt+0x40>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <vPortSetupTimerInterrupt+0x44>)
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	e000e014 	.word	0xe000e014

08004724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004734 <vPortEnableVFP+0x10>
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800472e:	6001      	str	r1, [r0, #0]
 8004730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004732:	bf00      	nop
 8004734:	e000ed88 	.word	0xe000ed88

08004738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b0f      	cmp	r3, #15
 8004748:	d915      	bls.n	8004776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800474a:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <vPortValidateInterruptPriority+0x74>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004754:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <vPortValidateInterruptPriority+0x78>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	7afa      	ldrb	r2, [r7, #11]
 800475a:	429a      	cmp	r2, r3
 800475c:	d20b      	bcs.n	8004776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <vPortValidateInterruptPriority+0x7c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <vPortValidateInterruptPriority+0x80>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d90b      	bls.n	800479e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	603b      	str	r3, [r7, #0]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <vPortValidateInterruptPriority+0x62>
	}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e3f0 	.word	0xe000e3f0
 80047b0:	20000444 	.word	0x20000444
 80047b4:	e000ed0c 	.word	0xe000ed0c
 80047b8:	20000448 	.word	0x20000448

080047bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047c8:	f7ff f898 	bl	80038fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004940 <pvPortMalloc+0x184>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047d4:	f000 f924 	bl	8004a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004944 <pvPortMalloc+0x188>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8095 	bne.w	8004910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80047ec:	2208      	movs	r2, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	3308      	adds	r3, #8
 8004806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <pvPortMalloc+0x6e>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	617b      	str	r3, [r7, #20]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d06f      	beq.n	8004910 <pvPortMalloc+0x154>
 8004830:	4b45      	ldr	r3, [pc, #276]	@ (8004948 <pvPortMalloc+0x18c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d86a      	bhi.n	8004910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800483a:	4b44      	ldr	r3, [pc, #272]	@ (800494c <pvPortMalloc+0x190>)
 800483c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800483e:	4b43      	ldr	r3, [pc, #268]	@ (800494c <pvPortMalloc+0x190>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004844:	e004      	b.n	8004850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d903      	bls.n	8004862 <pvPortMalloc+0xa6>
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f1      	bne.n	8004846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004862:	4b37      	ldr	r3, [pc, #220]	@ (8004940 <pvPortMalloc+0x184>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004868:	429a      	cmp	r2, r3
 800486a:	d051      	beq.n	8004910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2208      	movs	r2, #8
 8004872:	4413      	add	r3, r2
 8004874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad2      	subs	r2, r2, r3
 8004886:	2308      	movs	r3, #8
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	429a      	cmp	r2, r3
 800488c:	d920      	bls.n	80048d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <pvPortMalloc+0xfc>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ca:	69b8      	ldr	r0, [r7, #24]
 80048cc:	f000 f90a 	bl	8004ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <pvPortMalloc+0x18c>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <pvPortMalloc+0x18c>)
 80048dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048de:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <pvPortMalloc+0x18c>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <pvPortMalloc+0x194>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d203      	bcs.n	80048f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ea:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <pvPortMalloc+0x18c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <pvPortMalloc+0x194>)
 80048f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <pvPortMalloc+0x188>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004906:	4b13      	ldr	r3, [pc, #76]	@ (8004954 <pvPortMalloc+0x198>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <pvPortMalloc+0x198>)
 800490e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004910:	f7ff f802 	bl	8003918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <pvPortMalloc+0x17a>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <pvPortMalloc+0x176>
	return pvReturn;
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	@ 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000100c 	.word	0x2000100c
 8004944:	20001020 	.word	0x20001020
 8004948:	20001010 	.word	0x20001010
 800494c:	20001004 	.word	0x20001004
 8004950:	20001014 	.word	0x20001014
 8004954:	20001018 	.word	0x20001018

08004958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04f      	beq.n	8004a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800496a:	2308      	movs	r3, #8
 800496c:	425b      	negs	r3, r3
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <vPortFree+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <vPortFree+0x46>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	e7fd      	b.n	800499a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <vPortFree+0x66>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <vPortFree+0xbc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01e      	beq.n	8004a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11a      	bne.n	8004a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <vPortFree+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049e4:	f7fe ff8a 	bl	80038fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <vPortFree+0xc0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <vPortFree+0xc0>)
 80049f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049f6:	6938      	ldr	r0, [r7, #16]
 80049f8:	f000 f874 	bl	8004ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <vPortFree+0xc4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a06      	ldr	r2, [pc, #24]	@ (8004a1c <vPortFree+0xc4>)
 8004a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a06:	f7fe ff87 	bl	8003918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20001020 	.word	0x20001020
 8004a18:	20001010 	.word	0x20001010
 8004a1c:	2000101c 	.word	0x2000101c

08004a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a2c:	4b27      	ldr	r3, [pc, #156]	@ (8004acc <prvHeapInit+0xac>)
 8004a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3307      	adds	r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <prvHeapInit+0xac>)
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a58:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad0 <prvHeapInit+0xb0>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad0 <prvHeapInit+0xb0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a82:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <prvHeapInit+0xb4>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <prvHeapInit+0xb8>)
 8004aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a09      	ldr	r2, [pc, #36]	@ (8004adc <prvHeapInit+0xbc>)
 8004ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <prvHeapInit+0xc0>)
 8004aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	2000044c 	.word	0x2000044c
 8004ad0:	20001004 	.word	0x20001004
 8004ad4:	2000100c 	.word	0x2000100c
 8004ad8:	20001014 	.word	0x20001014
 8004adc:	20001010 	.word	0x20001010
 8004ae0:	20001020 	.word	0x20001020

08004ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aec:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <prvInsertBlockIntoFreeList+0xac>)
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <prvInsertBlockIntoFreeList+0x14>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f7      	bhi.n	8004af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d108      	bne.n	8004b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d118      	bne.n	8004b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00d      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <prvInsertBlockIntoFreeList+0xb0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e003      	b.n	8004b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d002      	beq.n	8004b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20001004 	.word	0x20001004
 8004b94:	2000100c 	.word	0x2000100c

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4d0d      	ldr	r5, [pc, #52]	@ (8004be0 <__libc_init_array+0x38>)
 8004bac:	4c0d      	ldr	r4, [pc, #52]	@ (8004be4 <__libc_init_array+0x3c>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8004be8 <__libc_init_array+0x40>)
 8004bba:	4c0c      	ldr	r4, [pc, #48]	@ (8004bec <__libc_init_array+0x44>)
 8004bbc:	f000 f818 	bl	8004bf0 <_init>
 8004bc0:	1b64      	subs	r4, r4, r5
 8004bc2:	10a4      	asrs	r4, r4, #2
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	08004ca8 	.word	0x08004ca8
 8004be4:	08004ca8 	.word	0x08004ca8
 8004be8:	08004ca8 	.word	0x08004ca8
 8004bec:	08004cac 	.word	0x08004cac

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
