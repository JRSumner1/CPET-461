
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb8  08004fb8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc0  08004fc0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fc4  08004fc4  00005fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004fc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001238  20000060  08005028  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001298  08005028  00006298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001652a  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eda  00000000  00000000  0001c5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0001f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee7  00000000  00000000  000207c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028059  00000000  00000000  000216a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eff  00000000  00000000  00049700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa922  00000000  00000000  0005f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159f21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c8  00000000  00000000  00159f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0015f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f08 	.word	0x08004f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004f08 	.word	0x08004f08

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb43 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83b 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8e3 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8b1 	bl	800066c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800050a:	f000 f887 	bl	800061c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800050e:	4815      	ldr	r0, [pc, #84]	@ (8000564 <main+0x70>)
 8000510:	f002 f9e0 	bl	80028d4 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, StartTask1, osPriorityNormal, 0, 128);
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <main+0x74>)
 8000516:	f107 041c 	add.w	r4, r7, #28
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f9a2 	bl	8003878 <osThreadCreate>
 8000534:	4603      	mov	r3, r0
 8000536:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <main+0x78>)
 8000538:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask2 */
  osThreadDef(myTask2, StartTask2, osPriorityNormal, 0, 128);
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <main+0x7c>)
 800053c:	463c      	mov	r4, r7
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask2Handle = osThreadCreate(osThread(myTask2), NULL);
 800054c:	463b      	mov	r3, r7
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 f991 	bl	8003878 <osThreadCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <main+0x80>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f003 f985 	bl	800386a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <main+0x6c>
 8000564:	2000031c 	.word	0x2000031c
 8000568:	08004f28 	.word	0x08004f28
 800056c:	200003f0 	.word	0x200003f0
 8000570:	08004f4c 	.word	0x08004f4c
 8000574:	200003f4 	.word	0x200003f4

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	@ 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	@ 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fbe4 	bl	8004d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059e:	f000 fdfd 	bl	800119c <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f956 	bl	8000858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c6:	230a      	movs	r3, #10
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fe34 	bl	8001248 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005e6:	f000 f937 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	2104      	movs	r1, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f9fc 	bl	8001a00 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060e:	f000 f923 	bl	8000858 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3758      	adds	r7, #88	@ 0x58
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <MX_TIM16_Init+0x4c>)
 8000624:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000-1;
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000628:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800062c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000-1;
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000636:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800063a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_TIM16_Init+0x48>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_TIM16_Init+0x48>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_TIM16_Init+0x48>)
 8000650:	f002 f8e8 	bl	8002824 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800065a:	f000 f8fd 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000031c 	.word	0x2000031c
 8000668:	40014400 	.word	0x40014400

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	f002 fba2 	bl	8002df8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f8cd 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000368 	.word	0x20000368
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b36      	ldr	r3, [pc, #216]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a35      	ldr	r2, [pc, #212]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b33      	ldr	r3, [pc, #204]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b30      	ldr	r3, [pc, #192]	@ (80007bc <MX_GPIO_Init+0xf0>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a2f      	ldr	r2, [pc, #188]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a29      	ldr	r2, [pc, #164]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_GPIO_Init+0xf0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a23      	ldr	r2, [pc, #140]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_GPIO_Init+0xf0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f000 fce6 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2120      	movs	r1, #32
 8000754:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <MX_GPIO_Init+0xf4>)
 8000756:	f000 fce1 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <MX_GPIO_Init+0xf8>)
 8000772:	f000 fb29 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 8000776:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fb19 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000796:	2320      	movs	r3, #32
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_GPIO_Init+0xf4>)
 80007ae:	f000 fb0b 	bl	8000dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000400 	.word	0x48000400
 80007c4:	48000800 	.word	0x48000800

080007c8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80007d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f000 fcb8 	bl	800114c <HAL_GPIO_TogglePin>
	osDelay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e0:	f003 f896 	bl	8003910 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80007e4:	bf00      	nop
 80007e6:	e7f3      	b.n	80007d0 <StartTask1+0x8>

080007e8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80007f0:	2120      	movs	r1, #32
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <StartTask2+0x1c>)
 80007f4:	f000 fcaa 	bl	800114c <HAL_GPIO_TogglePin>
	osDelay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fc:	f003 f888 	bl	8003910 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000800:	bf00      	nop
 8000802:	e7f5      	b.n	80007f0 <StartTask2+0x8>
 8000804:	48000400 	.word	0x48000400

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 f9d3 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM16)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d10b      	bne.n	8000840 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		tim16InterruptCount++;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000830:	6013      	str	r3, [r2, #0]

		if(tim16InterruptCount >= 100)
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b63      	cmp	r3, #99	@ 0x63
 8000838:	d902      	bls.n	8000840 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
		HAL_TIM_Base_Stop_IT(&htim16);
 800083a:	4806      	ldr	r0, [pc, #24]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800083c:	f002 f8ba 	bl	80029b4 <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 1 */
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40000800 	.word	0x40000800
 800084c:	40014400 	.word	0x40014400
 8000850:	200003f8 	.word	0x200003f8
 8000854:	2000031c 	.word	0x2000031c

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_MspInit+0x4c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	@ 0x60
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	@ 0x58
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f000 fa67 	bl	8000d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_TIM_Base_MspInit+0x48>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 fa46 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008e8:	2019      	movs	r0, #25
 80008ea:	f000 fa5f 	bl	8000dac <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40014400 	.word	0x40014400
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0ac      	sub	sp, #176	@ 0xb0
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2288      	movs	r2, #136	@ 0x88
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f004 fa17 	bl	8004d54 <memset>
  if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <HAL_UART_MspInit+0xb0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d13b      	bne.n	80009a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000930:	2302      	movs	r3, #2
 8000932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fab5 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000948:	f7ff ff86 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000950:	4a18      	ldr	r2, [pc, #96]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000956:	6593      	str	r3, [r2, #88]	@ 0x58
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_UART_MspInit+0xb4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097c:	230c      	movs	r3, #12
 800097e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000994:	2307      	movs	r3, #7
 8000996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f000 fa10 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a8:	bf00      	nop
 80009aa:	37b0      	adds	r7, #176	@ 0xb0
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <HAL_InitTick+0xe0>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009de:	f107 0210 	add.w	r2, r7, #16
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 f9cd 	bl	8001d88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d103      	bne.n	8000a00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 f99a 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 80009fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80009fe:	e004      	b.n	8000a0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a00:	f001 f996 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8000a04:	4603      	mov	r3, r0
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <HAL_InitTick+0xe4>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <HAL_InitTick+0xec>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a3e:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a40:	f001 fef0 	bl	8002824 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <HAL_InitTick+0xe8>)
 8000a54:	f001 ff3e 	bl	80028d4 <HAL_TIM_Base_Start_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d111      	bne.n	8000a8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a66:	201e      	movs	r0, #30
 8000a68:	f000 f9a0 	bl	8000dac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d808      	bhi.n	8000a84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	201e      	movs	r0, #30
 8000a78:	f000 f97c 	bl	8000d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_InitTick+0xf0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3738      	adds	r7, #56	@ 0x38
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	200003fc 	.word	0x200003fc
 8000aa4:	40000800 	.word	0x40000800
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aea:	f001 ff92 	bl	8002a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000031c 	.word	0x2000031c

08000af8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <TIM4_IRQHandler+0x10>)
 8000afe:	f001 ff88 	bl	8002a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003fc 	.word	0x200003fc

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 f957 	bl	8004e10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fcc7 	bl	80004f4 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b74:	08004fc8 	.word	0x08004fc8
  ldr r2, =_sbss
 8000b78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b7c:	20001298 	.word	0x20001298

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_Init+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_Init+0x3c>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f8df 	bl	8000d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	f7ff ff09 	bl	80009b8 <HAL_InitTick>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	e001      	b.n	8000bb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb2:	f7ff fe57 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000448 	.word	0x20000448

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000448 	.word	0x20000448

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	@ (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	@ (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	@ 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff4c 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d86:	f7ff ff61 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	6978      	ldr	r0, [r7, #20]
 8000d92:	f7ff ffb1 	bl	8000cf8 <NVIC_EncodePriority>
 8000d96:	4602      	mov	r2, r0
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff80 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff54 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e17f      	b.n	80010d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8171 	beq.w	80010d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <HAL_GPIO_Init+0x40>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d118      	bne.n	8000ea8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80ac 	beq.w	80010d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f86:	4b5c      	ldr	r3, [pc, #368]	@ (80010f8 <HAL_GPIO_Init+0x330>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <HAL_GPIO_Init+0x334>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x242>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <HAL_GPIO_Init+0x338>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x23e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001104 <HAL_GPIO_Init+0x33c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x23a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001108 <HAL_GPIO_Init+0x340>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x236>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800110c <HAL_GPIO_Init+0x344>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x232>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8001110 <HAL_GPIO_Init+0x348>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x22e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8001114 <HAL_GPIO_Init+0x34c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x22a>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x244>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x244>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x244>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x244>
 800100a:	2300      	movs	r3, #0
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101c:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_GPIO_Init+0x334>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <HAL_GPIO_Init+0x350>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800104e:	4a32      	ldr	r2, [pc, #200]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001054:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <HAL_GPIO_Init+0x350>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <HAL_GPIO_Init+0x350>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f47f ae78 	bne.w	8000dd8 <HAL_GPIO_Init+0x10>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	48001800 	.word	0x48001800
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_PWREx_GetVoltageRange+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000

0800119c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011aa:	d130      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011b8:	d038      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2232      	movs	r2, #50	@ 0x32
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	e002      	b.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f4:	d102      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f2      	bne.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001208:	d110      	bne.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e00f      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d007      	beq.n	800122c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e3ca      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b97      	ldr	r3, [pc, #604]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001264:	4b94      	ldr	r3, [pc, #592]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80e4 	beq.w	8001444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_RCC_OscConfig+0x4a>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	f040 808b 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 8087 	bne.w	80013a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001292:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x62>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3a2      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1a      	ldr	r2, [r3, #32]
 80012ae:	4b82      	ldr	r3, [pc, #520]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_RCC_OscConfig+0x7c>
 80012ba:	4b7f      	ldr	r3, [pc, #508]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c2:	e005      	b.n	80012d0 <HAL_RCC_OscConfig+0x88>
 80012c4:	4b7c      	ldr	r3, [pc, #496]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d223      	bcs.n	800131c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fd87 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e383      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e8:	4b73      	ldr	r3, [pc, #460]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a72      	ldr	r2, [pc, #456]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	496d      	ldr	r1, [pc, #436]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001306:	4b6c      	ldr	r3, [pc, #432]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4968      	ldr	r1, [pc, #416]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e025      	b.n	8001368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4b66      	ldr	r3, [pc, #408]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a65      	ldr	r2, [pc, #404]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b63      	ldr	r3, [pc, #396]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4960      	ldr	r1, [pc, #384]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	4b5f      	ldr	r3, [pc, #380]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	495b      	ldr	r1, [pc, #364]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fd47 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e343      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001368:	f000 fc4a 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4950      	ldr	r1, [pc, #320]	@ (80014bc <HAL_RCC_OscConfig+0x274>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_RCC_OscConfig+0x278>)
 8001386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001388:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_RCC_OscConfig+0x27c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fb13 	bl	80009b8 <HAL_InitTick>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d052      	beq.n	8001442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	e327      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d032      	beq.n	800140e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a42      	ldr	r2, [pc, #264]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc1a 	bl	8000bec <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc16 	bl	8000bec <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e310      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ce:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a36      	ldr	r2, [pc, #216]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4931      	ldr	r1, [pc, #196]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f8:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	492c      	ldr	r1, [pc, #176]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e01a      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800141a:	f7ff fbe7 	bl	8000bec <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001422:	f7ff fbe3 	bl	8000bec <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e2dd      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x1da>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d074      	beq.n	800153a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x21a>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d064      	beq.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d160      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e2ba      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x24a>
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e026      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149a:	d115      	bne.n	80014c8 <HAL_RCC_OscConfig+0x280>
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a02      	ldr	r2, [pc, #8]	@ (80014b8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x298>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08004f70 	.word	0x08004f70
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
 80014c8:	4ba0      	ldr	r3, [pc, #640]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a9f      	ldr	r2, [pc, #636]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b9d      	ldr	r3, [pc, #628]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a9c      	ldr	r2, [pc, #624]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb80 	bl	8000bec <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb7c 	bl	8000bec <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	@ 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e276      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001502:	4b92      	ldr	r3, [pc, #584]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2a8>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb6c 	bl	8000bec <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb68 	bl	8000bec <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	@ 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e262      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d0>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d060      	beq.n	8001608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x310>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d119      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d116      	bne.n	8001586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x328>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e23f      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b76      	ldr	r3, [pc, #472]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	4973      	ldr	r1, [pc, #460]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001584:	e040      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d023      	beq.n	80015d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158e:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fb27 	bl	8000bec <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb23 	bl	8000bec <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e21d      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b62      	ldr	r3, [pc, #392]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	495f      	ldr	r1, [pc, #380]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5c      	ldr	r2, [pc, #368]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb03 	bl	8000bec <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff faff 	bl	8000bec <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1f9      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03c      	beq.n	800168e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01c      	beq.n	8001656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fade 	bl	8000bec <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fada 	bl	8000bec <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1d4      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ef      	beq.n	8001634 <HAL_RCC_OscConfig+0x3ec>
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165c:	4a3b      	ldr	r2, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fac1 	bl	8000bec <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fabd 	bl	8000bec <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1b7      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ef      	bne.n	800166e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a6 	beq.w	80017e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a26      	ldr	r2, [pc, #152]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d118      	bne.n	8001706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fa84 	bl	8000bec <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff fa80 	bl	8000bec <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e17a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_RCC_OscConfig+0x508>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d8>
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171e:	e029      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d115      	bne.n	8001754 <HAL_RCC_OscConfig+0x50c>
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a03      	ldr	r2, [pc, #12]	@ (800174c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x52c>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	4b9c      	ldr	r3, [pc, #624]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	4a9b      	ldr	r2, [pc, #620]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001764:	4b98      	ldr	r3, [pc, #608]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	4a97      	ldr	r2, [pc, #604]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d016      	beq.n	80017aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa36 	bl	8000bec <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fa32 	bl	8000bec <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e12a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	4b8b      	ldr	r3, [pc, #556]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ed      	beq.n	8001784 <HAL_RCC_OscConfig+0x53c>
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa1f 	bl	8000bec <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fa1b 	bl	8000bec <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e113      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	4b7f      	ldr	r3, [pc, #508]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ed      	bne.n	80017b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b7a      	ldr	r3, [pc, #488]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80fe 	beq.w	80019ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 80d0 	bne.w	800199c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017fc:	4b72      	ldr	r3, [pc, #456]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	429a      	cmp	r2, r3
 800180e:	d130      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	3b01      	subs	r3, #1
 800181c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d127      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11f      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800183c:	2a07      	cmp	r2, #7
 800183e:	bf14      	ite	ne
 8001840:	2201      	movne	r2, #1
 8001842:	2200      	moveq	r2, #0
 8001844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d06e      	beq.n	8001950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d069      	beq.n	800194c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001878:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001884:	4b50      	ldr	r3, [pc, #320]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0ad      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001894:	4b4c      	ldr	r3, [pc, #304]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a4b      	ldr	r2, [pc, #300]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800189a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018a0:	f7ff f9a4 	bl	8000bec <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f9a0 	bl	8000bec <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e09a      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ba:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_RCC_OscConfig+0x784>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018e0:	0212      	lsls	r2, r2, #8
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018e8:	0852      	lsrs	r2, r2, #1
 80018ea:	3a01      	subs	r2, #1
 80018ec:	0552      	lsls	r2, r2, #21
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0652      	lsls	r2, r2, #25
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001900:	0912      	lsrs	r2, r2, #4
 8001902:	0452      	lsls	r2, r2, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	4930      	ldr	r1, [pc, #192]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001924:	f7ff f962 	bl	8000bec <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f95e 	bl	8000bec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e058      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194a:	e050      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e04f      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d148      	bne.n	80019ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a19      	ldr	r2, [pc, #100]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a16      	ldr	r2, [pc, #88]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001974:	f7ff f93a 	bl	8000bec <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f936 	bl	8000bec <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e030      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x734>
 800199a:	e028      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d023      	beq.n	80019ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_RCC_OscConfig+0x780>)
 80019a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f91d 	bl	8000bec <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f919 	bl	8000bec <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d905      	bls.n	80019d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ec      	bne.n	80019b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	4905      	ldr	r1, [pc, #20]	@ (80019f8 <HAL_RCC_OscConfig+0x7b0>)
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_RCC_OscConfig+0x7b4>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
 80019e8:	e001      	b.n	80019ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	feeefffc 	.word	0xfeeefffc

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0e7      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4970      	ldr	r1, [pc, #448]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b6e      	ldr	r3, [pc, #440]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0cf      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d908      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b63      	ldr	r3, [pc, #396]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4960      	ldr	r1, [pc, #384]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04c      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d121      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0a6      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e09a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e08e      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e086      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b46      	ldr	r3, [pc, #280]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4943      	ldr	r1, [pc, #268]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae8:	f7ff f880 	bl	8000bec <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff f87c 	bl	8000bec <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e06e      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d208      	bcs.n	8001b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	492b      	ldr	r1, [pc, #172]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d210      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 0207 	bic.w	r2, r3, #7
 8001b5c:	4923      	ldr	r1, [pc, #140]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e036      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	4918      	ldr	r1, [pc, #96]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4910      	ldr	r1, [pc, #64]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb4:	f000 f824 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	490b      	ldr	r1, [pc, #44]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1fc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe feed 	bl	80009b8 <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001be2:	7afb      	ldrb	r3, [r7, #11]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08004f70 	.word	0x08004f70
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x34>
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d121      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11e      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c34:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e004      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d134      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d003      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0xac>
 8001ca4:	e005      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca8:	617b      	str	r3, [r7, #20]
      break;
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cae:	617b      	str	r3, [r7, #20]
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	617b      	str	r3, [r7, #20]
      break;
 8001cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	fb03 f202 	mul.w	r2, r3, r2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0e5b      	lsrs	r3, r3, #25
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08004f88 	.word	0x08004f88
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d34:	f7ff fff0 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4904      	ldr	r1, [pc, #16]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08004f80 	.word	0x08004f80

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d60:	f7ff ffda 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0adb      	lsrs	r3, r3, #11
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4904      	ldr	r1, [pc, #16]	@ (8001d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08004f80 	.word	0x08004f80

08001d88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	220f      	movs	r2, #15
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_RCC_GetClockConfig+0x60>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0207 	and.w	r2, r3, #7
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40022000 	.word	0x40022000

08001dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e04:	f7ff f9bc 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001e08:	6178      	str	r0, [r7, #20]
 8001e0a:	e014      	b.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	4a24      	ldr	r2, [pc, #144]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f9ac 	bl	8001180 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e3c:	d10b      	bne.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b80      	cmp	r3, #128	@ 0x80
 8001e42:	d919      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e48:	d902      	bls.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e013      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e50:	2301      	movs	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e010      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	d902      	bls.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e00a      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	@ 0x80
 8001e66:	d102      	bne.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e004      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b70      	cmp	r3, #112	@ 0x70
 8001e72:	d101      	bne.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	4909      	ldr	r1, [pc, #36]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d041      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ecc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed0:	d02a      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ed2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ed6:	d824      	bhi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee2:	d81e      	bhi.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eec:	d010      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eee:	e018      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef0:	4b86      	ldr	r3, [pc, #536]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a85      	ldr	r2, [pc, #532]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001efc:	e015      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fabb 	bl	8002480 <RCCEx_PLLSAI1_Config>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0e:	e00c      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3320      	adds	r3, #32
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fba6 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f20:	e003      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	74fb      	strb	r3, [r7, #19]
      break;
 8001f26:	e000      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f2a:	7cfb      	ldrb	r3, [r7, #19]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f30:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3e:	4973      	ldr	r1, [pc, #460]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f46:	e001      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d041      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f60:	d02a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f66:	d824      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f72:	d81e      	bhi.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f80:	4b62      	ldr	r3, [pc, #392]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a61      	ldr	r2, [pc, #388]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f8c:	e015      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fa73 	bl	8002480 <RCCEx_PLLSAI1_Config>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9e:	e00c      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3320      	adds	r3, #32
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fb5e 	bl	8002668 <RCCEx_PLLSAI2_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb0:	e003      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb6:	e000      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fc0:	4b52      	ldr	r3, [pc, #328]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fce:	494f      	ldr	r1, [pc, #316]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fd6:	e001      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a0 	beq.w	800212a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	4a40      	ldr	r2, [pc, #256]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002010:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201c:	2301      	movs	r3, #1
 800201e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a3a      	ldr	r2, [pc, #232]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202c:	f7fe fdde 	bl	8000bec <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002032:	e009      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe fdda 	bl	8000bec <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d902      	bls.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	74fb      	strb	r3, [r7, #19]
        break;
 8002046:	e005      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002048:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d15c      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800205a:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d019      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002078:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002084:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a20      	ldr	r2, [pc, #128]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fd99 	bl	8000bec <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	e00b      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe fd95 	bl	8000bec <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d902      	bls.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	74fb      	strb	r3, [r7, #19]
            break;
 80020d4:	e006      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ec      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020fa:	4904      	ldr	r1, [pc, #16]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002102:	e009      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
 8002108:	e006      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002118:	7c7b      	ldrb	r3, [r7, #17]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b9e      	ldr	r3, [pc, #632]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	4a9d      	ldr	r2, [pc, #628]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002136:	4b98      	ldr	r3, [pc, #608]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f023 0203 	bic.w	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002144:	4994      	ldr	r1, [pc, #592]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002158:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f023 020c 	bic.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	498c      	ldr	r1, [pc, #560]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800217a:	4b87      	ldr	r3, [pc, #540]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4983      	ldr	r1, [pc, #524]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	497b      	ldr	r1, [pc, #492]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021be:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	4972      	ldr	r1, [pc, #456]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	496a      	ldr	r1, [pc, #424]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	4961      	ldr	r1, [pc, #388]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002224:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4959      	ldr	r1, [pc, #356]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002246:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	4950      	ldr	r1, [pc, #320]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002268:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	4948      	ldr	r1, [pc, #288]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	493f      	ldr	r1, [pc, #252]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d028      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ba:	4937      	ldr	r1, [pc, #220]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ca:	d106      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
 80022d8:	e011      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e2:	d10c      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	2101      	movs	r1, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f8c8 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800230a:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002310:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	491f      	ldr	r1, [pc, #124]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002328:	d106      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232a:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002334:	60d3      	str	r3, [r2, #12]
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f899 	bl	8002480 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02b      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002386:	d109      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a02      	ldr	r2, [pc, #8]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e014      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f867 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02f      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023cc:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023da:	4928      	ldr	r1, [pc, #160]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ea:	d10d      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f844 	bl	8002480 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	74bb      	strb	r3, [r7, #18]
 8002406:	e011      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800240c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3320      	adds	r3, #32
 8002416:	2102      	movs	r1, #2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f925 	bl	8002668 <RCCEx_PLLSAI2_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800246a:	4904      	ldr	r1, [pc, #16]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002472:	7cbb      	ldrb	r3, [r7, #18]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000

08002480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800248e:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d018      	beq.n	80024cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800249a:	4b72      	ldr	r3, [pc, #456]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0203 	and.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d10d      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
       ||
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
       ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d047      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e044      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d018      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x86>
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d825      	bhi.n	8002524 <RCCEx_PLLSAI1_Config+0xa4>
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d002      	beq.n	80024e2 <RCCEx_PLLSAI1_Config+0x62>
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d009      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x74>
 80024e0:	e020      	b.n	8002524 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e2:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11d      	bne.n	800252a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f2:	e01a      	b.n	800252a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d116      	bne.n	800252e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e013      	b.n	800252e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002522:	e006      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
      break;
 8002528:	e004      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002532:	bf00      	nop
    }

    if(status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	430b      	orrs	r3, r1
 8002550:	4944      	ldr	r1, [pc, #272]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d17d      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800255c:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a40      	ldr	r2, [pc, #256]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002568:	f7fe fb40 	bl	8000bec <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800256e:	e009      	b.n	8002584 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002570:	f7fe fb3c 	bl	8000bec <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d902      	bls.n	8002584 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	73fb      	strb	r3, [r7, #15]
        break;
 8002582:	e005      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ef      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d160      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6892      	ldr	r2, [r2, #8]
 80025ac:	0211      	lsls	r1, r2, #8
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	0912      	lsrs	r2, r2, #4
 80025b4:	0452      	lsls	r2, r2, #17
 80025b6:	430a      	orrs	r2, r1
 80025b8:	492a      	ldr	r1, [pc, #168]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	610b      	str	r3, [r1, #16]
 80025be:	e027      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80025ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6892      	ldr	r2, [r2, #8]
 80025d6:	0211      	lsls	r1, r2, #8
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6912      	ldr	r2, [r2, #16]
 80025dc:	0852      	lsrs	r2, r2, #1
 80025de:	3a01      	subs	r2, #1
 80025e0:	0552      	lsls	r2, r2, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	491f      	ldr	r1, [pc, #124]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	610b      	str	r3, [r1, #16]
 80025ea:	e011      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6952      	ldr	r2, [r2, #20]
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0652      	lsls	r2, r2, #25
 8002608:	430a      	orrs	r2, r1
 800260a:	4916      	ldr	r1, [pc, #88]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800261a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fae6 	bl	8000bec <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002622:	e009      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002624:	f7fe fae2 	bl	8000bec <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
          break;
 8002636:	e005      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ef      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	4904      	ldr	r1, [pc, #16]	@ (8002664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002682:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
       ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800269a:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
       ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d047      	beq.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e044      	b.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d018      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x86>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d825      	bhi.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0x62>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d009      	beq.n	80026dc <RCCEx_PLLSAI2_Config+0x74>
 80026c8:	e020      	b.n	800270c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ca:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11d      	bne.n	8002712 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e01a      	b.n	8002712 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026dc:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ec:	e013      	b.n	8002716 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270a:	e006      	b.n	800271a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e004      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800271a:	bf00      	nop
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002722:	4b3f      	ldr	r3, [pc, #252]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	430b      	orrs	r3, r1
 8002738:	4939      	ldr	r1, [pc, #228]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d167      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fa4c 	bl	8000bec <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002758:	f7fe fa48 	bl	8000bec <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
        break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800276c:	4b2c      	ldr	r3, [pc, #176]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ef      	bne.n	8002758 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14a      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002784:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800278c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	0211      	lsls	r1, r2, #8
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	0912      	lsrs	r2, r2, #4
 800279c:	0452      	lsls	r2, r2, #17
 800279e:	430a      	orrs	r2, r1
 80027a0:	491f      	ldr	r1, [pc, #124]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	614b      	str	r3, [r1, #20]
 80027a6:	e011      	b.n	80027cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6892      	ldr	r2, [r2, #8]
 80027b8:	0211      	lsls	r1, r2, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6912      	ldr	r2, [r2, #16]
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0652      	lsls	r2, r2, #25
 80027c4:	430a      	orrs	r2, r1
 80027c6:	4916      	ldr	r1, [pc, #88]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fa08 	bl	8000bec <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027de:	e009      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e0:	f7fe fa04 	bl	8000bec <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	73fb      	strb	r3, [r7, #15]
          break;
 80027f2:	e005      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4904      	ldr	r1, [pc, #16]	@ (8002820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e049      	b.n	80028ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe f832 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fa04 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e04f      	b.n	800298c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <HAL_TIM_Base_Start_IT+0xc4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01d      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002916:	d018      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_TIM_Base_Start_IT+0xc8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x76>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a19      	ldr	r2, [pc, #100]	@ (80029ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d115      	bne.n	8002976 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002952:	4013      	ands	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b06      	cmp	r3, #6
 800295a:	d015      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0xb4>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002962:	d011      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	e008      	b.n	8002988 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e000      	b.n	800298a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40000400 	.word	0x40000400
 80029a0:	40000800 	.word	0x40000800
 80029a4:	40000c00 	.word	0x40000c00
 80029a8:	40013400 	.word	0x40013400
 80029ac:	40014000 	.word	0x40014000
 80029b0:	00010007 	.word	0x00010007

080029b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a1a      	ldr	r2, [r3, #32]
 80029d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <HAL_TIM_Base_Stop_IT+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_TIM_Base_Stop_IT+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01b      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0202 	mvn.w	r2, #2
 8002a46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f8e9 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002a62:	e005      	b.n	8002a70 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8db 	bl	8002c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8ec 	bl	8002c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01b      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0204 	mvn.w	r2, #4
 8002a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8c3 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002aae:	e005      	b.n	8002abc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8b5 	bl	8002c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8c6 	bl	8002c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f06f 0208 	mvn.w	r2, #8
 8002ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f89d 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002afa:	e005      	b.n	8002b08 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f88f 	bl	8002c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8a0 	bl	8002c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0210 	mvn.w	r2, #16
 8002b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2208      	movs	r2, #8
 8002b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f877 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
 8002b46:	e005      	b.n	8002b54 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f869 	bl	8002c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f87a 	bl	8002c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0201 	mvn.w	r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fd fe45 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f912 	bl	8002dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f90a 	bl	8002de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f834 	bl	8002c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0220 	mvn.w	r2, #32
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8d2 	bl	8002dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8e:	d00f      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a32      	ldr	r2, [pc, #200]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2f      	ldr	r2, [pc, #188]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8002db0 <TIM_Base_SetConfig+0x140>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8002db4 <TIM_Base_SetConfig+0x144>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <TIM_Base_SetConfig+0x148>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00f      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <TIM_Base_SetConfig+0x140>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <TIM_Base_SetConfig+0x144>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <TIM_Base_SetConfig+0x148>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40013400 	.word	0x40013400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800

08002dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e040      	b.n	8002e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fd70 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fae0 	bl	8003404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f825 	bl	8002e94 <UART_SetConfig>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01b      	b.n	8002e8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fb5f 	bl	8003548 <UART_CheckIdleState>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e98:	b08a      	sub	sp, #40	@ 0x28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4ba4      	ldr	r3, [pc, #656]	@ (8003154 <UART_SetConfig+0x2c0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a99      	ldr	r2, [pc, #612]	@ (8003158 <UART_SetConfig+0x2c4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	4313      	orrs	r3, r2
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a90      	ldr	r2, [pc, #576]	@ (800315c <UART_SetConfig+0x2c8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d126      	bne.n	8002f6c <UART_SetConfig+0xd8>
 8002f1e:	4b90      	ldr	r3, [pc, #576]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d81b      	bhi.n	8002f64 <UART_SetConfig+0xd0>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <UART_SetConfig+0xa0>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f55 	.word	0x08002f55
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f5d 	.word	0x08002f5d
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4a:	e116      	b.n	800317a <UART_SetConfig+0x2e6>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f52:	e112      	b.n	800317a <UART_SetConfig+0x2e6>
 8002f54:	2304      	movs	r3, #4
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5a:	e10e      	b.n	800317a <UART_SetConfig+0x2e6>
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f62:	e10a      	b.n	800317a <UART_SetConfig+0x2e6>
 8002f64:	2310      	movs	r3, #16
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6a:	e106      	b.n	800317a <UART_SetConfig+0x2e6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7c      	ldr	r2, [pc, #496]	@ (8003164 <UART_SetConfig+0x2d0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d138      	bne.n	8002fe8 <UART_SetConfig+0x154>
 8002f76:	4b7a      	ldr	r3, [pc, #488]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d82d      	bhi.n	8002fe0 <UART_SetConfig+0x14c>
 8002f84:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <UART_SetConfig+0xf8>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	08002fe1 	.word	0x08002fe1
 8002f98:	08002fe1 	.word	0x08002fe1
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	08002fe1 	.word	0x08002fe1
 8002fa4:	08002fe1 	.word	0x08002fe1
 8002fa8:	08002fe1 	.word	0x08002fe1
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	08002fe1 	.word	0x08002fe1
 8002fb4:	08002fe1 	.word	0x08002fe1
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fd9 	.word	0x08002fd9
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e0d8      	b.n	800317a <UART_SetConfig+0x2e6>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e0d4      	b.n	800317a <UART_SetConfig+0x2e6>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e0d0      	b.n	800317a <UART_SetConfig+0x2e6>
 8002fd8:	2308      	movs	r3, #8
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e0cc      	b.n	800317a <UART_SetConfig+0x2e6>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe6:	e0c8      	b.n	800317a <UART_SetConfig+0x2e6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5e      	ldr	r2, [pc, #376]	@ (8003168 <UART_SetConfig+0x2d4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d125      	bne.n	800303e <UART_SetConfig+0x1aa>
 8002ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8003160 <UART_SetConfig+0x2cc>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ffc:	2b30      	cmp	r3, #48	@ 0x30
 8002ffe:	d016      	beq.n	800302e <UART_SetConfig+0x19a>
 8003000:	2b30      	cmp	r3, #48	@ 0x30
 8003002:	d818      	bhi.n	8003036 <UART_SetConfig+0x1a2>
 8003004:	2b20      	cmp	r3, #32
 8003006:	d00a      	beq.n	800301e <UART_SetConfig+0x18a>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d814      	bhi.n	8003036 <UART_SetConfig+0x1a2>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <UART_SetConfig+0x182>
 8003010:	2b10      	cmp	r3, #16
 8003012:	d008      	beq.n	8003026 <UART_SetConfig+0x192>
 8003014:	e00f      	b.n	8003036 <UART_SetConfig+0x1a2>
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301c:	e0ad      	b.n	800317a <UART_SetConfig+0x2e6>
 800301e:	2302      	movs	r3, #2
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003024:	e0a9      	b.n	800317a <UART_SetConfig+0x2e6>
 8003026:	2304      	movs	r3, #4
 8003028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302c:	e0a5      	b.n	800317a <UART_SetConfig+0x2e6>
 800302e:	2308      	movs	r3, #8
 8003030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003034:	e0a1      	b.n	800317a <UART_SetConfig+0x2e6>
 8003036:	2310      	movs	r3, #16
 8003038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303c:	e09d      	b.n	800317a <UART_SetConfig+0x2e6>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <UART_SetConfig+0x2d8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d125      	bne.n	8003094 <UART_SetConfig+0x200>
 8003048:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <UART_SetConfig+0x2cc>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003052:	2bc0      	cmp	r3, #192	@ 0xc0
 8003054:	d016      	beq.n	8003084 <UART_SetConfig+0x1f0>
 8003056:	2bc0      	cmp	r3, #192	@ 0xc0
 8003058:	d818      	bhi.n	800308c <UART_SetConfig+0x1f8>
 800305a:	2b80      	cmp	r3, #128	@ 0x80
 800305c:	d00a      	beq.n	8003074 <UART_SetConfig+0x1e0>
 800305e:	2b80      	cmp	r3, #128	@ 0x80
 8003060:	d814      	bhi.n	800308c <UART_SetConfig+0x1f8>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <UART_SetConfig+0x1d8>
 8003066:	2b40      	cmp	r3, #64	@ 0x40
 8003068:	d008      	beq.n	800307c <UART_SetConfig+0x1e8>
 800306a:	e00f      	b.n	800308c <UART_SetConfig+0x1f8>
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e082      	b.n	800317a <UART_SetConfig+0x2e6>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e07e      	b.n	800317a <UART_SetConfig+0x2e6>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003082:	e07a      	b.n	800317a <UART_SetConfig+0x2e6>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308a:	e076      	b.n	800317a <UART_SetConfig+0x2e6>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003092:	e072      	b.n	800317a <UART_SetConfig+0x2e6>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a35      	ldr	r2, [pc, #212]	@ (8003170 <UART_SetConfig+0x2dc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d12a      	bne.n	80030f4 <UART_SetConfig+0x260>
 800309e:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <UART_SetConfig+0x2cc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ac:	d01a      	beq.n	80030e4 <UART_SetConfig+0x250>
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b2:	d81b      	bhi.n	80030ec <UART_SetConfig+0x258>
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b8:	d00c      	beq.n	80030d4 <UART_SetConfig+0x240>
 80030ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030be:	d815      	bhi.n	80030ec <UART_SetConfig+0x258>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <UART_SetConfig+0x238>
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c8:	d008      	beq.n	80030dc <UART_SetConfig+0x248>
 80030ca:	e00f      	b.n	80030ec <UART_SetConfig+0x258>
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d2:	e052      	b.n	800317a <UART_SetConfig+0x2e6>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030da:	e04e      	b.n	800317a <UART_SetConfig+0x2e6>
 80030dc:	2304      	movs	r3, #4
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e2:	e04a      	b.n	800317a <UART_SetConfig+0x2e6>
 80030e4:	2308      	movs	r3, #8
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ea:	e046      	b.n	800317a <UART_SetConfig+0x2e6>
 80030ec:	2310      	movs	r3, #16
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f2:	e042      	b.n	800317a <UART_SetConfig+0x2e6>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <UART_SetConfig+0x2c4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d13a      	bne.n	8003174 <UART_SetConfig+0x2e0>
 80030fe:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <UART_SetConfig+0x2cc>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003108:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800310c:	d01a      	beq.n	8003144 <UART_SetConfig+0x2b0>
 800310e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003112:	d81b      	bhi.n	800314c <UART_SetConfig+0x2b8>
 8003114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003118:	d00c      	beq.n	8003134 <UART_SetConfig+0x2a0>
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311e:	d815      	bhi.n	800314c <UART_SetConfig+0x2b8>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <UART_SetConfig+0x298>
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d008      	beq.n	800313c <UART_SetConfig+0x2a8>
 800312a:	e00f      	b.n	800314c <UART_SetConfig+0x2b8>
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e022      	b.n	800317a <UART_SetConfig+0x2e6>
 8003134:	2302      	movs	r3, #2
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e01e      	b.n	800317a <UART_SetConfig+0x2e6>
 800313c:	2304      	movs	r3, #4
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e01a      	b.n	800317a <UART_SetConfig+0x2e6>
 8003144:	2308      	movs	r3, #8
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e016      	b.n	800317a <UART_SetConfig+0x2e6>
 800314c:	2310      	movs	r3, #16
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003152:	e012      	b.n	800317a <UART_SetConfig+0x2e6>
 8003154:	efff69f3 	.word	0xefff69f3
 8003158:	40008000 	.word	0x40008000
 800315c:	40013800 	.word	0x40013800
 8003160:	40021000 	.word	0x40021000
 8003164:	40004400 	.word	0x40004400
 8003168:	40004800 	.word	0x40004800
 800316c:	40004c00 	.word	0x40004c00
 8003170:	40005000 	.word	0x40005000
 8003174:	2310      	movs	r3, #16
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a9f      	ldr	r2, [pc, #636]	@ (80033fc <UART_SetConfig+0x568>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d17a      	bne.n	800327a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003184:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003188:	2b08      	cmp	r3, #8
 800318a:	d824      	bhi.n	80031d6 <UART_SetConfig+0x342>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <UART_SetConfig+0x300>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031d7 	.word	0x080031d7
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031d7 	.word	0x080031d7
 80031a4:	080031c7 	.word	0x080031c7
 80031a8:	080031d7 	.word	0x080031d7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031d7 	.word	0x080031d7
 80031b4:	080031cf 	.word	0x080031cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b8:	f7fe fdba 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 80031bc:	61f8      	str	r0, [r7, #28]
        break;
 80031be:	e010      	b.n	80031e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003400 <UART_SetConfig+0x56c>)
 80031c2:	61fb      	str	r3, [r7, #28]
        break;
 80031c4:	e00d      	b.n	80031e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c6:	f7fe fd1b 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 80031ca:	61f8      	str	r0, [r7, #28]
        break;
 80031cc:	e009      	b.n	80031e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d2:	61fb      	str	r3, [r7, #28]
        break;
 80031d4:	e005      	b.n	80031e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80fb 	beq.w	80033e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d305      	bcc.n	8003206 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d903      	bls.n	800320e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800320c:	e0e8      	b.n	80033e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2200      	movs	r2, #0
 8003212:	461c      	mov	r4, r3
 8003214:	4615      	mov	r5, r2
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	022b      	lsls	r3, r5, #8
 8003220:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003224:	0222      	lsls	r2, r4, #8
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	6849      	ldr	r1, [r1, #4]
 800322a:	0849      	lsrs	r1, r1, #1
 800322c:	2000      	movs	r0, #0
 800322e:	4688      	mov	r8, r1
 8003230:	4681      	mov	r9, r0
 8003232:	eb12 0a08 	adds.w	sl, r2, r8
 8003236:	eb43 0b09 	adc.w	fp, r3, r9
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003248:	4650      	mov	r0, sl
 800324a:	4659      	mov	r1, fp
 800324c:	f7fc ffc0 	bl	80001d0 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800325e:	d308      	bcc.n	8003272 <UART_SetConfig+0x3de>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003266:	d204      	bcs.n	8003272 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	e0b6      	b.n	80033e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003278:	e0b2      	b.n	80033e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003282:	d15e      	bne.n	8003342 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003284:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003288:	2b08      	cmp	r3, #8
 800328a:	d828      	bhi.n	80032de <UART_SetConfig+0x44a>
 800328c:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <UART_SetConfig+0x400>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032c9 	.word	0x080032c9
 80032a0:	080032df 	.word	0x080032df
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	080032df 	.word	0x080032df
 80032ac:	080032df 	.word	0x080032df
 80032b0:	080032df 	.word	0x080032df
 80032b4:	080032d7 	.word	0x080032d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe fd3a 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 80032bc:	61f8      	str	r0, [r7, #28]
        break;
 80032be:	e014      	b.n	80032ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7fe fd4c 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 80032c4:	61f8      	str	r0, [r7, #28]
        break;
 80032c6:	e010      	b.n	80032ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003400 <UART_SetConfig+0x56c>)
 80032ca:	61fb      	str	r3, [r7, #28]
        break;
 80032cc:	e00d      	b.n	80032ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7fe fc97 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 80032d2:	61f8      	str	r0, [r7, #28]
        break;
 80032d4:	e009      	b.n	80032ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032da:	61fb      	str	r3, [r7, #28]
        break;
 80032dc:	e005      	b.n	80032ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d077      	beq.n	80033e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005a      	lsls	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d916      	bls.n	800333a <UART_SetConfig+0x4a6>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003312:	d212      	bcs.n	800333a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f023 030f 	bic.w	r3, r3, #15
 800331c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	b29a      	uxth	r2, r3
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	4313      	orrs	r3, r2
 800332e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	8afa      	ldrh	r2, [r7, #22]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	e052      	b.n	80033e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003340:	e04e      	b.n	80033e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003346:	2b08      	cmp	r3, #8
 8003348:	d827      	bhi.n	800339a <UART_SetConfig+0x506>
 800334a:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <UART_SetConfig+0x4bc>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003375 	.word	0x08003375
 8003354:	0800337d 	.word	0x0800337d
 8003358:	08003385 	.word	0x08003385
 800335c:	0800339b 	.word	0x0800339b
 8003360:	0800338b 	.word	0x0800338b
 8003364:	0800339b 	.word	0x0800339b
 8003368:	0800339b 	.word	0x0800339b
 800336c:	0800339b 	.word	0x0800339b
 8003370:	08003393 	.word	0x08003393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003374:	f7fe fcdc 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003378:	61f8      	str	r0, [r7, #28]
        break;
 800337a:	e014      	b.n	80033a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800337c:	f7fe fcee 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8003380:	61f8      	str	r0, [r7, #28]
        break;
 8003382:	e010      	b.n	80033a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003384:	4b1e      	ldr	r3, [pc, #120]	@ (8003400 <UART_SetConfig+0x56c>)
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e00d      	b.n	80033a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338a:	f7fe fc39 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 800338e:	61f8      	str	r0, [r7, #28]
        break;
 8003390:	e009      	b.n	80033a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003396:	61fb      	str	r3, [r7, #28]
        break;
 8003398:	e005      	b.n	80033a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033a4:	bf00      	nop
    }

    if (pclk != 0U)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d019      	beq.n	80033e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	085a      	lsrs	r2, r3, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	d909      	bls.n	80033da <UART_SetConfig+0x546>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033cc:	d205      	bcs.n	80033da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	e002      	b.n	80033e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3728      	adds	r7, #40	@ 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fa:	bf00      	nop
 80033fc:	40008000 	.word	0x40008000
 8003400:	00f42400 	.word	0x00f42400

08003404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01a      	beq.n	800351a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003502:	d10a      	bne.n	800351a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b098      	sub	sp, #96	@ 0x60
 800354c:	af02      	add	r7, sp, #8
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003558:	f7fd fb48 	bl	8000bec <HAL_GetTick>
 800355c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d12e      	bne.n	80035ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	2200      	movs	r2, #0
 8003576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f88c 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d021      	beq.n	80035ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359a:	653b      	str	r3, [r7, #80]	@ 0x50
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e6      	bne.n	8003586 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e062      	b.n	8003690 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d149      	bne.n	800366c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f856 	bl	8003698 <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d03c      	beq.n	800366c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003610:	633b      	str	r3, [r7, #48]	@ 0x30
 8003612:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e011      	b.n	8003690 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3758      	adds	r7, #88	@ 0x58
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a8:	e04f      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d04b      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fd fa9b 	bl	8000bec <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e04e      	b.n	800376a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d037      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b80      	cmp	r3, #128	@ 0x80
 80036de:	d034      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b40      	cmp	r3, #64	@ 0x40
 80036e4:	d031      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d110      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2208      	movs	r2, #8
 80036fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f838 	bl	8003772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2208      	movs	r2, #8
 8003706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e029      	b.n	800376a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003724:	d111      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800372e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f81e 	bl	8003772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e00f      	b.n	800376a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	429a      	cmp	r2, r3
 8003766:	d0a0      	beq.n	80036aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003772:	b480      	push	{r7}
 8003774:	b095      	sub	sp, #84	@ 0x54
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003798:	643b      	str	r3, [r7, #64]	@ 0x40
 800379a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800379e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e6      	bne.n	800377a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3308      	adds	r3, #8
 80037ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d118      	bne.n	800381a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0310 	bic.w	r3, r3, #16
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	613b      	str	r3, [r7, #16]
   return(result);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e6      	bne.n	80037e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800382e:	bf00      	nop
 8003830:	3754      	adds	r7, #84	@ 0x54
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800384c:	2b84      	cmp	r3, #132	@ 0x84
 800384e:	d005      	beq.n	800385c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003850:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	3303      	adds	r3, #3
 800385a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800386e:	f000 fafd 	bl	8003e6c <vTaskStartScheduler>
  
  return osOK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}

08003878 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	b089      	sub	sp, #36	@ 0x24
 800387c:	af04      	add	r7, sp, #16
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <osThreadCreate+0x54>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01c      	beq.n	80038cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685c      	ldr	r4, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691e      	ldr	r6, [r3, #16]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ffc8 	bl	800383a <makeFreeRtosPriority>
 80038aa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b4:	9202      	str	r2, [sp, #8]
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	9100      	str	r1, [sp, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	4632      	mov	r2, r6
 80038be:	4629      	mov	r1, r5
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 f8ed 	bl	8003aa0 <xTaskCreateStatic>
 80038c6:	4603      	mov	r3, r0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e01c      	b.n	8003906 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685c      	ldr	r4, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038d8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffaa 	bl	800383a <makeFreeRtosPriority>
 80038e6:	4602      	mov	r2, r0
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	9200      	str	r2, [sp, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4632      	mov	r2, r6
 80038f4:	4629      	mov	r1, r5
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f932 	bl	8003b60 <xTaskCreate>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d001      	beq.n	8003906 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003910 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <osDelay+0x16>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	e000      	b.n	8003928 <osDelay+0x18>
 8003926:	2301      	movs	r3, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa69 	bl	8003e00 <vTaskDelay>
  
  return osOK;
 800392e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0208 	add.w	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 0208 	add.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d103      	bne.n	80039fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e00c      	b.n	8003a14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3308      	adds	r3, #8
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e002      	b.n	8003a08 <vListInsert+0x2e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d2f6      	bcs.n	8003a02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6892      	ldr	r2, [r2, #8]
 8003a62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6852      	ldr	r2, [r2, #4]
 8003a6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d103      	bne.n	8003a80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	@ 0x38
 8003aa4:	af04      	add	r7, sp, #16
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	61fb      	str	r3, [r7, #28]
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	e7fd      	b.n	8003ae6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aea:	23a0      	movs	r3, #160	@ 0xa0
 8003aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af2:	d00b      	beq.n	8003b0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01e      	beq.n	8003b52 <xTaskCreateStatic+0xb2>
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01b      	beq.n	8003b52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f851 	bl	8003bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b4c:	f000 f8ee 	bl	8003d2c <prvAddNewTaskToReadyList>
 8003b50:	e001      	b.n	8003b56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b56:	697b      	ldr	r3, [r7, #20]
	}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	@ 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	@ 0x30
 8003b64:	af04      	add	r7, sp, #16
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 feff 	bl	8004978 <pvPortMalloc>
 8003b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b82:	20a0      	movs	r0, #160	@ 0xa0
 8003b84:	f000 fef8 	bl	8004978 <pvPortMalloc>
 8003b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b96:	e005      	b.n	8003ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b98:	6978      	ldr	r0, [r7, #20]
 8003b9a:	f000 ffbb 	bl	8004b14 <vPortFree>
 8003b9e:	e001      	b.n	8003ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f80f 	bl	8003bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bce:	69f8      	ldr	r0, [r7, #28]
 8003bd0:	f000 f8ac 	bl	8003d2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e002      	b.n	8003be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003be0:	69bb      	ldr	r3, [r7, #24]
	}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c04:	3b01      	subs	r3, #1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	617b      	str	r3, [r7, #20]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e012      	b.n	8003c68 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	7819      	ldrb	r1, [r3, #0]
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3334      	adds	r3, #52	@ 0x34
 8003c52:	460a      	mov	r2, r1
 8003c54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	d9e9      	bls.n	8003c42 <prvInitialiseNewTask+0x56>
 8003c6e:	e000      	b.n	8003c72 <prvInitialiseNewTask+0x86>
			{
				break;
 8003c70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c7a:	e003      	b.n	8003c84 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d901      	bls.n	8003c8e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c8a:	2306      	movs	r3, #6
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe67 	bl	8003978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	3318      	adds	r3, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fe62 	bl	8003978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	f1c3 0207 	rsb	r2, r3, #7
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	334c      	adds	r3, #76	@ 0x4c
 8003cde:	224c      	movs	r2, #76	@ 0x4c
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f836 	bl	8004d54 <memset>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <prvInitialiseNewTask+0x134>)
 8003cec:	651a      	str	r2, [r3, #80]	@ 0x50
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d24 <prvInitialiseNewTask+0x138>)
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d28 <prvInitialiseNewTask+0x13c>)
 8003cf8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	69b8      	ldr	r0, [r7, #24]
 8003d00:	f000 fc2a 	bl	8004558 <pxPortInitialiseStack>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d16:	bf00      	nop
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20001158 	.word	0x20001158
 8003d24:	200011c0 	.word	0x200011c0
 8003d28:	20001228 	.word	0x20001228

08003d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d34:	f000 fd40 	bl	80047b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d38:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <prvAddNewTaskToReadyList+0xb8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <prvAddNewTaskToReadyList+0xb8>)
 8003d40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d42:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <prvAddNewTaskToReadyList+0xbc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d4a:	4a27      	ldr	r2, [pc, #156]	@ (8003de8 <prvAddNewTaskToReadyList+0xbc>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <prvAddNewTaskToReadyList+0xb8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d110      	bne.n	8003d7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d58:	f000 fad4 	bl	8004304 <prvInitialiseTaskLists>
 8003d5c:	e00d      	b.n	8003d7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d5e:	4b23      	ldr	r3, [pc, #140]	@ (8003dec <prvAddNewTaskToReadyList+0xc0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <prvAddNewTaskToReadyList+0xbc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d802      	bhi.n	8003d7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d74:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <prvAddNewTaskToReadyList+0xbc>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <prvAddNewTaskToReadyList+0xc4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <prvAddNewTaskToReadyList+0xc4>)
 8003d82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	2201      	movs	r2, #1
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <prvAddNewTaskToReadyList+0xc8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <prvAddNewTaskToReadyList+0xc8>)
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a15      	ldr	r2, [pc, #84]	@ (8003df8 <prvAddNewTaskToReadyList+0xcc>)
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7ff fdf0 	bl	8003992 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003db2:	f000 fd33 	bl	800481c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003db6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <prvAddNewTaskToReadyList+0xc0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <prvAddNewTaskToReadyList+0xbc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <prvAddNewTaskToReadyList+0xd0>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000054c 	.word	0x2000054c
 8003de8:	2000044c 	.word	0x2000044c
 8003dec:	20000558 	.word	0x20000558
 8003df0:	20000568 	.word	0x20000568
 8003df4:	20000554 	.word	0x20000554
 8003df8:	20000450 	.word	0x20000450
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e12:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <vTaskDelay+0x64>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <vTaskDelay+0x32>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60bb      	str	r3, [r7, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	e7fd      	b.n	8003e2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e32:	f000 f885 	bl	8003f40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e36:	2100      	movs	r1, #0
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb27 	bl	800448c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e3e:	f000 f88d 	bl	8003f5c <xTaskResumeAll>
 8003e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <vTaskDelay+0x68>)
 8003e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000574 	.word	0x20000574
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e7a:	463a      	mov	r2, r7
 8003e7c:	1d39      	adds	r1, r7, #4
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb1c 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	460a      	mov	r2, r1
 8003e9a:	4921      	ldr	r1, [pc, #132]	@ (8003f20 <vTaskStartScheduler+0xb4>)
 8003e9c:	4821      	ldr	r0, [pc, #132]	@ (8003f24 <vTaskStartScheduler+0xb8>)
 8003e9e:	f7ff fdff 	bl	8003aa0 <xTaskCreateStatic>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <vTaskStartScheduler+0xbc>)
 8003ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <vTaskStartScheduler+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e001      	b.n	8003eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11b      	bne.n	8003ef8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	613b      	str	r3, [r7, #16]
}
 8003ed2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ed4:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <vTaskStartScheduler+0xc0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	334c      	adds	r3, #76	@ 0x4c
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <vTaskStartScheduler+0xc4>)
 8003edc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ede:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <vTaskStartScheduler+0xc8>)
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <vTaskStartScheduler+0xcc>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eec:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <vTaskStartScheduler+0xd0>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ef2:	f000 fbbd 	bl	8004670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ef6:	e00f      	b.n	8003f18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d10b      	bne.n	8003f18 <vTaskStartScheduler+0xac>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <vTaskStartScheduler+0xa8>
}
 8003f18:	bf00      	nop
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	08004f68 	.word	0x08004f68
 8003f24:	080042d5 	.word	0x080042d5
 8003f28:	20000570 	.word	0x20000570
 8003f2c:	2000044c 	.word	0x2000044c
 8003f30:	20000010 	.word	0x20000010
 8003f34:	2000056c 	.word	0x2000056c
 8003f38:	20000558 	.word	0x20000558
 8003f3c:	20000550 	.word	0x20000550

08003f40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <vTaskSuspendAll+0x18>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a03      	ldr	r2, [pc, #12]	@ (8003f58 <vTaskSuspendAll+0x18>)
 8003f4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000574 	.word	0x20000574

08003f5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f6a:	4b42      	ldr	r3, [pc, #264]	@ (8004074 <xTaskResumeAll+0x118>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <xTaskResumeAll+0x2e>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	603b      	str	r3, [r7, #0]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f8a:	f000 fc15 	bl	80047b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f8e:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <xTaskResumeAll+0x118>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	4a37      	ldr	r2, [pc, #220]	@ (8004074 <xTaskResumeAll+0x118>)
 8003f96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f98:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <xTaskResumeAll+0x118>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d161      	bne.n	8004064 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fa0:	4b35      	ldr	r3, [pc, #212]	@ (8004078 <xTaskResumeAll+0x11c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05d      	beq.n	8004064 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa8:	e02e      	b.n	8004008 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <xTaskResumeAll+0x120>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fd48 	bl	8003a4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fd43 	bl	8003a4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <xTaskResumeAll+0x124>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004080 <xTaskResumeAll+0x124>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4a27      	ldr	r2, [pc, #156]	@ (8004084 <xTaskResumeAll+0x128>)
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f7ff fccf 	bl	8003992 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff8:	4b23      	ldr	r3, [pc, #140]	@ (8004088 <xTaskResumeAll+0x12c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <xTaskResumeAll+0x130>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004008:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <xTaskResumeAll+0x120>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1cc      	bne.n	8003faa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004016:	f000 fa19 	bl	800444c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <xTaskResumeAll+0x134>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004026:	f000 f837 	bl	8004098 <xTaskIncrementTick>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004030:	4b16      	ldr	r3, [pc, #88]	@ (800408c <xTaskResumeAll+0x130>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3b01      	subs	r3, #1
 800403a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f1      	bne.n	8004026 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004042:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <xTaskResumeAll+0x134>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004048:	4b10      	ldr	r3, [pc, #64]	@ (800408c <xTaskResumeAll+0x130>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004054:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <xTaskResumeAll+0x138>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004064:	f000 fbda 	bl	800481c <vPortExitCritical>

	return xAlreadyYielded;
 8004068:	68bb      	ldr	r3, [r7, #8]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000574 	.word	0x20000574
 8004078:	2000054c 	.word	0x2000054c
 800407c:	2000050c 	.word	0x2000050c
 8004080:	20000554 	.word	0x20000554
 8004084:	20000450 	.word	0x20000450
 8004088:	2000044c 	.word	0x2000044c
 800408c:	20000560 	.word	0x20000560
 8004090:	2000055c 	.word	0x2000055c
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a2:	4b4f      	ldr	r3, [pc, #316]	@ (80041e0 <xTaskIncrementTick+0x148>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 808f 	bne.w	80041ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040ac:	4b4d      	ldr	r3, [pc, #308]	@ (80041e4 <xTaskIncrementTick+0x14c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040b4:	4a4b      	ldr	r2, [pc, #300]	@ (80041e4 <xTaskIncrementTick+0x14c>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d121      	bne.n	8004104 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040c0:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <xTaskIncrementTick+0x150>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	603b      	str	r3, [r7, #0]
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	e7fd      	b.n	80040de <xTaskIncrementTick+0x46>
 80040e2:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <xTaskIncrementTick+0x150>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <xTaskIncrementTick+0x154>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3e      	ldr	r2, [pc, #248]	@ (80041e8 <xTaskIncrementTick+0x150>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4a3e      	ldr	r2, [pc, #248]	@ (80041ec <xTaskIncrementTick+0x154>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b3e      	ldr	r3, [pc, #248]	@ (80041f0 <xTaskIncrementTick+0x158>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a3c      	ldr	r2, [pc, #240]	@ (80041f0 <xTaskIncrementTick+0x158>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	f000 f9a4 	bl	800444c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <xTaskIncrementTick+0x15c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d348      	bcc.n	80041a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <xTaskIncrementTick+0x150>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	4b36      	ldr	r3, [pc, #216]	@ (80041f4 <xTaskIncrementTick+0x15c>)
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	601a      	str	r2, [r3, #0]
					break;
 8004120:	e03e      	b.n	80041a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004122:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <xTaskIncrementTick+0x150>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800413a:	4a2e      	ldr	r2, [pc, #184]	@ (80041f4 <xTaskIncrementTick+0x15c>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004140:	e02e      	b.n	80041a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fc80 	bl	8003a4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fc77 	bl	8003a4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <xTaskIncrementTick+0x160>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	4a22      	ldr	r2, [pc, #136]	@ (80041f8 <xTaskIncrementTick+0x160>)
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <xTaskIncrementTick+0x164>)
 800417e:	441a      	add	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f7ff fc03 	bl	8003992 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004190:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <xTaskIncrementTick+0x168>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	429a      	cmp	r2, r3
 8004198:	d3b9      	bcc.n	800410e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800419a:	2301      	movs	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419e:	e7b6      	b.n	800410e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <xTaskIncrementTick+0x168>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a6:	4915      	ldr	r1, [pc, #84]	@ (80041fc <xTaskIncrementTick+0x164>)
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d901      	bls.n	80041bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <xTaskIncrementTick+0x16c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e004      	b.n	80041d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004208 <xTaskIncrementTick+0x170>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <xTaskIncrementTick+0x170>)
 80041d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041d4:	697b      	ldr	r3, [r7, #20]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000574 	.word	0x20000574
 80041e4:	20000550 	.word	0x20000550
 80041e8:	20000504 	.word	0x20000504
 80041ec:	20000508 	.word	0x20000508
 80041f0:	20000564 	.word	0x20000564
 80041f4:	2000056c 	.word	0x2000056c
 80041f8:	20000554 	.word	0x20000554
 80041fc:	20000450 	.word	0x20000450
 8004200:	2000044c 	.word	0x2000044c
 8004204:	20000560 	.word	0x20000560
 8004208:	2000055c 	.word	0x2000055c

0800420c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004212:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <vTaskSwitchContext+0xb0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800421a:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <vTaskSwitchContext+0xb4>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004220:	e045      	b.n	80042ae <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004222:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <vTaskSwitchContext+0xb4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004228:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <vTaskSwitchContext+0xb8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	f1c3 031f 	rsb	r3, r3, #31
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	4922      	ldr	r1, [pc, #136]	@ (80042c8 <vTaskSwitchContext+0xbc>)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	607b      	str	r3, [r7, #4]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <vTaskSwitchContext+0x5a>
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <vTaskSwitchContext+0xbc>)
 8004276:	4413      	add	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	3308      	adds	r3, #8
 800428c:	429a      	cmp	r2, r3
 800428e:	d104      	bne.n	800429a <vTaskSwitchContext+0x8e>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <vTaskSwitchContext+0xc0>)
 80042a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042a4:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <vTaskSwitchContext+0xc0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	334c      	adds	r3, #76	@ 0x4c
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <vTaskSwitchContext+0xc4>)
 80042ac:	6013      	str	r3, [r2, #0]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000574 	.word	0x20000574
 80042c0:	20000560 	.word	0x20000560
 80042c4:	20000554 	.word	0x20000554
 80042c8:	20000450 	.word	0x20000450
 80042cc:	2000044c 	.word	0x2000044c
 80042d0:	20000010 	.word	0x20000010

080042d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042dc:	f000 f852 	bl	8004384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <prvIdleTask+0x28>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d9f9      	bls.n	80042dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <prvIdleTask+0x2c>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042f8:	e7f0      	b.n	80042dc <prvIdleTask+0x8>
 80042fa:	bf00      	nop
 80042fc:	20000450 	.word	0x20000450
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e00c      	b.n	800432a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <prvInitialiseTaskLists+0x60>)
 800431c:	4413      	add	r3, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fb0a 	bl	8003938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3301      	adds	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d9ef      	bls.n	8004310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004330:	480d      	ldr	r0, [pc, #52]	@ (8004368 <prvInitialiseTaskLists+0x64>)
 8004332:	f7ff fb01 	bl	8003938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004336:	480d      	ldr	r0, [pc, #52]	@ (800436c <prvInitialiseTaskLists+0x68>)
 8004338:	f7ff fafe 	bl	8003938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800433c:	480c      	ldr	r0, [pc, #48]	@ (8004370 <prvInitialiseTaskLists+0x6c>)
 800433e:	f7ff fafb 	bl	8003938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004342:	480c      	ldr	r0, [pc, #48]	@ (8004374 <prvInitialiseTaskLists+0x70>)
 8004344:	f7ff faf8 	bl	8003938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004348:	480b      	ldr	r0, [pc, #44]	@ (8004378 <prvInitialiseTaskLists+0x74>)
 800434a:	f7ff faf5 	bl	8003938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <prvInitialiseTaskLists+0x78>)
 8004350:	4a05      	ldr	r2, [pc, #20]	@ (8004368 <prvInitialiseTaskLists+0x64>)
 8004352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004354:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <prvInitialiseTaskLists+0x7c>)
 8004356:	4a05      	ldr	r2, [pc, #20]	@ (800436c <prvInitialiseTaskLists+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000450 	.word	0x20000450
 8004368:	200004dc 	.word	0x200004dc
 800436c:	200004f0 	.word	0x200004f0
 8004370:	2000050c 	.word	0x2000050c
 8004374:	20000520 	.word	0x20000520
 8004378:	20000538 	.word	0x20000538
 800437c:	20000504 	.word	0x20000504
 8004380:	20000508 	.word	0x20000508

08004384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438a:	e019      	b.n	80043c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800438c:	f000 fa14 	bl	80047b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004390:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <prvCheckTasksWaitingTermination+0x50>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fb55 	bl	8003a4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <prvCheckTasksWaitingTermination+0x54>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a0b      	ldr	r2, [pc, #44]	@ (80043d8 <prvCheckTasksWaitingTermination+0x54>)
 80043aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043ac:	4b0b      	ldr	r3, [pc, #44]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043b6:	f000 fa31 	bl	800481c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f810 	bl	80043e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <prvCheckTasksWaitingTermination+0x58>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e1      	bne.n	800438c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000520 	.word	0x20000520
 80043d8:	2000054c 	.word	0x2000054c
 80043dc:	20000534 	.word	0x20000534

080043e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	334c      	adds	r3, #76	@ 0x4c
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fcb9 	bl	8004d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb87 	bl	8004b14 <vPortFree>
				vPortFree( pxTCB );
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb84 	bl	8004b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800440c:	e019      	b.n	8004442 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004414:	2b01      	cmp	r3, #1
 8004416:	d103      	bne.n	8004420 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb7b 	bl	8004b14 <vPortFree>
	}
 800441e:	e010      	b.n	8004442 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004426:	2b02      	cmp	r3, #2
 8004428:	d00b      	beq.n	8004442 <prvDeleteTCB+0x62>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60fb      	str	r3, [r7, #12]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <prvDeleteTCB+0x5e>
	}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004464:	e008      	b.n	8004478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <prvResetNextTaskUnblockTime+0x38>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a04      	ldr	r2, [pc, #16]	@ (8004488 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	20000504 	.word	0x20000504
 8004488:	2000056c 	.word	0x2000056c

0800448c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004496:	4b29      	ldr	r3, [pc, #164]	@ (800453c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800449c:	4b28      	ldr	r3, [pc, #160]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fad2 	bl	8003a4c <uxListRemove>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044ae:	4b24      	ldr	r3, [pc, #144]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	2201      	movs	r2, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43da      	mvns	r2, r3
 80044bc:	4b21      	ldr	r3, [pc, #132]	@ (8004544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4013      	ands	r3, r2
 80044c2:	4a20      	ldr	r2, [pc, #128]	@ (8004544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d10a      	bne.n	80044e4 <prvAddCurrentTaskToDelayedList+0x58>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	481a      	ldr	r0, [pc, #104]	@ (8004548 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044de:	f7ff fa58 	bl	8003992 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044e2:	e026      	b.n	8004532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ec:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d209      	bcs.n	8004510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fc:	4b13      	ldr	r3, [pc, #76]	@ (800454c <prvAddCurrentTaskToDelayedList+0xc0>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7ff fa66 	bl	80039da <vListInsert>
}
 800450e:	e010      	b.n	8004532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004510:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7ff fa5c 	bl	80039da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004522:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d202      	bcs.n	8004532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800452c:	4a09      	ldr	r2, [pc, #36]	@ (8004554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6013      	str	r3, [r2, #0]
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000550 	.word	0x20000550
 8004540:	2000044c 	.word	0x2000044c
 8004544:	20000554 	.word	0x20000554
 8004548:	20000538 	.word	0x20000538
 800454c:	20000508 	.word	0x20000508
 8004550:	20000504 	.word	0x20000504
 8004554:	2000056c 	.word	0x2000056c

08004558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b04      	subs	r3, #4
 8004568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004588:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <pxPortInitialiseStack+0x64>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b14      	subs	r3, #20
 8004592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b04      	subs	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f06f 0202 	mvn.w	r2, #2
 80045a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b20      	subs	r3, #32
 80045ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	080045c1 	.word	0x080045c1

080045c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ca:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <prvTaskExitError+0x58>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d00b      	beq.n	80045ec <prvTaskExitError+0x2c>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <prvTaskExitError+0x28>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
}
 80045fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004600:	bf00      	nop
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0fc      	beq.n	8004602 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	00000000 	.word	0x00000000

08004620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004620:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <pxCurrentTCBConst2>)
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f380 8809 	msr	PSP, r0
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	4770      	bx	lr
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst2>:
 8004640:	2000044c 	.word	0x2000044c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004648:	4808      	ldr	r0, [pc, #32]	@ (800466c <prvPortStartFirstTask+0x24>)
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f380 8808 	msr	MSP, r0
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8814 	msr	CONTROL, r0
 800465a:	b662      	cpsie	i
 800465c:	b661      	cpsie	f
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	df00      	svc	0
 8004668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800466a:	bf00      	nop
 800466c:	e000ed08 	.word	0xe000ed08

08004670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <xPortStartScheduler+0x124>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a47      	ldr	r2, [pc, #284]	@ (8004798 <xPortStartScheduler+0x128>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10b      	bne.n	8004698 <xPortStartScheduler+0x28>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004698:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <xPortStartScheduler+0x124>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3f      	ldr	r2, [pc, #252]	@ (800479c <xPortStartScheduler+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10b      	bne.n	80046ba <xPortStartScheduler+0x4a>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60fb      	str	r3, [r7, #12]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ba:	4b39      	ldr	r3, [pc, #228]	@ (80047a0 <xPortStartScheduler+0x130>)
 80046bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	22ff      	movs	r2, #255	@ 0xff
 80046ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <xPortStartScheduler+0x134>)
 80046e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046e2:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046e4:	2207      	movs	r2, #7
 80046e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046e8:	e009      	b.n	80046fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80046ea:	4b2f      	ldr	r3, [pc, #188]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	4a2d      	ldr	r2, [pc, #180]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d0ef      	beq.n	80046ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800470a:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <xPortStartScheduler+0x138>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1c3 0307 	rsb	r3, r3, #7
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00b      	beq.n	800472e <xPortStartScheduler+0xbe>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <xPortStartScheduler+0x138>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <xPortStartScheduler+0x13c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <xPortStartScheduler+0x13c>)
 8004752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <xPortStartScheduler+0x13c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <xPortStartScheduler+0x13c>)
 800475e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004764:	f000 f8da 	bl	800491c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <xPortStartScheduler+0x140>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800476e:	f000 f8f9 	bl	8004964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <xPortStartScheduler+0x144>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0f      	ldr	r2, [pc, #60]	@ (80047b4 <xPortStartScheduler+0x144>)
 8004778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800477c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800477e:	f7ff ff63 	bl	8004648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004782:	f7ff fd43 	bl	800420c <vTaskSwitchContext>
	prvTaskExitError();
 8004786:	f7ff ff1b 	bl	80045c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed00 	.word	0xe000ed00
 8004798:	410fc271 	.word	0x410fc271
 800479c:	410fc270 	.word	0x410fc270
 80047a0:	e000e400 	.word	0xe000e400
 80047a4:	20000578 	.word	0x20000578
 80047a8:	2000057c 	.word	0x2000057c
 80047ac:	e000ed20 	.word	0xe000ed20
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	e000ef34 	.word	0xe000ef34

080047b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d110      	bne.n	8004806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <vPortEnterCritical+0x60>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <vPortEnterCritical+0x4e>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	603b      	str	r3, [r7, #0]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <vPortEnterCritical+0x4a>
	}
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <vPortExitCritical+0x50>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <vPortExitCritical+0x26>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	607b      	str	r3, [r7, #4]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <vPortExitCritical+0x50>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	4a08      	ldr	r2, [pc, #32]	@ (800486c <vPortExitCritical+0x50>)
 800484a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800484c:	4b07      	ldr	r3, [pc, #28]	@ (800486c <vPortExitCritical+0x50>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <vPortExitCritical+0x44>
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800485e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c

08004870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004870:	f3ef 8009 	mrs	r0, PSP
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <pxCurrentTCBConst>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	f01e 0f10 	tst.w	lr, #16
 8004880:	bf08      	it	eq
 8004882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	6010      	str	r0, [r2, #0]
 800488c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004894:	f380 8811 	msr	BASEPRI, r0
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f7ff fcb4 	bl	800420c <vTaskSwitchContext>
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f380 8811 	msr	BASEPRI, r0
 80048ac:	bc09      	pop	{r0, r3}
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	6808      	ldr	r0, [r1, #0]
 80048b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b6:	f01e 0f10 	tst.w	lr, #16
 80048ba:	bf08      	it	eq
 80048bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048c0:	f380 8809 	msr	PSP, r0
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	f3af 8000 	nop.w

080048d0 <pxCurrentTCBConst>:
 80048d0:	2000044c 	.word	0x2000044c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f7ff fbd1 	bl	8004098 <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <SysTick_Handler+0x40>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <vPortSetupTimerInterrupt+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <vPortSetupTimerInterrupt+0x3c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <vPortSetupTimerInterrupt+0x40>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <vPortSetupTimerInterrupt+0x44>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010
 8004954:	e000e018 	.word	0xe000e018
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3
 8004960:	e000e014 	.word	0xe000e014

08004964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004974 <vPortEnableVFP+0x10>
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800496e:	6001      	str	r1, [r0, #0]
 8004970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004972:	bf00      	nop
 8004974:	e000ed88 	.word	0xe000ed88

08004978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004984:	f7ff fadc 	bl	8003f40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004988:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <pvPortMalloc+0x184>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004990:	f000 f924 	bl	8004bdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004994:	4b5a      	ldr	r3, [pc, #360]	@ (8004b00 <pvPortMalloc+0x188>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8095 	bne.w	8004acc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01e      	beq.n	80049e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80049a8:	2208      	movs	r2, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f023 0307 	bic.w	r3, r3, #7
 80049c0:	3308      	adds	r3, #8
 80049c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <pvPortMalloc+0x6e>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	617b      	str	r3, [r7, #20]
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	e7fd      	b.n	80049e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d06f      	beq.n	8004acc <pvPortMalloc+0x154>
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <pvPortMalloc+0x18c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d86a      	bhi.n	8004acc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049f6:	4b44      	ldr	r3, [pc, #272]	@ (8004b08 <pvPortMalloc+0x190>)
 80049f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <pvPortMalloc+0x190>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a00:	e004      	b.n	8004a0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d903      	bls.n	8004a1e <pvPortMalloc+0xa6>
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f1      	bne.n	8004a02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a1e:	4b37      	ldr	r3, [pc, #220]	@ (8004afc <pvPortMalloc+0x184>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d051      	beq.n	8004acc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	4413      	add	r3, r2
 8004a30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	1ad2      	subs	r2, r2, r3
 8004a42:	2308      	movs	r3, #8
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d920      	bls.n	8004a8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <pvPortMalloc+0xfc>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	613b      	str	r3, [r7, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a86:	69b8      	ldr	r0, [r7, #24]
 8004a88:	f000 f90a 	bl	8004ca0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <pvPortMalloc+0x18c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <pvPortMalloc+0x18c>)
 8004a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <pvPortMalloc+0x18c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <pvPortMalloc+0x194>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d203      	bcs.n	8004aae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aa6:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <pvPortMalloc+0x18c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <pvPortMalloc+0x194>)
 8004aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <pvPortMalloc+0x188>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <pvPortMalloc+0x198>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a11      	ldr	r2, [pc, #68]	@ (8004b10 <pvPortMalloc+0x198>)
 8004aca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004acc:	f7ff fa46 	bl	8003f5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <pvPortMalloc+0x17a>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	60fb      	str	r3, [r7, #12]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <pvPortMalloc+0x176>
	return pvReturn;
 8004af2:	69fb      	ldr	r3, [r7, #28]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	@ 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20001140 	.word	0x20001140
 8004b00:	20001154 	.word	0x20001154
 8004b04:	20001144 	.word	0x20001144
 8004b08:	20001138 	.word	0x20001138
 8004b0c:	20001148 	.word	0x20001148
 8004b10:	2000114c 	.word	0x2000114c

08004b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04f      	beq.n	8004bc6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b26:	2308      	movs	r3, #8
 8004b28:	425b      	negs	r3, r3
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <vPortFree+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <vPortFree+0x46>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <vPortFree+0x66>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60bb      	str	r3, [r7, #8]
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <vPortFree+0xbc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01e      	beq.n	8004bc6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11a      	bne.n	8004bc6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <vPortFree+0xbc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ba0:	f7ff f9ce 	bl	8003f40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <vPortFree+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4413      	add	r3, r2
 8004bae:	4a09      	ldr	r2, [pc, #36]	@ (8004bd4 <vPortFree+0xc0>)
 8004bb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bb2:	6938      	ldr	r0, [r7, #16]
 8004bb4:	f000 f874 	bl	8004ca0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004bb8:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <vPortFree+0xc4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a06      	ldr	r2, [pc, #24]	@ (8004bd8 <vPortFree+0xc4>)
 8004bc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004bc2:	f7ff f9cb 	bl	8003f5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20001154 	.word	0x20001154
 8004bd4:	20001144 	.word	0x20001144
 8004bd8:	20001150 	.word	0x20001150

08004bdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004be2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8004be6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004be8:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <prvHeapInit+0xac>)
 8004bea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <prvHeapInit+0xac>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c14:	4a1d      	ldr	r2, [pc, #116]	@ (8004c8c <prvHeapInit+0xb0>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <prvHeapInit+0xb0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4413      	add	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c28:	2208      	movs	r2, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <prvHeapInit+0xb4>)
 8004c3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <prvHeapInit+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <prvHeapInit+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <prvHeapInit+0xb4>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	@ (8004c94 <prvHeapInit+0xb8>)
 8004c6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <prvHeapInit+0xbc>)
 8004c72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <prvHeapInit+0xc0>)
 8004c76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c7a:	601a      	str	r2, [r3, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	20000580 	.word	0x20000580
 8004c8c:	20001138 	.word	0x20001138
 8004c90:	20001140 	.word	0x20001140
 8004c94:	20001148 	.word	0x20001148
 8004c98:	20001144 	.word	0x20001144
 8004c9c:	20001154 	.word	0x20001154

08004ca0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ca8:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <prvInsertBlockIntoFreeList+0xac>)
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e002      	b.n	8004cb4 <prvInsertBlockIntoFreeList+0x14>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d8f7      	bhi.n	8004cae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d108      	bne.n	8004ce2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d118      	bne.n	8004d28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b15      	ldr	r3, [pc, #84]	@ (8004d50 <prvInsertBlockIntoFreeList+0xb0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d00d      	beq.n	8004d1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e008      	b.n	8004d30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d50 <prvInsertBlockIntoFreeList+0xb0>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d002      	beq.n	8004d3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20001138 	.word	0x20001138
 8004d50:	20001140 	.word	0x20001140

08004d54 <memset>:
 8004d54:	4402      	add	r2, r0
 8004d56:	4603      	mov	r3, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <memset+0xa>
 8004d5c:	4770      	bx	lr
 8004d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d62:	e7f9      	b.n	8004d58 <memset+0x4>

08004d64 <_reclaim_reent>:
 8004d64:	4b29      	ldr	r3, [pc, #164]	@ (8004e0c <_reclaim_reent+0xa8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	b570      	push	{r4, r5, r6, lr}
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	d04b      	beq.n	8004e08 <_reclaim_reent+0xa4>
 8004d70:	69c3      	ldr	r3, [r0, #28]
 8004d72:	b1ab      	cbz	r3, 8004da0 <_reclaim_reent+0x3c>
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	b16b      	cbz	r3, 8004d94 <_reclaim_reent+0x30>
 8004d78:	2500      	movs	r5, #0
 8004d7a:	69e3      	ldr	r3, [r4, #28]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	5959      	ldr	r1, [r3, r5]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d13b      	bne.n	8004dfc <_reclaim_reent+0x98>
 8004d84:	3504      	adds	r5, #4
 8004d86:	2d80      	cmp	r5, #128	@ 0x80
 8004d88:	d1f7      	bne.n	8004d7a <_reclaim_reent+0x16>
 8004d8a:	69e3      	ldr	r3, [r4, #28]
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	68d9      	ldr	r1, [r3, #12]
 8004d90:	f000 f864 	bl	8004e5c <_free_r>
 8004d94:	69e3      	ldr	r3, [r4, #28]
 8004d96:	6819      	ldr	r1, [r3, #0]
 8004d98:	b111      	cbz	r1, 8004da0 <_reclaim_reent+0x3c>
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 f85e 	bl	8004e5c <_free_r>
 8004da0:	6961      	ldr	r1, [r4, #20]
 8004da2:	b111      	cbz	r1, 8004daa <_reclaim_reent+0x46>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 f859 	bl	8004e5c <_free_r>
 8004daa:	69e1      	ldr	r1, [r4, #28]
 8004dac:	b111      	cbz	r1, 8004db4 <_reclaim_reent+0x50>
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f854 	bl	8004e5c <_free_r>
 8004db4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004db6:	b111      	cbz	r1, 8004dbe <_reclaim_reent+0x5a>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f84f 	bl	8004e5c <_free_r>
 8004dbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dc0:	b111      	cbz	r1, 8004dc8 <_reclaim_reent+0x64>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f84a 	bl	8004e5c <_free_r>
 8004dc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004dca:	b111      	cbz	r1, 8004dd2 <_reclaim_reent+0x6e>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 f845 	bl	8004e5c <_free_r>
 8004dd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004dd4:	b111      	cbz	r1, 8004ddc <_reclaim_reent+0x78>
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f840 	bl	8004e5c <_free_r>
 8004ddc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004dde:	b111      	cbz	r1, 8004de6 <_reclaim_reent+0x82>
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 f83b 	bl	8004e5c <_free_r>
 8004de6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004de8:	b111      	cbz	r1, 8004df0 <_reclaim_reent+0x8c>
 8004dea:	4620      	mov	r0, r4
 8004dec:	f000 f836 	bl	8004e5c <_free_r>
 8004df0:	6a23      	ldr	r3, [r4, #32]
 8004df2:	b14b      	cbz	r3, 8004e08 <_reclaim_reent+0xa4>
 8004df4:	4620      	mov	r0, r4
 8004df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dfa:	4718      	bx	r3
 8004dfc:	680e      	ldr	r6, [r1, #0]
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 f82c 	bl	8004e5c <_free_r>
 8004e04:	4631      	mov	r1, r6
 8004e06:	e7bb      	b.n	8004d80 <_reclaim_reent+0x1c>
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000010 	.word	0x20000010

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4d0d      	ldr	r5, [pc, #52]	@ (8004e48 <__libc_init_array+0x38>)
 8004e14:	4c0d      	ldr	r4, [pc, #52]	@ (8004e4c <__libc_init_array+0x3c>)
 8004e16:	1b64      	subs	r4, r4, r5
 8004e18:	10a4      	asrs	r4, r4, #2
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	4d0b      	ldr	r5, [pc, #44]	@ (8004e50 <__libc_init_array+0x40>)
 8004e22:	4c0c      	ldr	r4, [pc, #48]	@ (8004e54 <__libc_init_array+0x44>)
 8004e24:	f000 f870 	bl	8004f08 <_init>
 8004e28:	1b64      	subs	r4, r4, r5
 8004e2a:	10a4      	asrs	r4, r4, #2
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	08004fc0 	.word	0x08004fc0
 8004e4c:	08004fc0 	.word	0x08004fc0
 8004e50:	08004fc0 	.word	0x08004fc0
 8004e54:	08004fc4 	.word	0x08004fc4

08004e58 <__retarget_lock_acquire_recursive>:
 8004e58:	4770      	bx	lr

08004e5a <__retarget_lock_release_recursive>:
 8004e5a:	4770      	bx	lr

08004e5c <_free_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d041      	beq.n	8004ee8 <_free_r+0x8c>
 8004e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e68:	1f0c      	subs	r4, r1, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfb8      	it	lt
 8004e6e:	18e4      	addlt	r4, r4, r3
 8004e70:	f000 f83e 	bl	8004ef0 <__malloc_lock>
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <_free_r+0x90>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	b933      	cbnz	r3, 8004e88 <_free_r+0x2c>
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	6014      	str	r4, [r2, #0]
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e84:	f000 b83a 	b.w	8004efc <__malloc_unlock>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x42>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	e7ed      	b.n	8004e7a <_free_r+0x1e>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x4c>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x42>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1850      	adds	r0, r2, r1
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x6c>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	1850      	adds	r0, r2, r1
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1e0      	bne.n	8004e7e <_free_r+0x22>
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4408      	add	r0, r1
 8004ec4:	6010      	str	r0, [r2, #0]
 8004ec6:	e7da      	b.n	8004e7e <_free_r+0x22>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x74>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	e7d6      	b.n	8004e7e <_free_r+0x22>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7ca      	b.n	8004e7e <_free_r+0x22>
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	bf00      	nop
 8004eec:	20001294 	.word	0x20001294

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	@ (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff bfb1 	b.w	8004e58 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20001290 	.word	0x20001290

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	@ (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff bfac 	b.w	8004e5a <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	20001290 	.word	0x20001290

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
